<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kherrisan</title>
    <link>http://www.kherrisan.cn/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>正在从科瑞杉的折越节点向艾尔地表投放部队</description>
    <pubDate>Thu, 04 Jun 2020 06:32:59 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>留言板(ÒܫÓױ)</title>
      <link>http://www.kherrisan.cn/posts/fcad8979/</link>
      <guid>http://www.kherrisan.cn/posts/fcad8979/</guid>
      <pubDate>Sun, 10 May 2020 13:13:44 GMT</pubDate>
      <description>
      
      </description>
      
      
      <comments>http://www.kherrisan.cn/posts/fcad8979/#disqus_thread</comments>
    </item>
    
    <item>
      <title>我做的小玩意儿的</title>
      <link>http://www.kherrisan.cn/posts/a2c247c4/</link>
      <guid>http://www.kherrisan.cn/posts/a2c247c4/</guid>
      <pubDate>Sun, 10 May 2020 13:07:34 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Leetcode-陈列室&quot;&gt;&lt;a href=&quot;#Leetcode-陈列室&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 陈列室&quot;&gt;&lt;/a&gt;Leetcode 陈列室&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/202005092025
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Leetcode-陈列室"><a href="#Leetcode-陈列室" class="headerlink" title="Leetcode 陈列室"></a>Leetcode 陈列室</h1><p><img src="/images/20200509202553.png" srcset="/img/loading.gif" alt></p><center class="third">    <img src="https://img.shields.io/github/workflow/status/Kherrisan/leetcode-viewer/Daily%20CI?label=Daily%20CI&style=for-the-badge" srcset="/img/loading.gif">    <img src="https://raw.githubusercontent.com/Kherrisan/leetcode-viewer/master/cloc.svg" srcset="/img/loading.gif">    <img src="https://img.shields.io/badge/Lang-Vue.JS-%234FC08D?style=for-the-badge&logo=vue.js" srcset="/img/loading.gif"></center><p>在 Github 上一个项目上改了改，能用。</p><p><a href="https://leetcode.kherrisan.cn" target="_blank" rel="noopener">点此访问</a></p><p><a href="https://github.com/Kherrisan/leetcode-viewer" target="_blank" rel="noopener">代码仓库</a></p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/a2c247c4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>又一个新主题</title>
      <link>http://www.kherrisan.cn/posts/972280a7/</link>
      <guid>http://www.kherrisan.cn/posts/972280a7/</guid>
      <pubDate>Sat, 09 May 2020 20:08:51 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;喜新厌旧的我又换了一个 Hexo 主题，名为 &lt;a href=&quot;https://hexo.fluid-dev.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;，这个主题是以 Material Design 为主题风格的。&lt;/p&gt;
&lt;h2 i
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>喜新厌旧的我又换了一个 Hexo 主题，名为 <a href="https://hexo.fluid-dev.com/" target="_blank" rel="noopener"></a>，这个主题是以 Material Design 为主题风格的。</p><h2 id="资源内联"><a href="#资源内联" class="headerlink" title="资源内联"></a>资源内联</h2><p>上次使用的 hexo-filter-asset-inline 出了一些问题，且每次更换主题都需要手动给所有资源 url 添加 inline 参数也挺麻烦的，所以我自己基于 Gulp 搓了一个 css/js 内联工具。</p><div class="hljs"><pre><code class="hljs js"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);<span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hexo-fs'</span>);<span class="hljs-keyword">var</span> minifycss = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-minify-css'</span>);<span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-uglify'</span>);<span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-htmlmin'</span>);<span class="hljs-keyword">var</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">'sync-request'</span>);<span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-htmlclean'</span>);<span class="hljs-keyword">let</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-babel'</span>);<span class="hljs-keyword">var</span> isUrl = <span class="hljs-built_in">require</span>(<span class="hljs-string">'is-url'</span>);<span class="hljs-keyword">var</span> replace = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-replace'</span>);<span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);<span class="hljs-keyword">const</span> { series } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);<span class="hljs-keyword">var</span> CACHE = {};<span class="hljs-comment">//要排除的文件————有些 css/js 文件被内联了的话可能会导致页面加载异常。具体原理我也不知。</span><span class="hljs-keyword">var</span> EXCLUDES = [<span class="hljs-string">'animation.js'</span>, <span class="hljs-string">'MathJax'</span>, <span class="hljs-string">'fontawesome'</span>, <span class="hljs-string">'lightgallery'</span>];<span class="hljs-comment">//内联</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inline</span>(<span class="hljs-params">raw, inlineOpen, inlineClose</span>) </span>{    <span class="hljs-keyword">return</span> replace(raw, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">match, src, offset, string</span>) </span>{        <span class="hljs-keyword">for</span> (ex <span class="hljs-keyword">of</span> EXCLUDES) {            <span class="hljs-keyword">if</span> (src.indexOf(ex) != <span class="hljs-number">-1</span>) {                <span class="hljs-built_in">console</span>.debug(<span class="hljs-string">"ignore "</span> + src)                <span class="hljs-keyword">return</span> match            }        }        <span class="hljs-keyword">if</span> (isUrl(src)) {            <span class="hljs-keyword">try</span> {                <span class="hljs-keyword">var</span> cached = CACHE[src];                <span class="hljs-keyword">if</span> (!cached) {                    <span class="hljs-built_in">console</span>.debug(<span class="hljs-string">"get "</span> + src + <span class="hljs-string">" from remote"</span>)                    <span class="hljs-keyword">var</span> res = request(<span class="hljs-string">'GET'</span>, addhttp(src));                    cached = res.body.toString();                    <span class="hljs-keyword">if</span> (!cached) {                        <span class="hljs-keyword">return</span> match;                    }                    CACHE[src] = cached;                }                <span class="hljs-keyword">return</span> inlineOpen + cached + inlineClose;            } <span class="hljs-keyword">catch</span> (e) {                <span class="hljs-keyword">return</span> match            }        } <span class="hljs-keyword">else</span> {            <span class="hljs-keyword">if</span> (src.indexOf(<span class="hljs-string">'?'</span>) != <span class="hljs-number">-1</span>) {                src = src.substring(<span class="hljs-number">0</span>, src.indexOf(<span class="hljs-string">'?'</span>));            }            <span class="hljs-keyword">var</span> local_path = path.join(<span class="hljs-string">'docs'</span>, src);            <span class="hljs-keyword">var</span> cached = CACHE[local_path];            <span class="hljs-keyword">var</span> file_exists = <span class="hljs-literal">true</span>;            <span class="hljs-keyword">if</span> (!cached) {                <span class="hljs-keyword">try</span> {                    <span class="hljs-keyword">var</span> file_exists = fs.existsSync(local_path);                    <span class="hljs-keyword">if</span> (file_exists) {                        <span class="hljs-built_in">console</span>.debug(<span class="hljs-string">"get "</span> + src + <span class="hljs-string">" from local fs"</span>)                        <span class="hljs-keyword">var</span> cached = fs.readFileSync(local_path);                        CACHE[local_path] = cached;                    }                } <span class="hljs-keyword">catch</span> (err) {                    file_exists = <span class="hljs-literal">false</span>;                }            }            <span class="hljs-keyword">if</span> (file_exists) {                <span class="hljs-keyword">return</span> inlineOpen + cached + inlineClose;            } <span class="hljs-keyword">else</span> {                <span class="hljs-built_in">console</span>.debug(local_path + <span class="hljs-string">" doesn't exist locally"</span>)                <span class="hljs-keyword">return</span> match            }        }    })}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addhttp</span>(<span class="hljs-params">url</span>) </span>{    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^(?:f|ht)tps?\:/</span>.test(url)) {        url = <span class="hljs-string">"http:"</span> + url;    }    <span class="hljs-keyword">return</span> url;}<span class="hljs-comment">// 压缩html</span>gulp.task(<span class="hljs-string">'minify-html'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">'./docs/**/*.html'</span>)        .pipe(inline(<span class="hljs-regexp">/<script.+?src="(.+?\.js.*?)".*?><\/script>/g</span>, <span class="hljs-string">'<script type="text/javascript">'</span>, <span class="hljs-string">'</script>'</span>))        .pipe(inline(<span class="hljs-regexp">/<link rel="stylesheet" href="(.+?\.css.*?)">/g</span>, <span class="hljs-string">'<style type="text/css">'</span>, <span class="hljs-string">'</style>'</span>))        .pipe(htmlclean())        .pipe(gulp.dest(<span class="hljs-string">'./docs'</span>))});<span class="hljs-comment">// 压缩css</span>gulp.task(<span class="hljs-string">'minify-css'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">'./docs/**/*.css'</span>)        .pipe(minifycss({            compatibility: <span class="hljs-string">'ie8'</span>        }))        .pipe(gulp.dest(<span class="hljs-string">'./docs'</span>));});<span class="hljs-comment">// 压缩js</span>gulp.task(<span class="hljs-string">'minify-js'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">'./docs/js/**/*.js'</span>)        .pipe(babel({            presets: [<span class="hljs-string">'@babel/preset-env'</span>]        }))        .pipe(uglify())        .pipe(gulp.dest(<span class="hljs-string">'./docs/js'</span>));});<span class="hljs-comment">// 默认任务</span>gulp.task(<span class="hljs-string">'default'</span>, gulp.series(    gulp.parallel(<span class="hljs-string">'minify-js'</span>, <span class="hljs-string">'minify-css'</span>), <span class="hljs-string">'minify-html'</span>));</code></pre></div>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/972280a7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>53.最大子序和</title>
      <link>http://www.kherrisan.cn/posts/396fd427/</link>
      <guid>http://www.kherrisan.cn/posts/396fd427/</guid>
      <pubDate>Sun, 03 May 2020 12:26:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [-2,1,-3,4,-1,2,1,-5,4]&lt;br&gt;输出: 6&lt;br&gt;解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><blockquote><p>输入: [-2,1,-3,4,-1,2,1,-5,4]<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p></blockquote><a id="more"></a><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>乍一看，子序和是连续的，那么就会很自然地想到滑动窗口的形式：维护两个指针，一左一右。</p><p>问题在于左右指针何时移动。看右指针的话，可能会碰到正数或者负数，如果右指针向右移动一位之后是正数，那这个区间内的子序和肯定会变大；如果移动之后是负数，那子序和就会变小，看似右指针此时就不需要移动了。</p><p>但问题在于你不知道这个负数之后是不是还跟着一个绝对值更大的正数，如果是的话，那这个负数就应该被划归到子序区间内。</p><p>左指针从左向右移动，如果指向负数，那就向右移动一格，如果是正数，看似这个正数能够让子序和更大，但同样的，无法确定在这个正数之后是否存在一个绝对值比他更大的负数，那么左指针就需要向右移动两格。</p><p>这样一种对未来遇到的元素的未知，导致无法判断是否要移动指针。如果使用暴力解法，枚举每个左指针和右指针位置的组合，那么时间复杂度为：$O(n^2)$。</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="优化的移动规则"><a href="#优化的移动规则" class="headerlink" title="优化的移动规则"></a>优化的移动规则</h3><p><strong>实际上动态规划也是从另一个角度理清左右指针的移动关系。既然无法预知接下来元素的正负，那就从当前的序列和的正负入手。</strong></p><p>假设现在有一个区间以及左右指针。接下来要决定如何移动左右指针。</p><ol><li>如果这个区间所包含的子序和小于 0，那么说明这个子序列肯定不是最终结果，因为这个子序列后面紧跟着的一个数，无论他是正数还是负数，子序列包含了这个数之后的和都会比这个数小。这时左右指针可以直接指向下一个数，区间的宽度变为 1。</li><li>子序列和大于 0。这时可以移动右指针，但为了能够得到所有情况中的最大子序和，需要把子序和记录下来。这时左指针不动。</li></ol><p>总得来说，左指针跳着走，右指针一格一格走。那为什么左指针不需要一格一格走呢？</p><p>考察这个数组：</p><script type="math/tex; mode=display">[1, -2, 3, -5, 7, 8, -2]</script><p>左指针指向 1，右指针指向 3，那么此时就是在<strong>滑动窗口</strong>中讨论到的：左指针要向右移动，并且 -2 的绝对值比 1 大，因此需要把左指针向右移动两格到 3。但是根据本节上面刚刚给出的移动规则，是不可能存在这样的情况的，因为$[1, -2]$的和小于 0，所以下一步左右指针肯定直接指向 3 了。</p><p>也就是说左指针不需要一格一格走，可以跳着走。</p><p>在实际编码的过程中，不需要一板一眼地定义两个变量(left、right)，来标识左右指针的位置。题目的答案并不关系最小子序和的位置，而只关心<strong>子序和的值</strong>。所以定义一个变量 sum 来标识当前的最小子序和。把上面的<strong>判断正负</strong>的思想表示成代码：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (num > <span class="hljs-number">0</span>) {    sum += num;} <span class="hljs-keyword">else</span> {    sum = num;}</code></pre></div><p>可以优化成 <code>sum = Math.max(num, sum + num);</code></p><h3 id="相同形式较小规模的子问题"><a href="#相同形式较小规模的子问题" class="headerlink" title="相同形式较小规模的子问题"></a>相同形式较小规模的子问题</h3><p>定义 $f(i)$ 表示已位置 i 结尾的子序和，那么满足：</p><script type="math/tex; mode=display">f(i)=max\\{f(i-1)+a[i],a[i]\\}</script><p>由此可以得到一个$f(i)$的表，要从表中找到最大值。由于$f(i)$在计算时只和前面的 i 有关，因此不需要真正开辟一个数组来存放每个$f(i)$，而是只要记录当前的最大$f(i)$，如果有更大的，就把之前找到的值抛弃掉。</p><p>在一个 for 循环中干两件事：</p><ol><li>更新以 i 位置结尾的最大子序和，即计算 $f(i)$</li><li>更新 $f(0)$ 到 $f(i)$ 范围内的所有子序和的最大值。</li></ol><p>代码如下：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>{        <span class="hljs-keyword">if</span>(nums.length==<span class="hljs-number">0</span>){            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        }        <span class="hljs-keyword">int</span> res=nums[<span class="hljs-number">0</span>];        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> n:nums){            sum=Math.max(sum+n,n);            res=Math.max(res,sum);        }        <span class="hljs-keyword">return</span> res;    }}</code></pre></div><h2 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h2>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/396fd427/#disqus_thread</comments>
    </item>
    
    <item>
      <title>我理想的文档管理模式</title>
      <link>http://www.kherrisan.cn/posts/25678d68/</link>
      <guid>http://www.kherrisan.cn/posts/25678d68/</guid>
      <pubDate>Wed, 22 Apr 2020 21:23:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;我理想的文档管理模式&quot;&gt;&lt;a href=&quot;#我理想的文档管理模式&quot; class=&quot;headerlink&quot; title=&quot;我理想的文档管理模式&quot;&gt;&lt;/a&gt;我理想的文档管理模式&lt;/h1&gt;&lt;h2 id=&quot;印象笔记&quot;&gt;&lt;a href=&quot;#印象笔记&quot; class=&quot;head
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="我理想的文档管理模式"><a href="#我理想的文档管理模式" class="headerlink" title="我理想的文档管理模式"></a>我理想的文档管理模式</h1><h2 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h2><p><img src="/images/20200422220756.png" srcset="/img/loading.gif" alt></p><p>在我把电脑换成了 Macbook Pro 之后，我开始尝试用<a href>印象笔记</a>来进行文档管理。现在，我的印象笔记不仅用来存放我平时的所有正式和非正式的书写，包括零碎的草稿和阅读笔记，还承载了<strong>稍后阅读、文件归档（证书、发票、说明书）</strong>这两大功能。</p><ol><li>通过 <strong>ios 的分享、MacOS Safari 的剪藏插件</strong>，可以将网页（准确地说是 URL）的内容存放在印象笔记中，虽说有时剪藏得到的网页内容并不完整，但也算可用。</li><li>得益于印象笔记优秀的<strong>中文全文搜索功能</strong>，那些需要长期保存的文件也被我放在了印象笔记中，方便随手检索。而 Alfred 的<a href>印象笔记 Workflow</a>，更是让文档的检索更加快捷方便。</li></ol><p>但是我也发现了一些问题，例如</p><ol><li>印象笔记的文档和 MacOS 的本地文件（先不论是不是 iCloud）的管辖范围在某些程度上会产生重合。</li><li>印象笔记虽然在笔记领域还是比较成熟的，但是 MacOS 端的客户端体验并不完美，有一些很气的小问题：<ol><li>在某个笔记包含较多的图片时，上下滑动不平滑，一卡一卡。</li><li>对 Markdown 格式支持不完整。</li></ol></li><li>要钱（虽说穷是我的问题）。</li></ol><h2 id="Devonthink"><a href="#Devonthink" class="headerlink" title="Devonthink"></a>Devonthink</h2><p><img src="/images/20200422220915.png" srcset="/img/loading.gif" alt></p><p>在少数派的文章中了解到了 <a href>Devonthink</a> 这款软件。Devonthink 是个非常专业的文档管理工具，他本身的存储从文件系统的角度看是和 MacOS 的图库一样的，有一个专门的数据库文件，需要把文件加入到 Devonthink 数据库里进行整理，但 Devonthink 支持引用而不拷贝文件，这样就不会出现两个副本的问题。Devonthink 不仅是从文件的归类整理、检索来说都是非常专业的，唯一的问题在于这个软件<strong>太贵了</strong>！！！</p><h2 id="Onedrive-amp-amp-VSCode"><a href="#Onedrive-amp-amp-VSCode" class="headerlink" title="Onedrive && VSCode"></a>Onedrive && VSCode</h2><p>我最近挖掘了一种新的文档管理模式。</p><ul><li>使用 Onedrive 进行多设备同步。Onedrive 的云同步和版本管理还是很可靠的。</li><li>使用 VScode 进行 Markdown 的写作。</li></ul><p>在 iPhone 和 iPad 上都有 Onedrive 的客户端，可以直接搜索、阅读 pdf、word 等格式文件，唯一美中不足的是 iPad 上的 Onedrive 在打开 Markdown 文件时会出现乱码，导致该文件上的全文搜索索引失效，因此搜素 Markdown 文件中的内容算是废了。</p><p>Onedrive 对于 Office 套件的文件格式的搜索倒是支持地很不错。</p><h2 id="理想的文件管理"><a href="#理想的文件管理" class="headerlink" title="理想的文件管理"></a>理想的文件管理</h2><p>我理想的文件管理模式有以下的特征：</p><ol><li>有快捷的全文检索，尤其是要对中文有良好的支持。对于扫描版的 PDF 要能够进行 OCR 扫描后进行检索，对于可编辑的 PDF 也要能够进行检索。</li><li>多终端同步，最好能够跨平台，因为未来我还是有可能用到 Windows 生态的。如果不能跨平台的话最好有 WEB 端。</li><li>优秀的 Markdown 撰写体验，对于其他的文档格式（word、excel、pdf）要能够支持阅读。</li></ol><p>目前还未找到完全符合我要求的文档管理软件，目测需要我自己开发。等我有空了就自己去写一个~</p><h2 id="如果需要我来开发这个软件的话"><a href="#如果需要我来开发这个软件的话" class="headerlink" title="如果需要我来开发这个软件的话"></a>如果需要我来开发这个软件的话</h2><p>APP 的形式和大多数的笔记 APP 类似。</p><ol><li>多格式阅读。</li><li>Markdown 格式写作。</li><li>借助于 Onedrive（或者 Dropbox、iCloud）的的跨平台同步。</li><li>全文检索。</li><li>其他高级的文档组织功能，例如标签、关联等。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/25678d68/#disqus_thread</comments>
    </item>
    
    <item>
      <title>新的主题</title>
      <link>http://www.kherrisan.cn/posts/5ca0a75b/</link>
      <guid>http://www.kherrisan.cn/posts/5ca0a75b/</guid>
      <pubDate>Fri, 10 Apr 2020 20:06:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;之前一直使用 Hexo 的 next 主题来呈现博客，最近觉得 next 太素了，想换一个花哨一些的~&lt;/p&gt;
&lt;h2 id=&quot;Fluid&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前一直使用 Hexo 的 next 主题来呈现博客，最近觉得 next 太素了，想换一个花哨一些的~</p><h2 id="Fluid"><a href="#Fluid" class="headerlink" title="Fluid"></a>Fluid</h2><p>这个主题还是我在 Github 首页被推荐到的，看来 Github 的推荐算法越来越智能了，连博客主题的个人喜好都能作为推荐的标准了（开个玩笑）。</p><h2 id="额外的工作"><a href="#额外的工作" class="headerlink" title="额外的工作"></a>额外的工作</h2><h3 id="博文封面"><a href="#博文封面" class="headerlink" title="博文封面"></a>博文封面</h3><p>Nexmoe 支持为每篇文章配置一个漂漂亮亮的封面图，操作方法是在文章 md 文件的头部添加下面几行代码，分别是图片的 http 地址、长度和宽度。据作者说，之所要要显式地声明文件长宽，是为了消除图片的抖动。</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">cover:</span> <span class="hljs-string">https://i.loli.net/2019/07/21/5d33d5dc1531213134.png</span><span class="hljs-attr">coverWidth:</span> <span class="hljs-number">1200</span><span class="hljs-attr">coverHeight:</span> <span class="hljs-number">750</span><span class="hljs-meta">---</span></code></pre></div><h3 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h3><p>作者的博客首页摆上了一堆社交网站的 Logo，特别可爱。</p><p><img src="https://oss.kherrisan.cn/20200410201550.png" srcset="/img/loading.gif" alt></p><p>在主题的 _config.yml 文件中，可以添加社交网站的 Logo 和个人链接。我暂时搞了四个。</p><div class="hljs"><pre><code class="hljs angelscript">social:  哔哩哔哩:    - https:<span class="hljs-comment">//space.bilibili.com/13288240</span>    - icon-bilibili    - rgb(<span class="hljs-number">231</span>, <span class="hljs-number">106</span>, <span class="hljs-number">141</span>)    - rgba(<span class="hljs-number">231</span>, <span class="hljs-number">106</span>, <span class="hljs-number">141</span>, <span class="hljs-number">.15</span>)  GitHub:    - https:<span class="hljs-comment">//github.com/kherrisan/</span>    - icon-github    - rgb(<span class="hljs-number">25</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>)    - rgba(<span class="hljs-number">25</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">.15</span>)  Telegram:    - https:<span class="hljs-comment">//github.com/kherrisan/</span>    - icon-telegram    - rgb(<span class="hljs-number">39</span>,<span class="hljs-number">167</span>,<span class="hljs-number">229</span>)    - rgba(<span class="hljs-number">39</span>,<span class="hljs-number">167</span>,<span class="hljs-number">229</span>,<span class="hljs-number">.1</span>)  知乎:    - https:<span class="hljs-comment">//www.zhihu.com/people/smalldk</span>    - icon-zhihu    - rgb(<span class="hljs-number">00</span>,<span class="hljs-number">132</span>, <span class="hljs-number">256</span>)    - rgba(<span class="hljs-number">00</span>, <span class="hljs-number">132</span>, <span class="hljs-number">256</span>, <span class="hljs-number">.15</span>)</code></pre></div><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>Mexmoe 自带了代码高亮，需要把 Hexo 默认的代码高亮功能关掉，来避免功能冲突。</p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>我使用的是 Gittalk。先简单描述一下 Gitalk 的原理：</p><ol><li>博客的网页中包含 Gitalk 的 js 脚本，在打开文章页的时候，浏览器会加载 js 脚本的内容。</li><li>js 脚本会去请求 Github 的一个接口，通过这个接口去查询指定仓库的 issues，这个仓库就是在 <strong>_config.yml</strong> 中的 <strong>repo</strong>，repo 不是存放博客内容的仓库名，而是指存放评论的仓库名，当然很多人把评论直接放在博客内容的仓库里，所以 repo 就是 xxx.github.io 这个格式。使用 key 和 secret 来对接口进行鉴权。我另外新建了一个叫 gitalk 的仓库，故 repo 就只要写 gitalk 就行了。</li><li>Github 的服务器接口收到了查询 issues 的相关请求，同时会检查请求来自的 Host 是不是你博客真正部署所在的网址，对于大多数人是 xxx.github.io，如果使用自定义域名，也可以是 www.xxx.com 这样。至于到底是什么样，是由用户在 Github - OAuth App 中的 <strong>Authorization callback URL</strong> 指定的。如果你在本地调试，那就应该写为 localhost:4000。当然它也会验证 key 和 secret 是否匹配。至于 <strong>Homepage URL</strong> 我还不知道有什么用，貌似可以随便写。</li><li>Github 的接口返回 issues 给浏览器，浏览器呈现评论列表。</li></ol><p>我的 gitalk 是这么配置的：</p><div class="hljs"><pre><code class="hljs dts"><span class="hljs-symbol">gitalk:</span><span class="hljs-symbol">  admin:</span> kherrisan<span class="hljs-symbol">  owner:</span> kherrisan<span class="hljs-symbol">  repo:</span> gitalk<span class="hljs-symbol">  clientID:</span> cef6ec0ef4709xxxxxx<span class="hljs-symbol">  clientSecret:</span> c184430c4d516f1f71911b1ba06947815fxxxxxx</code></pre></div><p>既然评论列表是浏览器直接从 Github 请求得到的，这就会产生一个问题：Github 服务器在国外，国内的用户在查看评论列表时可能会加载较长的时间。</p><h2 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h2><h3 id="网页代码压缩"><a href="#网页代码压缩" class="headerlink" title="网页代码压缩"></a>网页代码压缩</h3><p>通过 gulp 来压缩 html、css、js 的代码，压缩完了之后的代码，在 chrome 的调试工具中，会变成特别长的一行~</p><h3 id="css-js内联"><a href="#css-js内联" class="headerlink" title="css/js内联"></a>css/js内联</h3><p>使用 <a href="https://github.com/JamesPan/hexo-filter-asset-inline" target="_blank" rel="noopener">hexo-filter-asset-inline</a>。</p><p>先 npm 下载这个库，然后在每个需要内联的 js、css 文件地址后面加上 <code>?__inline=true</code>。由于 hexo 没有一个统一的地方存放 css、js 的地址，而各个主题引用外部 css、js 的地方又各有不同，因此只能在编辑器里面搜索，然后一处处手动添加了。</p><p>全部地址修改完成后，打开网页应只需要加载 html 文件以及少数一个图片文件。</p><p><img src="https://oss.kherrisan.cn/20200410221659.png" srcset="/img/loading.gif" alt></p><h3 id="全站加速（氪金上云）"><a href="#全站加速（氪金上云）" class="headerlink" title="全站加速（氪金上云）"></a>全站加速（氪金上云）</h3><p>所有图片放到阿里云 OSS 上去，并且使用全站加速（实际上就是 CDN）来加速对 <a href="https://www.kherrisan.cn">https://www.kherrisan.cn</a> 这个域名下所有资源的访问。</p><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>我想实现的效果是，我在本地完成撰写后，只需要提交 source 代码，然后 Github 的 Action 会自动帮我完成压缩、编译、部署的工作。代码如下：</p><div class="hljs"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">CI</span><span class="hljs-attr">on:</span>  <span class="hljs-attr">push:</span>    <span class="hljs-attr">branches:</span> <span class="hljs-string">[</span> <span class="hljs-string">master</span> <span class="hljs-string">]</span>  <span class="hljs-attr">pull_request:</span>    <span class="hljs-attr">branches:</span> <span class="hljs-string">[</span> <span class="hljs-string">master</span> <span class="hljs-string">]</span><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">build:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">strategy:</span>      <span class="hljs-attr">matrix:</span>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">[12.x]</span>    <span class="hljs-attr">steps:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">webfactory/ssh-agent</span>      <span class="hljs-attr">uses:</span> <span class="hljs-string">webfactory/ssh-agent@v0.2.0</span>      <span class="hljs-attr">with:</span>        <span class="hljs-comment"># Private SSH key to register in the SSH agent</span>        <span class="hljs-attr">ssh-private-key:</span> <span class="hljs-string">${{</span> <span class="hljs-string">secrets.SSH_PRIVATE_KEY</span> <span class="hljs-string">}}</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">snickerbockers/submodules-init@v4</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">${{</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">}}</span>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span>      <span class="hljs-attr">with:</span>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">${{</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">}}</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">i</span> <span class="hljs-string">-g</span> <span class="hljs-string">hexo-cli</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">i</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span> <span class="hljs-string">&&</span> <span class="hljs-string">hexo</span> <span class="hljs-string">g</span> <span class="hljs-string">--debug</span> <span class="hljs-string">&&</span> <span class="hljs-string">gulp</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Commit</span> <span class="hljs-string">files</span>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>        <span class="hljs-string">git</span> <span class="hljs-string">add</span> <span class="hljs-string">.</span>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--local</span> <span class="hljs-string">user.email</span> <span class="hljs-string">"action@github.com"</span>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--local</span> <span class="hljs-string">user.name</span> <span class="hljs-string">"GitHub Action"</span>        <span class="hljs-string">git</span> <span class="hljs-string">commit</span> <span class="hljs-string">-m</span> <span class="hljs-string">"CI"</span> <span class="hljs-string">-a</span>        <span class="hljs-string">git</span> <span class="hljs-string">pull</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Push</span>      <span class="hljs-attr">uses:</span> <span class="hljs-string">ad-m/github-push-action@v0.5.0</span>      <span class="hljs-attr">with:</span>        <span class="hljs-comment"># Token for the repo. Can be passed in using $\{{ secrets.GITHUB_TOKEN }}</span>        <span class="hljs-attr">github_token:</span> <span class="hljs-string">${{</span> <span class="hljs-string">secrets.CI_TOKEN</span> <span class="hljs-string">}}</span></code></pre></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.nexmoe.com/hexo/#遇到问题怎么办？" target="_blank" rel="noopener">Nexmoe 文档</a><br><a href="https://nexmoe.com/661812793.html#资源合并" target="_blank" rel="noopener">博客，我优化了什么？</a><br><a href="https://todebug.com/use-gulp-with-hexo/" target="_blank" rel="noopener">hexo优化之——使用gulp压缩资源</a></p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/5ca0a75b/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019年7月6日周记</title>
      <link>http://www.kherrisan.cn/posts/a9b253d5/</link>
      <guid>http://www.kherrisan.cn/posts/a9b253d5/</guid>
      <pubDate>Sat, 06 Jul 2019 19:56:39 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;2019年6月31日-2019年7月6日&quot;&gt;&lt;a href=&quot;#2019年6月31日-2019年7月6日&quot; class=&quot;headerlink&quot; title=&quot;2019年6月31日-2019年7月6日&quot;&gt;&lt;/a&gt;2019年6月31日-2019年7月6日&lt;/h2&gt;&lt;p&gt;离校了，宿舍里的东西全都搬到了家里，也都收拾好了。6月26日开始的为期三天的招生工作也宣告结束，不知道未来还有没有机会和计软的招生老师们一起去一中玩（zhuang）耍（bi）。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="2019年6月31日-2019年7月6日"><a href="#2019年6月31日-2019年7月6日" class="headerlink" title="2019年6月31日-2019年7月6日"></a>2019年6月31日-2019年7月6日</h2><p>离校了，宿舍里的东西全都搬到了家里，也都收拾好了。6月26日开始的为期三天的招生工作也宣告结束，不知道未来还有没有机会和计软的招生老师们一起去一中玩（zhuang）耍（bi）。</p><a id="more"></a><p>本以为到家了之后能够很快进入复习状态的，却没有料到人的惰性比我想象中的更加难以克服。常常是早上睡到89点钟起床，吃完午饭一不小心就在床上躺一整个下午，为了凑个整把晚上的时间也浪费掉了。晚上睡觉也睡得很晚，基本上天天都要熬到后半夜。</p><p>我理想的复习状态类似于人们常说的“<strong>吃了枪药，打了鸡血</strong>”那样的精神状态，但现在的状态却可以称作为“<strong>吸了大麻</strong>”。究其原因，还是因为觉悟不够，没有认清情况。我认为我目前的复习进度不算快也不算慢，属于比较稳健但又不是很积极的那一类。目前还在全力复习数学，刚刚完成高数知识点和习题的第一轮复习，除了数学之外，每天背单词，每天练字。我打算在数学第一轮结束时开始其他科目的同步复习，我认为这样安排对于我而言应该是合适的。进度是自己的，没有必要和别人去比，现在的问题是调整心态，端正态度，多给自己打一点鸡血，同时主动尝试自我调节的方式。</p><p>此时窗外忽然风雨大作，似乎我网上买的50一双的鞋套明天终于能有<strong>用武之地</strong>了。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/a9b253d5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019年6月消费情况总结及7月预算</title>
      <link>http://www.kherrisan.cn/posts/fc2f84e6/</link>
      <guid>http://www.kherrisan.cn/posts/fc2f84e6/</guid>
      <pubDate>Mon, 01 Jul 2019 09:34:36 GMT</pubDate>
      <description>
      
        
        
          &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;6月消费总结&quot;&gt;&lt;a href=&quot;#6月消费总结&quot; class=&quot;headerlink&quot; title=&quot;6月消费总结&quot;&gt;&lt;/a&gt;6月消费总结&lt;/h2&gt;&lt;p&gt;6月是我呆在东大的最后一个月，在这一个月中，有正常的消费（饮食、起居），
        
      
      </description>
      
      
      <content:encoded><![CDATA[<a id="more"></a><h2 id="6月消费总结"><a href="#6月消费总结" class="headerlink" title="6月消费总结"></a>6月消费总结</h2><p>6月是我呆在东大的最后一个月，在这一个月中，有正常的消费（饮食、起居），也有满足特殊要求的（毕业相关事件）。</p><ol><li>餐饮占消费支出大头。</li><li>买了个键盘，花了不少钱。</li><li>其他方面的消费分布较为均匀。</li></ol><p>本来我以为消费支出还挺多的，实际上没有5月份多，各方面的支出水平都在预料的范围内。</p><h2 id="7月消费预算"><a href="#7月消费预算" class="headerlink" title="7月消费预算"></a>7月消费预算</h2><p>7月份在家，餐饮方面的支出可以在很大程度上缩减。另其他方面支出除周期性支出外都要缩减（专心复习）。</p><div class="table-container"><table><thead><tr><th>类别</th><th>预算</th><th></th></tr></thead><tbody><tr><td>饮食</td><td>4 x 50（零食）= 200</td><td></td></tr><tr><td>云服务</td><td>26</td><td></td></tr><tr><td>订阅</td><td>16（滴答清单）+ 10（icloud）+ 12（潮汐）+10（bear）=  48</td><td></td></tr><tr><td>总计</td><td>274</td></tr></tbody></table></div><p>这个月的消费完全可以通过转嫁到家人身上的方式来减少数额，虽然这样想好想不太好，但这里只从我自己的资产和消费角度考虑。通过他人代自己消费也应算作一种方式。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/fc2f84e6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019年5月消费情况总结及6月预算</title>
      <link>http://www.kherrisan.cn/posts/983ed1c1/</link>
      <guid>http://www.kherrisan.cn/posts/983ed1c1/</guid>
      <pubDate>Sun, 02 Jun 2019 18:03:51 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;5月消费总结&quot;&gt;&lt;a href=&quot;#5月消费总结&quot; class=&quot;headerlink&quot; title=&quot;5月消费总结&quot;&gt;&lt;/a&gt;5月消费总结&lt;/h2&gt;&lt;p&gt;我在五月的消费非常地不按照常理出牌，收入方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在KXD的四月的实习工资到账，900。&lt;/li&gt;
&lt;li&gt;毕业生退学费，1900.&lt;/li&gt;
&lt;li&gt;把iPad Pro 10.5在闲鱼上卖掉了，3000.&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="5月消费总结"><a href="#5月消费总结" class="headerlink" title="5月消费总结"></a>5月消费总结</h2><p>我在五月的消费非常地不按照常理出牌，收入方面：</p><ol><li>在KXD的四月的实习工资到账，900。</li><li>毕业生退学费，1900.</li><li>把iPad Pro 10.5在闲鱼上卖掉了，3000.</li></ol><a id="more"></a><p>乍一看感觉收入还挺多的，但收入多导致自己没有给自己的支持限制施加足够的压力和约束力，导致消费也不少。几个大头消费有：</p><ol><li>给MacBook Pro补了一个Apple Care Protection Plan，1800左右。这个消费如果分摊到未来两年的话还是很划算的，相当于给电脑买了一个保险。</li><li>入坑当红手游明日方舟，氪了不少钱，大概1200，这个氪钱就完全是“<strong>瞎花钱</strong>”了哈哈哈。</li></ol><p>五月消费数据如下图。</p><p><img src="http://ipic.dokyme.cn/260676f21af274d1f380452e2dfd5939.png" srcset="/img/loading.gif" alt="2019-06-02-18-16-55"></p><p>此外，我爸给我转了1000元委托我管理BTC交易，虽然名义上是他的钱，但我感觉他一时半会儿不会找我要回去（他要怎么开口？），想在5.14生日那天问我妈要两千结果没有开口。</p><h2 id="6月消费预算"><a href="#6月消费预算" class="headerlink" title="6月消费预算"></a>6月消费预算</h2><p>针对5月的几个消费大头，以及消费效率较低的类别，给出下一个月的预算如下：</p><div class="table-container"><table><thead><tr><th>类别</th><th>预算</th><th></th></tr></thead><tbody><tr><td>饮食</td><td>27 x 30（早中晚饭）+ 15 x 10（水果）+ 4 x 30（零食）= 1080</td><td></td></tr><tr><td>云服务</td><td>26 + 20 = 46</td><td></td></tr><tr><td>订阅</td><td>16（滴答清单）+ 10（icloud）+ 12（潮汐）=  32</td><td></td></tr><tr><td>总计</td><td>1148</td><td></td></tr></tbody></table></div>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/983ed1c1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019年4月消费情况总结及5月预算</title>
      <link>http://www.kherrisan.cn/posts/bc977d0a/</link>
      <guid>http://www.kherrisan.cn/posts/bc977d0a/</guid>
      <pubDate>Mon, 29 Apr 2019 20:01:13 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;为了能够及时对”不堪回首“的消费记录进行分析和总结，并对下一个月的消费做出有效可行的预算，在此为消费单独开辟一个栏目。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>为了能够及时对”不堪回首“的消费记录进行分析和总结，并对下一个月的消费做出有效可行的预算，在此为消费单独开辟一个栏目。</p><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>覆盖时间为当月1日到当月最后一日。</p><h2 id="4月消费总结"><a href="#4月消费总结" class="headerlink" title="4月消费总结"></a>4月消费总结</h2><p>4月是完整实习的最后一个月，也是拿完整工资的最后一个月，收入还比较充裕。</p><p><img src="http://ipic.dokyme.cn/ac904db0a96f4a44cbbda178d83749cb.png" srcset="/img/loading.gif" alt="2019-04-29-21-14-45"></p><p>本月支出1900，其中在餐饮上花费了接近1000，应该是<strong>外卖+水果</strong>消费了大部分额外的开支。假设每天花10元买水果，那么一个月就要多花近300元，这样虽然保证了充足的维生素摄入，但是还是有点吃不起的感觉。因为在宿舍带了好几天，那几天平均一天一顿外卖，因此在昂贵的外卖也拉高了原本在低水平食堂就能够满足的开销。</p><p>订阅（即购买App和App内会员）上所花的钱也过多，其中quizlet（一个被单词的App）买了却没有用。无效的订阅太多。</p><p>云服务的花费主体应该只有阿里云的ECS（HK），ECS的钱主要分为基础配置费和流量费。基础配置费26元（下一个月开始是13元，找到了拼车的小伙伴），流量费1元/G，下一个月应该将流量控制在20G以下。</p><h2 id="5月消费预算"><a href="#5月消费预算" class="headerlink" title="5月消费预算"></a>5月消费预算</h2><p>针对4月的几个消费大头，以及消费效率较低的类别，给出下一个月的预算如下：</p><div class="table-container"><table><thead><tr><th>类别</th><th>预算</th><th></th></tr></thead><tbody><tr><td>饮食</td><td>27 <em> 25（早中晚饭）+ 15 </em> 10（水果）+4 * 15（零食）= 885</td><td></td></tr><tr><td>云服务</td><td>13 + 20 = 33</td><td></td></tr><tr><td>订阅</td><td>16（滴答清单）+ 10（icloud）+ 12（潮汐）=  32</td><td></td></tr><tr><td>总计</td><td>950</td></tr></tbody></table></div><p>（我才发现有鱼记账没有预算的功能，这点没有moneywiz做得好）</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/bc977d0a/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019年4月29日周记</title>
      <link>http://www.kherrisan.cn/posts/8336f069/</link>
      <guid>http://www.kherrisan.cn/posts/8336f069/</guid>
      <pubDate>Mon, 29 Apr 2019 19:56:39 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;2019年4月22日-2019年4月28日&quot;&gt;&lt;a href=&quot;#2019年4月22日-2019年4月28日&quot; class=&quot;headerlink&quot; title=&quot;2019年4月22日-2019年4月28日&quot;&gt;&lt;/a&gt;2019年4月22日-2019年4月28日&lt;/h2&gt;&lt;p&gt;本周是开始考研复习的第三周，实际上只复习了一天。在周一经过小伙伴提醒五一之后要交论文初稿，因此周一之后的所有时间都用来写论文了。但是论文进度比想象的慢，写作效率不高，可以形容为”&lt;strong&gt;以写论文的名义划水&lt;/strong&gt;“。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="2019年4月22日-2019年4月28日"><a href="#2019年4月22日-2019年4月28日" class="headerlink" title="2019年4月22日-2019年4月28日"></a>2019年4月22日-2019年4月28日</h2><p>本周是开始考研复习的第三周，实际上只复习了一天。在周一经过小伙伴提醒五一之后要交论文初稿，因此周一之后的所有时间都用来写论文了。但是论文进度比想象的慢，写作效率不高，可以形容为”<strong>以写论文的名义划水</strong>“。</p><a id="more"></a><p>毕业论文中已经完成的部分质量尚可，但是进度缓慢，效率低下。本质的原因还是<strong>自制力差</strong>。</p><p>在B站上花的时间太多，主要观看的视频包括但不限于新番吐槽、星际2比赛，把b站动态当成朋友圈刷。自我感觉已经形成了<strong>Bilibili瘾</strong>。</p><p>实际上，如果能够把正事做完的话，是可以适当地在b站休闲一下的。但现实的情况是，因为在b站上”浪费时间“导致正事没有按计划完成。</p><p>马上五一假期要到了，预计4月30日完成论文初稿。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/8336f069/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019年4月19日周记</title>
      <link>http://www.kherrisan.cn/posts/1ad49668/</link>
      <guid>http://www.kherrisan.cn/posts/1ad49668/</guid>
      <pubDate>Fri, 19 Apr 2019 22:55:29 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;为了能够记录自己平时的学习和生活，并进行一些有益的反思，我开始尝试写周记，同时也真心希望自己能够坚持下去。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>为了能够记录自己平时的学习和生活，并进行一些有益的反思，我开始尝试写周记，同时也真心希望自己能够坚持下去。</p><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>周记正文内容所涵盖的开始时间为本周周一，结束时间为本周周日。</p><h2 id="2019年4月15日-2019年4月21日"><a href="#2019年4月15日-2019年4月21日" class="headerlink" title="2019年4月15日-2019年4月21日"></a>2019年4月15日-2019年4月21日</h2><p>本周是开始考研复习的第二周，总得来说，复习任务安排不够饱和，负载不够均衡，没有严格按照时间安排。经过反思之后发现有以下几个具体的问题：</p><ol><li><strong>没有正式地背单词。</strong> 仅仅使用扇贝单词app在空闲时间背单词。这里的空闲时间大部分都安排在图书馆和食堂之间的通勤过程中。虽然利用了这一块时间，但一边走路一边背单词的效率并不是很高。对单词的例句没有作适当的记忆。</li><li><strong>对高数的复习没有做到层次化、渐进式。</strong> 目前这一阶段的安排是先看汤家凤视频并做笔记，然后看李永乐全书上的内容并完成全书上的例题和习题。但实际操作中发现视频中的授课内容和全书中的内容的难度差异巨大，导致无法充分发挥全书上题目的练习作用。</li><li><strong>多次违反了时间安排。</strong> 没有严格按照时间安排进行学习。导致复习工作不够饱和，有些“三天打鱼两天晒网”的意思。睡觉不够早，起床也不够早。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/1ad49668/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Apple产品体验</title>
      <link>http://www.kherrisan.cn/posts/e19f7302/</link>
      <guid>http://www.kherrisan.cn/posts/e19f7302/</guid>
      <pubDate>Sat, 06 Apr 2019 15:58:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;（挖坑待填）&lt;/p&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>（挖坑待填）</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/e19f7302/#disqus_thread</comments>
    </item>
    
    <item>
      <title>休息一年，然后回来</title>
      <link>http://www.kherrisan.cn/posts/33352bc/</link>
      <guid>http://www.kherrisan.cn/posts/33352bc/</guid>
      <pubDate>Sat, 06 Apr 2019 14:32:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;本来在大三时打定主意，本科毕业了之后就直接参加工作，迅速进入资本积累的人生阶段。结果在大四秋招之后对职业生涯却产生了新的理解和认识。人生应该不至于此，我决定参加2019年考研。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>本来在大三时打定主意，本科毕业了之后就直接参加工作，迅速进入资本积累的人生阶段。结果在大四秋招之后对职业生涯却产生了新的理解和认识。人生应该不至于此，我决定参加2019年考研。</p><a id="more"></a><h1 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h1><p><img src="http://ipic.dokyme.cn/2019-04-09-134146.jpg" srcset="/img/loading.gif" alt></p><p>秋招本身的过程是十分坎坷的。我从九月初开始陆续投简历，参加笔试、面试。因为对自己专业水平的错误评估，以及自己有一定好高骛远、心高气傲的态度，没有”海投简历”，而只是把赌注下在了那些业内人耳熟能详的大厂上面。</p><p>结果自然是，<strong>缺乏面试经验，专业基础知识不够扎实，还对面试有天生抗性的我，被大厂拒了个遍。</strong> 自我认识出现了偏差，最后的责任自然只有我能够承担。</p><p>2018年10月找到工作之后，笔试面试的压力逐渐变小，再加上还要应对KXD的实习，我也开始松懈了下来。虽然offer不是来自什么大厂，但好歹也算是对应领域的头部公司，且公司主要围绕的两大核心——区块链技术和数字加密货币交易业务都非常地合我胃口，工资待遇不低，地处北京未来可期。面试时与面试官的亲切交谈也让我对这家公司产生了相当不错的初步感受。</p><p><img src="http://ipic.dokyme.cn/2019-04-09-134209.jpg" srcset="/img/loading.gif" alt></p><p>我有个亲戚在字节跳动工作，他在了解到了我的情况之后，给我的意见是“毕业之后的第一份工作一定要去大公司”。他从内部情况、职业发展的角度解释了“大公司”的好处。我当时觉得他的建议和理由有一定的道理，但也仅仅是有一定的道理。毕竟上升和成长主要还是靠自己的努力。我当时还没有其他的想法。</p><p><img src="http://ipic.dokyme.cn/2019-04-09-134303.jpg" srcset="/img/loading.gif" alt></p><p>（这里盗用一下富士康的图）</p><p>大概在十一月份的时候，我在b站上看到了一个视频。加拿大白嫖王Linus去参观一加手机的生产车间。一加手机的装配流程采用人工流水线的形式，每个工人从流水线中取下一部手机，安装上自己负责的组件，再将其放回流水线。工序被划分的很细，安装一个组件和整理该组件连接线都被分配给了两个人做。联系到软件开发行业的工作，又何尝不是这样的呢。</p><p>在一个稍显复杂的系统中，每一个研发工程师都只负责开发其中的一个模块，这个模块如一个螺丝一般细小，但又的确不可或缺。模块是不可或缺的，但人不是。高薪的互联网研发岗位吸引了大量的劳动力，供过于求，单位就只能提高招聘门槛来筛选人才。</p><p><img src="http://ipic.dokyme.cn/2019-04-09-092229.jpg" srcset="/img/loading.gif" alt></p><p><strong>“面试造火箭，工作拧螺丝”</strong>。说的就是这个意思。</p><p>拧螺丝不是什么可怕的事情，可怕是拧一辈子的螺丝而浑然不知，甚至是拧了几年的螺丝，忽然就失业了。试想那些流水线上的装配工人，有几个能在日复一日的手机装配工序中，总结出手机内部组件编排设计的规律或者原理，进而成为一个扫地僧式的人物？不可能的，因为核心技术不在这里，另外技术门槛也高。那换一个角度看，能否就沿着普通的管理人员的发展道路走呢？看似行的通，但实际上难度也不小，毕竟僧多粥少。</p><p>凭什么你能上别人不能上？对个人综合能力的评估是一件复杂的事情，虽说现在有科学客观的评估方法，但有时就是<strong>说不清道不明</strong>。不会有多少人能够搞清楚各个指标在各个方向上占多少权重，大多数人能做到的是尽可能地让每个指标都变得更漂亮一些。</p><p>学历就是一个非常重要的指标。有多重要呢？根据我个人的估计和在面“网易”时与面试官的交流，至少进入面试阶段与我“同台竞技”的同学中，<strong>十个有九个是研究生，剩下一个是本科生的我</strong>。</p><h1 id="社会关系"><a href="#社会关系" class="headerlink" title="社会关系"></a>社会关系</h1><blockquote><p>人的本质是一切社会关系的总和，不是鸽子，亦不是复读机。——马克思</p></blockquote><p><img src="http://ipic.dokyme.cn/2019-04-09-134339.jpg" srcset="/img/loading.gif" alt></p><p>我在大学本科四年中没有正确地处理好所有的社会关系，或者说没有有意培养处理各种关系的能力。<a href><strong>直到大四才意识到处理好关系的重要性</strong></a>。</p><p>当然，能力的培养可以在学校，也可以在社会，社会有社会的关系，最典型的如工作和生活之间的二元关系。学校里也有学校所特有的关系，社会环境和校园环境没有高低之分。我知道人总是要走进社会的，只是不读研究生的话，学校里的一些关系很有可能这辈子都接触不到了。</p><h1 id="取之其上"><a href="#取之其上" class="headerlink" title="取之其上"></a>取之其上</h1><blockquote><p>“取之其上，得之其中；取之其中，得之其下”。</p></blockquote><p><img src="http://ipic.dokyme.cn/2019-04-09-101310.jpg" srcset="/img/loading.gif" alt></p><p>在我爸那个年代，走出校园之后安安稳稳地在一个岗位上干一辈子是非常常见的。而在市场经济高度发达的今天，这样的人几乎只存在于文学作品以及宣传劳模的媒体报道中，不想着职业的成长和发展，不想“往上升”，就会“被别人踩在脚下”。</p><p>若是只想着在一个岗位上安安稳稳地干下去，那么按照取其上得其中的规律，结合如今的社会生活实践，很有可能做不到“安稳”。</p><p>有个高速公路收费站要取消了，需要安排那里的工作人员再就业，“我在收费站工作了二十年，现在你说取消就取消了？我今年40了，你说还有哪个单位要我这么大的人？我这二十年只会收费，你说这个职业技能哪个单位要？”。</p><p><strong>所以说，人还是要有远大的理想，不仅仅是为了实现人生价值，更是让自己的努力和奋斗所带来的“成果支票”能够有一定的冗余和保障。</strong></p><p>我在高中之前的理想都是瞎想，高中时期只想着考上一个好大学，从未思考过职业规划。大学时我对自己的职业规划就是简单的 <strong>“进入BAT，升职加薪，迎娶白富美，走上人生巅峰”</strong>。产生这个想法的原因有以下几点：</p><ol><li>程序员工资水平很高，自给自足不愁。</li><li>软件和互联网在当前还是代表着最为先进的生产力水平，短时间不会被淘汰。</li><li>我是软件工程专业的，有能力写好代码，干好活儿。</li></ol><p>这三点认识本身没有什么大问题，问题在于仅带着这三点认识就匆忙进入职场，可能会使视野受到局限。</p><p>我出生在一个传统家庭，因为和爷爷奶奶生活在一起，因此很多生活习惯和思想观念都比较接近老一代。老一代的职业观念就是找一个稳当的工作，定定心心地赚钱，买车买房结婚生子，安安稳稳过日子。在和亲戚朋友的交谈中感受到了 <strong>“钱”和地位</strong> 的重要性。房子大，存款多，开公司当老板，人脉广有抓手，自然就有话语权。这也使得作为普通工薪阶层的我的父母常常是饭桌上默默无闻的那几个人。</p><p>家长所处社会地位的制约导致我在进入了大学之后很难从他们那里得到足够的指导，同时我的自身的思想也还是深深地受传统观念影响。再加上我天生内向，在学校也很少与学长和老师做深入交流，只凭知乎等网络信息渠道获得的信息还不足以驱动我去做出改变。</p><p><strong>宽阔的视野是树人、成材之路上的必要因素</strong>，甚至比挣钱的能力更重要。程序员因为与网络较为接近，接触信息的渠道比其他行业的人更加丰富多样，但我认为仅仅这样还不够。拓宽视野的重要步骤是实践，而<strong>以996闻名的程序员是否具有实践的时间和精力，这点是值得怀疑的</strong>。由于我目前较为薄弱的处理工作和生活这二者之间关系的能力，在参加工作之后很有可能导致二者失衡。</p><p>是的，我还需要锻炼，还需要成长，但我怕在有的地方一忙起来就得不到成长。</p><h1 id="野心膨胀"><a href="#野心膨胀" class="headerlink" title="野心膨胀"></a>野心膨胀</h1><p>说着说着，我对权利和财富的欲望就开始膨胀起来了。其实我觉得欲望的膨胀不是坏事，取之有道即可。人这一生只有一次，不抓紧机会走上人生巅峰，可没有第二次膨胀的机会。</p><h1 id="路在何方"><a href="#路在何方" class="headerlink" title="路在何方"></a>路在何方</h1><p>当然，大四没有保研，结果现在选择了毕业之后考研的道路，<strong>说到底就是走了弯路</strong>。给这个东西定性的话应该说：因为自己对自我水平和社会环境的认知出现了偏差，导致做出了错误的选择，不过人的认识本身就是随着社会大环境和个人小情况的发展而不断变化的，现在认识到了这些，也不算晚。<strong>眼前有路，就上</strong>。</p><p><strong>但我认为过程也是很重要的，四年课不是白上的，五万行代码也不是白写的。</strong></p><p>如果我考上了研究生的话，我认为还是存在两种可能性。</p><ol><li>研究生毕业，仍然去互联网公司做研发岗。目前我不是很希望自己走到这条路上，我一直想 <strong>“站着把钱挣了”</strong>。</li><li>若是家里条件允许，并且自身条件合适，则继续深造。</li></ol><p>但无论走哪一条路，我都希望我能够以一个不同于现在的面貌去应对。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/33352bc/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何看待江苏要南京提高首位度？</title>
      <link>http://www.kherrisan.cn/posts/a8d5d9dc/</link>
      <guid>http://www.kherrisan.cn/posts/a8d5d9dc/</guid>
      <pubDate>Sun, 27 Jan 2019 20:31:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;这个主题来自&lt;a href=&quot;https://www.zhihu.com/question/266051194&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎&lt;/a&gt;，今天在回家的高铁上偶然刷到。作为一个在南京生活了3年半的土生土长的常州人，我想围绕这个主体就知乎上的一些回答给出我自己的些许看法。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>这个主题来自<a href="https://www.zhihu.com/question/266051194" target="_blank" rel="noopener">知乎</a>，今天在回家的高铁上偶然刷到。作为一个在南京生活了3年半的土生土长的常州人，我想围绕这个主体就知乎上的一些回答给出我自己的些许看法。</p><a id="more"></a><h2 id="关于首位度（Primary-Ratio）"><a href="#关于首位度（Primary-Ratio）" class="headerlink" title="关于首位度（Primary Ratio）"></a>关于首位度（Primary Ratio）</h2><blockquote><p>首位度在一定程度上代表了城镇体系中的城市发展要素在最大城市的集中程度。——百度百科</p></blockquote><p>早在1939年，马克·杰斐逊（M.Jefferson）就在<a href="https://www.mendeley.com/catalogue/geography-law-primate-city/" target="_blank" rel="noopener">《Why Geography? The Law of the Primate City》</a>一文中提出了<strong>城市首位律（Law of the Primate City）</strong>的概念。他发现，一个国家的“首位城市”往往会比第二位以及排位更靠后的城市大很多，会拉开一段差距。为了衡量发展要素在最大城市的集中程度，他定义了“两城市指数”：首位城市和第二位城市的人口规模之比。很显然，两城市指数越大，说明首位城市和其他城市的差距越大，资源越集中，首位度越强。</p><p>城市首位律更多的只是提出了首位度这个概念，至于这个度应该在怎样的水平最为合适，学术界一直存在争论。大致的分析角度有：规模经济与聚集经济、城市位序规模分布。</p><h2 id="南京首位度"><a href="#南京首位度" class="headerlink" title="南京首位度"></a>南京首位度</h2><p>江苏是一个GDP大省，从省总量上看，常年居全国第二，仅次于广东省。从省内来看，南京作为省会在科教文卫上处于省内的领先地位，其中教育更是能够排到全国TOP3。与高度发达城市功能相对应的，南京的GDP却多年不及苏州，且与后继城市如无锡、南通、常州之间的差距不是特别大。</p><p><img src="http://ipic.dokyme.cn/2019-01-27-134336.jpg" srcset="/img/loading.gif" alt></p><p>最近几年<strong>南京的首位度</strong>的相关问题也正在被有关领导重视起来。</p><p><a href="https://v.youku.com/v_show/id_XMzg4OTg2ODc4NA==.html" target="_blank" rel="noopener">十九届中央第一轮巡视整改 江苏：整改省会城市功能发挥不够 20181027</a></p><p>巡视组提出的要求是要推动南京交通建设，支持创新发展，加快产业升级，结合GDP不及苏州这一现象来看，南京的短板应该是在产业结构上。</p><h2 id="南京产业结构"><a href="#南京产业结构" class="headerlink" title="南京产业结构"></a>南京产业结构</h2><p>南京本身是一个制造业相对发达的城市，重工业、化工业占较大比重，自然资源比较匮乏。改革开发以来，南京的经济也随着市场发展逐步向<strong>集约型</strong>（提高生产要素质量和生产效率，而不是扩大生产要素规模）转变。</p><h4 id="优化产业结构"><a href="#优化产业结构" class="headerlink" title="优化产业结构"></a>优化产业结构</h4><p>2008年南京的一二三产业GDP比重为2.5：47.5：50，呈现“三二一“的结构形态。其中<strong>行业增加值占第三产业比重最大的五个行业为：批发零售、金融、交通仓储邮政、房地产、教育</strong>。</p><p>“十二五”以来，南京新兴产业发展迅猛，以<strong>信息技术</strong>为代表的七大类战略性新兴产业占比首次超过石化、钢铁、建材等传统制造业，2016年占比达到40%左右。</p><p>2017年南京服务业增长10.3%，比第二产业高出5.2个点，占GDP比重达到59.7%。传统服务业如贸易、交通、房地产、教育等稳定增长，对总体经济运行起到稳定作用。同时现代服务业如信息、商务、金融等对增长贡献较大。当年一二三产业占GDP比重为2.3：38.0：59.7。</p><h4 id="扩大有效需求"><a href="#扩大有效需求" class="headerlink" title="扩大有效需求"></a>扩大有效需求</h4><p>近年来，南京的旅游消费不断升温，传统的有名的旅游项目（如夫子庙、中山陵、总统府）继续保持热度，每年吸引大批游客。新增的项目如牛首山、大报恩寺等则进一步增强了南京的旅游吸引力。每年的元宵节夫子庙都会有灯会，华丽的灯光下游人如织，场面堪比上海世博会，这也从侧面说明只要继续挖掘潜力，积极探索现有条件下新形式的旅游项目，南京的旅游市场还能够得到巨大的提升。在旅游项目中，培育服务消费、信息消费、绿色消费，推动消费升级。</p><h4 id="激励创新驱动"><a href="#激励创新驱动" class="headerlink" title="激励创新驱动"></a>激励创新驱动</h4><p>南京拥有位于全国第一梯队的科教力量，且在很长一段时间内其地位不会产生太大变化。如果能够将人才“留住”，同时吸引海内外优秀人才，那必然能够为长期稳定高质量的经济发展提供可靠保障。在雨花台区软件大道两侧，有华为南研所、中兴云计算中心；在河西有小米、阿里巴巴江苏总部（在建）；在江宁，有无线谷（我东南边）。越来越多的公司开始重视在南京的投入，“近水楼台先得月”，这也为每年南京的高校毕业生提供了丰富的择业选择。</p><p>推动创新创业靠人才，激励创新创业靠政策。近年来多个创新创业园区在南京成立，配合优惠政策，能够集中资源，吸引高潜力创新企业。优质人才和企业的流向，就是未来的流向。</p><h2 id="如何看待"><a href="#如何看待" class="headerlink" title="如何看待"></a>如何看待</h2><p>江苏要求南京提高首位度的这个意见，的确会对南京的方方面面产生影响。“揣摩上意“的话：在江苏省这样一个沿海大省，需要一个像样的带头城市，<strong>使其在充分发挥自身区位优势的同时，带动周边地区的发展</strong>，诸如苏北的几个城市以及与安徽省邻接的马鞍山、芜湖、宣城等。南通近几年经济的迅猛发展，我认为很大程度上就是得益于上海的辐射效应，不过南通的产业结构与南京存在差距（南通六大产业：船舶海工、高端纺织、电子信息、智能装备、新材料），政治经济条件上差距也较大。</p><p>从地图上看，苏锡常与上海较为接近，因此很自然地与上海结成“环沪都市圈”，南京若是想要提高首位度，必然需要与周边城市展开合作，扩大自身影响力的同时在一定程度上吸收优势条件。即知乎上所说的“吸血”。事实上，<strong>南京凭借目前的水平，已经有足够的吸引力，能够在现有的形式下保持对资源的强大竞争力。因此人才和资本的富集是在所难免的。</strong></p><p>富集是在所难免的，北上广深作为排头兵，一直有源源不断的人才和资本涌入，除非政策调控，否则会一直保持这样的趋势。自上海发达以来，昆山、苏州近水楼台，发展速度相对较快。如果南京也能够立足苏中，成为地区心脏，那对于江苏的发展来说是大有裨益的。南京应该成为一个国家层面的城市，增强话语权，成为苏皖交接的一颗明珠。城市发达了，话语权响亮了，地位上升了，才不会错过历史发展的机遇。</p><p>至于说什么和上海展开竞争，我觉得还是团结一些比较好。</p><hr><p>随意想想，现在阻挡我入户上海的唯一客观因素就是房价，可能这也是绝大多数人望而却步的原因。南京房价相比于上海“天价”还是有些遥远，但也已经进入跑道，准备起飞了。当然房价受大环境和政策影响较大，但也会在很大程度上受城市综合水平影响。如果让我选择未来定居的地方，南京是我第一选择，常州第二。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/a8d5d9dc/#disqus_thread</comments>
    </item>
    
    <item>
      <title>这是一个测试页</title>
      <link>http://www.kherrisan.cn/posts/1e12b02a/</link>
      <guid>http://www.kherrisan.cn/posts/1e12b02a/</guid>
      <pubDate>Thu, 24 Jan 2019 13:46:26 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Markdown语法渲染&quot;&gt;&lt;a href=&quot;#Markdown语法渲染&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法渲染&quot;&gt;&lt;/a&gt;Markdown语法渲染&lt;/h2&gt;&lt;p&gt;这部分主要是为了测试Hexo渲染Markdown的编译器对常用记号的支持程度。&lt;/p&gt;
&lt;p&gt;各级标题&lt;/p&gt;
&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;h3 id=&quot;三级标题&quot;&gt;&lt;a href=&quot;#三级标题&quot; class=&quot;headerlink&quot; title=&quot;三级标题&quot;&gt;&lt;/a&gt;三级标题&lt;/h3&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Markdown语法渲染"><a href="#Markdown语法渲染" class="headerlink" title="Markdown语法渲染"></a>Markdown语法渲染</h2><p>这部分主要是为了测试Hexo渲染Markdown的编译器对常用记号的支持程度。</p><p>各级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><a id="more"></a><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>引用</p><blockquote><p>白求恩同志是加拿大共产党员，五十多岁了，为了帮助中国的抗日战争，受加拿大共产党和美国共产党的派遣，不远万里，来到中国。去年春上到延安，后来到五台山工作，不幸以身殉职。一个外国人，毫无利己的动机，把中国人民的解放事业当做他自己的事业，这是什么精神？这是国际主义的精神，这是共产主义的精神，每一个中国共产党员都要学习这种精神。列宁主义认为：资本主义国家的无产阶级要拥护殖民地人民的解放斗争，殖民地半殖民地的无产阶级要拥护资本主义国家的无产阶级的解放斗争，世界革命才能胜利。白求恩同志是实践了这一条列宁主义路线的。我们中国共产党员也要实践这一条路线。我们要和一切资本主义国家的无产阶级联合起来，要和日本的、英国的、美国的、德国的、意大利的以及一切资本主义国家的无产阶级联合起来，才能打倒帝国主义，解放我们的民族和人民，解放世界的民族和人民。这就是我们的国际主义，这就是我们用以反对狭隘民族主义和狭隘爱国主义的国际主义。</p></blockquote><p>列表</p><ul><li>jekyll</li><li>hexo</li><li>hugo</li><li>wordpress</li></ul><ol><li>c++<br>1.1. VisualStudio</li><li>Java<br>2.1. IDEA</li><li><p>Python<br>3.1.    Pycharm</p><p> Pycharm的第二段落</p><blockquote><p>Pycharm的第三段落</p></blockquote></li><li><p>PHP</p></li></ol><p>代码区块（缩进）</p><div class="hljs"><pre><code>public class Server{    public static void main(String[] args){        System.out.println("Hello World");    }}</code></pre></div><p>代码区块（`)</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Server</span></span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>{        System.out.println(<span class="hljs-string">"Hello World"</span>);    }}</code></pre></div><p>分割线</p><hr><p>链接</p><p>This is <a href="http://example.com/" target="_blank" rel="noopener" title="Title">an example</a> inline link.</p><p>This is <a href="http://example.com/" target="_blank" rel="noopener" title="Optional Title Here">an example</a> reference-style link.</p><p>强调</p><p>宫中府中，俱为一体，陟罚臧否，不宜异同。<strong>若有作奸犯科及为忠善者</strong>，宜付有司论其刑赏，以昭陛下平明之理，<em>不宜偏私，使内外异法也</em>。</p><h2 id="前端加载"><a href="#前端加载" class="headerlink" title="前端加载"></a>前端加载</h2><p><img src="https://oss.kherrisan.cn/2019-01-23-121710.jpg" srcset="/img/loading.gif" alt="中等图片"></p><p><img src="https://oss.kherrisan.cn/2019-01-23-123408.jpg" srcset="/img/loading.gif" alt="大型图片"></p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>测试一下持续集成。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/1e12b02a/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Netty——Pipeline(1)</title>
      <link>http://www.kherrisan.cn/posts/403de3e7/</link>
      <guid>http://www.kherrisan.cn/posts/403de3e7/</guid>
      <pubDate>Tue, 08 Jan 2019 22:25:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;)Netty中使用Handler对数据包进行处理，每个Handler成为整个处理过程的一个阶段，几个Handler前后相连构成了一个处理数据包的流水线（Pipeline）。同一个Handler实现可以在多种不同的处理流程中发挥自身的局部作用，可复用。 &lt;code&gt;Pipeline&lt;/code&gt;的继承结构： &lt;img src=&quot;https://oss.kherrisan.cn/e1fb7cb818b3cd0d10e25e3905f0efcb.png&quot; srcset=&quot;/img/loading.gif&quot; alt&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>)Netty中使用Handler对数据包进行处理，每个Handler成为整个处理过程的一个阶段，几个Handler前后相连构成了一个处理数据包的流水线（Pipeline）。同一个Handler实现可以在多种不同的处理流程中发挥自身的局部作用，可复用。 <code>Pipeline</code>的继承结构： <img src="https://oss.kherrisan.cn/e1fb7cb818b3cd0d10e25e3905f0efcb.png" srcset="/img/loading.gif" alt></p><a id="more"></a><h1 id="第一个Pipeline"><a href="#第一个Pipeline" class="headerlink" title="第一个Pipeline"></a>第一个Pipeline</h1><p>同样的，还是先寻找第一个<code>Pipeline</code>是在什么地方创建并初始化的。从我对Netty的了解来看，应该是<code>Channel</code>和<code>Pipline</code>之间关联较大，可能会具有一对一的关系。要么是<code>NioServerSocketChannel</code>，要么是它的某个父类。最终在<code>AbstractChannel</code>中找到了它：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DefaultChannelPipeline pipeline;</code></pre></div><p>倒也是直接，声明类型就是<code>DefaultChannelPipeline</code>，没有声明为其父类，说明<code>Pipeline</code>可能没有较多的多态特性需要表现出来。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">AbstractChannel</span><span class="hljs-params">(Channel parent)</span> </span>{    <span class="hljs-keyword">this</span>.parent = parent;    id = newId();    unsafe = newUnsafe();    pipeline = newChannelPipeline();}</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> DefaultChannelPipeline <span class="hljs-title">newChannelPipeline</span><span class="hljs-params">()</span> </span>{    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultChannelPipeline(<span class="hljs-keyword">this</span>);}</code></pre></div><p>每个<code>AbstractChannel</code>对象都有一个属于自己的<code>Pipeline</code>，并且在它的构造函数中实例化pipeline对象。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">DefaultChannelPipeline</span><span class="hljs-params">(Channel channel)</span> </span>{    <span class="hljs-keyword">this</span>.channel = channel;    ......    tail = <span class="hljs-keyword">new</span> TailContext(<span class="hljs-keyword">this</span>);    head = <span class="hljs-keyword">new</span> HeadContext(<span class="hljs-keyword">this</span>);    head.next = tail;    tail.prev = head;}</code></pre></div><p>至此第一个<code>Pipeline</code>诞生，这个<code>Pipeline</code>中只有两个节点：head和tail。<code>Pipeline</code>中的节点以双向链表的形式相连。</p><h1 id="第一次插入节点"><a href="#第一次插入节点" class="headerlink" title="第一次插入节点"></a>第一次插入节点</h1><p>下面来探索第一次向该<code>Pipeline</code>中插入节点的场景。在netty启动的过程中，<code>AbstractBootstrap</code>的<code>initAndRegister</code>方法会调用<code>ServerBootstrap</code>中的<code>init</code>方法，该方法第一次向<code>Pipeline</code>中插入元素。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Channel channel)</span> <span class="hljs-keyword">throws</span> Exception </span>{        ......        p.addLast(<span class="hljs-keyword">new</span> ChannelInitializer<Channel>() {        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Channel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>{            <span class="hljs-keyword">final</span> ChannelPipeline pipeline = ch.pipeline();            ChannelHandler handler = config.handler();            <span class="hljs-keyword">if</span> (handler != <span class="hljs-keyword">null</span>) {                pipeline.addLast(handler);            }            ch.eventLoop().execute(<span class="hljs-keyword">new</span> Runnable() {                <span class="hljs-meta">@Override</span>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{                    pipeline.addLast(<span class="hljs-keyword">new</span> ServerBootstrapAcceptor(                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));                }            });        }    });}</code></pre></div><p><code>init</code>方法的参数<code>channel</code>是刚刚通过反射创建出来的<code>NioServerSocketChannel</code>对象，该对象具有一个<code>Pipeline</code>对象，现在在这个pipeline的尾部插入一个<code>ChannelInitializer</code>，并且在将来的某个时候，会调用这个initializer的<code>initChannel</code>方法，执行重写的代码。 暂时不去理会重写的代码什么时候执行，先搞清楚<code>addLast</code>方法做了什么事情。在深入了几个重载函数之后，看到了<code>addLast</code>的真身：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ChannelPipeline <span class="hljs-title">addLast</span><span class="hljs-params">(EventExecutorGroup group, String name, ChannelHandler handler)</span> </span>{    <span class="hljs-keyword">final</span> AbstractChannelHandlerContext newCtx;    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) {        checkMultiplicity(handler);        newCtx = newContext(group, filterName(name, handler), handler);        addLast0(newCtx);        <span class="hljs-comment">// If the registered is false it means that the channel was not registered on an eventloop yet.</span>        <span class="hljs-comment">// In this case we add the context to the pipeline and add a task that will call</span>        <span class="hljs-comment">// ChannelHandler.handlerAdded(...) once the channel is registered.</span>        <span class="hljs-keyword">if</span> (!registered) {            newCtx.setAddPending();            callHandlerCallbackLater(newCtx, <span class="hljs-keyword">true</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;        }        EventExecutor executor = newCtx.executor();        <span class="hljs-keyword">if</span> (!executor.inEventLoop()) {            newCtx.setAddPending();            executor.execute(<span class="hljs-keyword">new</span> Runnable() {                <span class="hljs-meta">@Override</span>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{                    callHandlerAdded0(newCtx);                }            });            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;        }    }    callHandlerAdded0(newCtx);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;}</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkMultiplicity</span><span class="hljs-params">(ChannelHandler handler)</span> </span>{        ChannelHandlerAdapter h = (ChannelHandlerAdapter) handler;        <span class="hljs-keyword">if</span> (!h.isSharable() && h.added) {            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ChannelPipelineException();        }        h.added = <span class="hljs-keyword">true</span>;}</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> AbstractChannelHandlerContext <span class="hljs-title">newContext</span><span class="hljs-params">(EventExecutorGroup group, String name, ChannelHandler handler)</span> </span>{    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultChannelHandlerContext(<span class="hljs-keyword">this</span>, childExecutor(group), name, handler);}</code></pre></div><p><code>addLast</code>并不仅仅是将新的handler插入到链表中，还做了一些其他的事情：</p><ol><li><code>checkMultiplicity</code>，检查该handler对象有没有被插入过，不管是该pipeline还是其他的pipeline。在netty中，只有被<code>@Sharable</code>注解的handler才可以被复用到pipeline中，否则一个handler对象只能出现在一处。这么做是为了保证状态变量的线程安全。</li><li><code>newContext</code>，用一个<code>ChannelHandlerContext</code>对象来包裹这个handler。</li><li><code>addLast0</code>，在链表中插入这个<code>ChannelHandlerContext</code>。</li><li>检查pipeline有没有完成到某个<code>NioEventloop</code>的注册，即channel有没有注册到<code>NioEventloop</code>。 3.1. 如果没有注册，那么<code>handlerAdded</code>的回调函数是不能立刻调用的，因为还没有eventloop线程实体与之绑定——在netty中各种事件的回调函数都是在<code>NioEventloop</code>中调用的，在以后还会遇到很多体现这个特征的场景。 3.2. 如果已经注册过了，在eventloop中调用<code>callHandlerAdded0</code>。</li></ol><p>这里遇到了一个类<code>DefaultChannelHandlerContext</code>，这个类的地位十分重要，承担了维系pipeline和handler的工作。</p><div class="hljs"><pre><code class="hljs java">DefaultChannelHandlerContext(        DefaultChannelPipeline pipeline, EventExecutor executor, String name, ChannelHandler handler) {    <span class="hljs-keyword">super</span>(pipeline, executor, name, isInbound(handler), isOutbound(handler));    <span class="hljs-keyword">if</span> (handler == <span class="hljs-keyword">null</span>) {        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">"handler"</span>);    }    <span class="hljs-keyword">this</span>.handler = handler;}</code></pre></div><div class="hljs"><pre><code class="hljs java">AbstractChannelHandlerContext(DefaultChannelPipeline pipeline, EventExecutor executor, String name,                              <span class="hljs-keyword">boolean</span> inbound, <span class="hljs-keyword">boolean</span> outbound) {    <span class="hljs-keyword">this</span>.name = ObjectUtil.checkNotNull(name, <span class="hljs-string">"name"</span>);    <span class="hljs-keyword">this</span>.pipeline = pipeline;    <span class="hljs-keyword">this</span>.executor = executor;    <span class="hljs-keyword">this</span>.inbound = inbound;    <span class="hljs-keyword">this</span>.outbound = outbound;    <span class="hljs-comment">// Its ordered if its driven by the EventLoop or the given Executor is an instanceof OrderedEventExecutor.</span>    ordered = executor == <span class="hljs-keyword">null</span> || executor <span class="hljs-keyword">instanceof</span> OrderedEventExecutor;}</code></pre></div><p><code>AbstractChannelHandlerContext</code>维护了pipeline对象，表明他是属于这个pipeline的一个节点，以后若是有需要可以直接通过这个pipeline成员调用其方法。netty中的handler可以分为两类：<code>inbound</code>和<code>outbound</code>（当然有的handler可以同时具有这两种特性），为了区分包含的handler的方向，<code>AbstractChannelHandlerContext</code>使用了两个boolean，由于之前括号里的情况存在，显然一个boolean是不够的。此外，<code>AbstractChannelHandlerContext</code>还有一个executor，这个executor是pipeline通过<code>childExecutor</code>方法分配给他的，这里先不谈分配方式。 再来看<code>addLast0</code>:</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addLast0</span><span class="hljs-params">(AbstractChannelHandlerContext newCtx)</span> </span>{    AbstractChannelHandlerContext prev = tail.prev;    newCtx.prev = prev;    newCtx.next = tail;    prev.next = newCtx;    tail.prev = newCtx;}</code></pre></div><p>有数据结构基础的人都能够很快理解这段代码，对于没有学过数据结构的人来说双向链表的插入操作也不是很难。 停！现在来给pipeline拍一张快照： <img src="https://oss.kherrisan.cn/44464b519546afc2bfeed5d917c1cd5f.png" srcset="/img/loading.gif" alt> 现在pipeline中有三个节点，其中<code>HeadContext</code>和<code>TailContext</code>都是没有handler的，中间的<code>HandlerContext</code>包含一个<code>ChannelInitializer</code>。 在链表中插入了新的handlerContext之后，需要决定是否需要调用它的<code>handlerAdded</code>方法。如果暂时不调用回调方法的话：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">callHandlerCallbackLater</span><span class="hljs-params">(AbstractChannelHandlerContext ctx, <span class="hljs-keyword">boolean</span> added)</span> </span>{    PendingHandlerCallback task = added ? <span class="hljs-keyword">new</span> PendingHandlerAddedTask(ctx) : <span class="hljs-keyword">new</span> PendingHandlerRemovedTask(ctx);    PendingHandlerCallback pending = pendingHandlerCallbackHead;    <span class="hljs-keyword">if</span> (pending == <span class="hljs-keyword">null</span>) {        pendingHandlerCallbackHead = task;    } <span class="hljs-keyword">else</span> {        <span class="hljs-keyword">while</span> (pending.next != <span class="hljs-keyword">null</span>) {            pending = pending.next;        }        pending.next = task;    }}</code></pre></div><p>handlerContext会被包装成一个<code>PendingHandlerCallback</code>，插入到由pipeline维护的<code>PendingHandlerCallback</code>的链表的末尾。 如果我们在pipeline注册到eventloop之前，在pipeline中插入多个handler，那么这些handler的<code>handlerAdded</code>方法都会被包装成pendingTask，接续到链表后。同样的，如果是在注册之前删除某个handler，它的<code>handlerRemoved</code>也会被包装，并插入链表。 <strong>我认为这么做的目的是保证在注册前发生的add和remove操作都会导致其对应事件的回调函数能够被正确的调用，这里的正确指的是按照正确的顺序在eventloop中调用。不能因为某个handler先被add然后被remove就认为它从没有出现过。</strong> 当然了，也有可能注册得比较早，那么<code>handlerAdded</code>方法可以立刻执行，没有必要等什么。</p><div class="hljs"><pre><code class="hljs java">EventExecutor executor = newCtx.executor();<span class="hljs-keyword">if</span> (!executor.inEventLoop()) {    newCtx.setAddPending();    executor.execute(<span class="hljs-keyword">new</span> Runnable() {        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{            callHandlerAdded0(newCtx);        }    });    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;}callHandlerAdded0(newCtx);</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">callHandlerAdded0</span><span class="hljs-params">(<span class="hljs-keyword">final</span> AbstractChannelHandlerContext ctx)</span> </span>{        ......        ctx.handler().handlerAdded(ctx);        ......}</code></pre></div><p>现在，把时间轴向前推进，直接走到<code>initChannel</code>调用之前：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register0</span><span class="hljs-params">(ChannelPromise promise)</span> </span>{    <span class="hljs-keyword">try</span> {        doRegister();        pipeline.invokeHandlerAddedIfNeeded();        safeSetSuccess(promise);        ......    } <span class="hljs-keyword">catch</span> (Throwable t) {        ......    }}</code></pre></div><p><code>invokeHandlerAddedIfNeeded</code>就是专门用来触发之前pending的<code>handlerAdded</code>事件的。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeHandlerAddedIfNeeded</span><span class="hljs-params">()</span> </span>{    <span class="hljs-keyword">assert</span> channel.eventLoop().inEventLoop();    <span class="hljs-keyword">if</span> (firstRegistration) {        firstRegistration = <span class="hljs-keyword">false</span>;        callHandlerAddedForAllHandlers();    }}</code></pre></div><p><code>callHandlerAddedForAllHandlers</code>也的确只会被调用一次，就是在这里。在其他地方，handler的added事件不会延迟执行，是即时的。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">callHandlerAddedForAllHandlers</span><span class="hljs-params">()</span> </span>{    ......    PendingHandlerCallback task = pendingHandlerCallbackHead;    <span class="hljs-keyword">while</span> (task != <span class="hljs-keyword">null</span>) {        task.execute();        task = task.next;    }}</code></pre></div><p>沿着pendingTask的链表，逐个执行<code>handlerAdded</code>和<code>handlerRemoved</code>回调事件。当然这里的<code>execute</code>方法会保证在当前的eventloop中执行<code>handlerAdded</code>或<code>handlerRemoved</code>回调函数的代码。 <strong>也就是说，为了让handler的added和removed事件不遗漏、不乱序、串行地得到执行，netty采用将added和removed事件包装成pendingTask的方式，在pipeline注册到某个eventloop后，再在一个方法中去逐个回调pendingTask。</strong> 回到<code>ChannelInitializer</code>中，它的<code>handlerAdded</code>实现如下：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handlerAdded</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>{    <span class="hljs-keyword">if</span> (ctx.channel().isRegistered()) {        initChannel(ctx);    }}</code></pre></div><p><code>ChannelInitializer</code>作为一种特殊的handler，主要用于在channel启动时做一些初始化工作，为了达成这样的效果，它的做法是在它自身被插入到pipeline之后立即做<code>initChannel</code>操作。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-keyword">try</span> {            initChannel((C) ctx.channel()); <span class="hljs-comment">// 调用重写的initChannel方法</span>        } <span class="hljs-keyword">catch</span> (Throwable cause) {            ......        } <span class="hljs-keyword">finally</span> {            remove(ctx); <span class="hljs-comment">// 把自己从pipeline中删掉</span>        }    }}</code></pre></div><p>在<code>ServerBootstrap</code>中见到的<code>ChannelInitializer</code>匿名内部类的<code>initChannel</code>做了这些事情：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">final</span> ChannelPipeline pipeline = ch.pipeline();ChannelHandler handler = config.handler();<span class="hljs-keyword">if</span> (handler != <span class="hljs-keyword">null</span>) {    pipeline.addLast(handler);}ch.eventLoop().execute(<span class="hljs-keyword">new</span> Runnable() {    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{        pipeline.addLast(<span class="hljs-keyword">new</span> ServerBootstrapAcceptor(                ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));    }});</code></pre></div><ol><li>从<code>config()</code>中取出一个handler，添加到pipeline的末尾。从调试时的结果来看，这是一个<code>LoggingHandler</code>（估计就是专门负责打日志的）。</li><li>异步地在pipeline末尾插入一个<code>ServerBootstrapAcceptor</code>。</li></ol><p>再给pipeline拍一张快照： <img src="https://oss.kherrisan.cn/1d0c5dc9d01a99fbdf25dadaac0b36d9.png" srcset="/img/loading.gif" alt></p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/403de3e7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JLink——借助JLink打包Java程序为可执行程序</title>
      <link>http://www.kherrisan.cn/posts/72407af/</link>
      <guid>http://www.kherrisan.cn/posts/72407af/</guid>
      <pubDate>Sun, 06 Jan 2019 19:38:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;JDK9中的模块化技术使得原本一两百兆的JRE能够被拆分成多个较小的模块，因此如果想要把Java程序打包成可执行程序，并在没有JRE环境的机器上运行，不再需要带上一个庞大的JRE，而只需要额外增加几个JDK中的module。 项目目录结构如下，仅仅是一个很简单的Hello World程序。代码中仅仅使用到了System.out.println这一个JDK中提供的函数。 &lt;img src=&quot;https://oss.kherrisan.cn/b6fc620903896d3ef034f5bed269fcaa.png&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; 最重要的是module-info.jar文件，这个文件是module的定义文件，声明了我所编写的这个模块需要依赖哪些模块，以及对外暴露哪些东西。 由于只依赖java.base模块，而这个模块是默认包含的，因此module-info的大括号内可以为空。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>JDK9中的模块化技术使得原本一两百兆的JRE能够被拆分成多个较小的模块，因此如果想要把Java程序打包成可执行程序，并在没有JRE环境的机器上运行，不再需要带上一个庞大的JRE，而只需要额外增加几个JDK中的module。 项目目录结构如下，仅仅是一个很简单的Hello World程序。代码中仅仅使用到了System.out.println这一个JDK中提供的函数。 <img src="https://oss.kherrisan.cn/b6fc620903896d3ef034f5bed269fcaa.png" srcset="/img/loading.gif" alt> 最重要的是module-info.jar文件，这个文件是module的定义文件，声明了我所编写的这个模块需要依赖哪些模块，以及对外暴露哪些东西。 由于只依赖java.base模块，而这个模块是默认包含的，因此module-info的大括号内可以为空。</p><a id="more"></a><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">module</span> dkm {}</code></pre></div><p>build.gradle文件也十分简单。</p><div class="hljs"><pre><code class="hljs groovy">plugins {    id <span class="hljs-string">'java'</span>}apply <span class="hljs-string">plugin:</span> <span class="hljs-string">'application'</span>mainClassName = <span class="hljs-string">'com.dokyme.Main'</span>group <span class="hljs-string">'test-jlink-exe'</span>version <span class="hljs-string">'1.0-SNAPSHOT'</span>sourceCompatibility = <span class="hljs-number">1.9</span></code></pre></div><p>先运行<code>./gradlew build</code>，将该项目打成JAR包。接着再用JLink工具将多个模块链接成一个可执行文件，有没有一种C语言的链接器的既视感？</p><div class="hljs"><pre><code class="hljs jboss-cli">jlink <span class="hljs-params">--module-path</span> <span class="hljs-string">/Library/Java/JavaVirtualMachines/jdk-10.0.2.jdk/Contents/Home/jmods</span><span class="hljs-function">:build</span>/libs <span class="hljs-params">--add-modules</span> dkm <span class="hljs-params">--launcher</span> dkm=dkm/com.dokyme.Main <span class="hljs-params">--output</span> dist</code></pre></div><ul><li>—module-path 类似于CLASSPATH，JLink到哪里去找modules</li><li>—add-modules 要额外添加的module</li><li>—launcher dkm=dkm/com.dokyme.Main 启动器，或者说是可执行程序。后面跟着的是程序的名字以及入口主类的位置。</li><li>—output 输出路径</li></ul><p>命令执行结束之后就会多出一个dist目录，里面的bin文件夹下存放着可执行文件，这个dist目录大约30MB左右。 <img src="https://oss.kherrisan.cn/321c50d9e9ddc4d5a698214ac400d572.png" srcset="/img/loading.gif" alt> 这个入口文件实际上是一个shell脚本，调用同目录下的java程序载入模块中的主类，执行主类的代码。</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span>JLINK_VM_OPTIONS=DIR=`dirname <span class="hljs-variable">$0</span>`<span class="hljs-variable">$DIR</span>/java <span class="hljs-variable">$JLINK_VM_OPTIONS</span> -m dkm/com.dokyme.Main <span class="hljs-variable">$@</span></code></pre></div><p>找到一个gradle的plugin，挺有意思： <a href="https://github.com/alkimiapps/gradle-dplink-plugin" target="_blank" rel="noopener">gradle-dplink-plugin</a></p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/72407af/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Netty——NioEventLoop(2)</title>
      <link>http://www.kherrisan.cn/posts/75327452/</link>
      <guid>http://www.kherrisan.cn/posts/75327452/</guid>
      <pubDate>Sat, 05 Jan 2019 10:36:54 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Loop过程&quot;&gt;&lt;a href=&quot;#Loop过程&quot; class=&quot;headerlink&quot; title=&quot;Loop过程&quot;&gt;&lt;/a&gt;Loop过程&lt;/h1&gt;&lt;p&gt;&lt;code&gt;NioEventLoop&lt;/code&gt;最核心的就是处理事件循环的&lt;code&gt;run&lt;/code&gt;方法。这个方法看起来不长，但实际上它承担了最重要的逻辑，并且对很多细节问题做了处理。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Loop过程"><a href="#Loop过程" class="headerlink" title="Loop过程"></a>Loop过程</h1><p><code>NioEventLoop</code>最核心的就是处理事件循环的<code>run</code>方法。这个方法看起来不长，但实际上它承担了最重要的逻辑，并且对很多细节问题做了处理。</p><a id="more"></a><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{    <span class="hljs-keyword">for</span> (;;) {        <span class="hljs-keyword">try</span> {            <span class="hljs-keyword">switch</span> (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) {                <span class="hljs-keyword">case</span> SelectStrategy.CONTINUE:                    <span class="hljs-keyword">continue</span>;                <span class="hljs-keyword">case</span> SelectStrategy.BUSY_WAIT:                <span class="hljs-keyword">case</span> SelectStrategy.SELECT:                    select(wakenUp.getAndSet(<span class="hljs-keyword">false</span>));                    <span class="hljs-keyword">if</span> (wakenUp.get()) {                        selector.wakeup();                    }                    <span class="hljs-comment">// fall through</span>                <span class="hljs-keyword">default</span>:            }            cancelledKeys = <span class="hljs-number">0</span>;            needsToSelectAgain = <span class="hljs-keyword">false</span>;            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ioRatio = <span class="hljs-keyword">this</span>.ioRatio;            <span class="hljs-keyword">if</span> (ioRatio == <span class="hljs-number">100</span>) {                <span class="hljs-keyword">try</span> {                    processSelectedKeys();                } <span class="hljs-keyword">finally</span> {                    <span class="hljs-comment">// Ensure we always run tasks.</span>                    runAllTasks();                }            } <span class="hljs-keyword">else</span> {                <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> ioStartTime = System.nanoTime();                <span class="hljs-keyword">try</span> {                    processSelectedKeys();                } <span class="hljs-keyword">finally</span> {                    <span class="hljs-comment">// Ensure we always run tasks.</span>                    <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> ioTime = System.nanoTime() - ioStartTime;                    runAllTasks(ioTime * (<span class="hljs-number">100</span> - ioRatio) / ioRatio);                }            }        } <span class="hljs-keyword">catch</span> (Throwable t) {            handleLoopException(t);        }        <span class="hljs-comment">// Always handle shutdown even if the loop processing threw an exception.</span>        <span class="hljs-keyword">try</span> {            <span class="hljs-keyword">if</span> (isShuttingDown()) {                closeAll();                <span class="hljs-keyword">if</span> (confirmShutdown()) {                    <span class="hljs-keyword">return</span>;                }            }        } <span class="hljs-keyword">catch</span> (Throwable t) {            handleLoopException(t);        }    }}</code></pre></div><p>既然叫eventLoop，那代码的主体部分自然就是一个循环，在每一次循环迭代都根据某些状态做一些针对性工作。 首先是<code>selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())</code>，<code>selectStrategy</code>只有一个实现类：<code>DefaultSelectStrategy</code>。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculateStrategy</span><span class="hljs-params">(IntSupplier selectSupplier, <span class="hljs-keyword">boolean</span> hasTasks)</span> <span class="hljs-keyword">throws</span> Exception </span>{    <span class="hljs-keyword">return</span> hasTasks ? selectSupplier.get() : SelectStrategy.SELECT;}......selectSupplier = <span class="hljs-keyword">new</span> IntSupplier() {    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-keyword">return</span> selectNow();    }};</code></pre></div><ol><li>判断队列中有无任务，如果有，则返回<code>selectNow</code>的结果。</li><li>如果没有，就返回SELECT。</li></ol><p><code>selectNow</code>方法返回的是JDK的select的<code>selectNow</code>方法执行的结果，这个方法执行非阻塞的select，返回<code>SelectionKey</code>的个数，当然如果无事发生的话也会返回0。 <strong><code>selectStrategy</code>中定义了三个常量：SELECT、CONTINUE、BUSY_WAIT，然而后两种并没有在哪里被使用到。</strong>可能是netty是打算先设计好结构，然后再慢慢填坑把。</p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>当strategy为SELECT的时候，涉及到<code>NioEventLoop</code>的<code>select</code>方法：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> oldWakenUp)</span> <span class="hljs-keyword">throws</span> IOException </span>{    Selector selector = <span class="hljs-keyword">this</span>.selector;        <span class="hljs-keyword">int</span> selectCnt = <span class="hljs-number">0</span>;        <span class="hljs-keyword">long</span> currentTimeNanos = System.nanoTime();        <span class="hljs-keyword">long</span> selectDeadLineNanos = currentTimeNanos + delayNanos(currentTimeNanos);        <span class="hljs-keyword">for</span> (;;) {            <span class="hljs-keyword">long</span> timeoutMillis = (selectDeadLineNanos - currentTimeNanos + <span class="hljs-number">500000L</span>) / <span class="hljs-number">1000000L</span>;            <span class="hljs-keyword">if</span> (timeoutMillis <= <span class="hljs-number">0</span>) {                <span class="hljs-keyword">if</span> (selectCnt == <span class="hljs-number">0</span>) {                    selector.selectNow();                    selectCnt = <span class="hljs-number">1</span>;                }                <span class="hljs-keyword">break</span>;            }            <span class="hljs-keyword">if</span> (hasTasks() && wakenUp.compareAndSet(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>)) {                selector.selectNow();                selectCnt = <span class="hljs-number">1</span>;                <span class="hljs-keyword">break</span>;            }            <span class="hljs-keyword">int</span> selectedKeys = selector.select(timeoutMillis);            selectCnt ++;            <span class="hljs-keyword">if</span> (selectedKeys != <span class="hljs-number">0</span> || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) {                <span class="hljs-keyword">break</span>;            }            <span class="hljs-keyword">if</span> (Thread.interrupted()) {                    ......            }            <span class="hljs-keyword">long</span> time = System.nanoTime();            <span class="hljs-keyword">if</span> (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) >= currentTimeNanos) {                selectCnt = <span class="hljs-number">1</span>;            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SELECTOR_AUTO_REBUILD_THRESHOLD > <span class="hljs-number">0</span> &&                    selectCnt >= SELECTOR_AUTO_REBUILD_THRESHOLD) {                rebuildSelector();                selector = <span class="hljs-keyword">this</span>.selector;                selector.selectNow();                selectCnt = <span class="hljs-number">1</span>;                <span class="hljs-keyword">break</span>;            }            currentTimeNanos = time;        }        ......}<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> <span class="hljs-title">delayNanos</span><span class="hljs-params">(<span class="hljs-keyword">long</span> currentTimeNanos)</span> </span>{    ScheduledFutureTask<?> scheduledTask = peekScheduledTask();    <span class="hljs-keyword">if</span> (scheduledTask == <span class="hljs-keyword">null</span>) {        <span class="hljs-keyword">return</span> SCHEDULE_PURGE_INTERVAL;    }    <span class="hljs-keyword">return</span> scheduledTask.delayNanos(currentTimeNanos);}</code></pre></div><p><code>select</code>方法在循环中尝试根据时间限制来进行阻塞或者非阻塞的select操作。这里的时间限制就是<code>selectDeadLineNanos</code>，他根据下一个任务的时间限制给出这次阻塞select最迟必须结束的时间。如果没有下一个任务，就给出长达SCHEDULE_PURGE_INTERVAL的时间，当然在这段时间内如果有任务到来还是会按照任务的deadline时间做判断。</p><ol><li>如果还有不到500ms就要到ddl了，就结束循环，不过如果还没有执行过阻塞select，为了不破坏<code>select</code>方法的语义，可以先selectNow一次。</li><li>如果任务队列里有任务了，尝试将这个<code>NioEventLoop</code>设置为唤醒，如果唤醒成功，selectNow一次并结束。</li><li>通过selector执行阻塞的select操作，可以阻塞到ddl的前500ms，即在ddl之前预留500ms，说不定要做别的事情。记录阻塞select次数。</li><li>如果阻塞select操作真的返回了几个事件，结束循环。</li><li>如果用户（就是除了对象本身之外的其他人）唤醒了它，结束循环。</li><li>如果任务队列有任务了，或者有调度任务了，结束循环。</li><li>如果线程被中断了，结束循环。</li><li>如果阻塞select次数超过了一个阈值，说明selector出bug了，重建selector，selectNow一次，结束循环。</li></ol><p>在循环体开头的switch可以这么解释：</p><ol><li>如果任务队列里有任务，就让<code>selector</code>selectNow一次，非阻塞地看看有没有什么事件发生，不管事件是0个还是几个，继续执行switch下面的代码。</li><li>如果没有任务，就考虑执行一段时间阻塞的select操作。</li></ol><p>结束了switch，该处理事件和执行任务了。这里netty又来骚操作了——<code>ioRatio</code>，这个变量代表两个过程——IO和运行任务分别所占时间比例。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (ioRatio == <span class="hljs-number">100</span>) {    processSelectedKeys();    runAllTasks();} <span class="hljs-keyword">else</span> {    <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> ioStartTime = System.nanoTime();    processSelectedKeys();    <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> ioTime = System.nanoTime() - ioStartTime;    runAllTasks(ioTime * (<span class="hljs-number">100</span> - ioRatio) / ioRatio);}</code></pre></div><p>判断方法很简单，如果<code>ioRatio</code>是100，就运行所有的任务；如果不是100，比如说是20，那么记录下IO所话的时间<code>ioTime</code>，然后限定运行任务的时间为<code>ioTime*(100-20)/20</code>，也就是4倍<code>ioTime</code>。</p><h2 id="processSelectedKeys"><a href="#processSelectedKeys" class="headerlink" title="processSelectedKeys"></a>processSelectedKeys</h2><p>既然select操作检测到了IO事件，那么就要处理对应的key，这个key和JavaNIO中是SelectionKey是一回事。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (selectedKeys != <span class="hljs-keyword">null</span>) {    processSelectedKeysOptimized();} <span class="hljs-keyword">else</span> {    processSelectedKeysPlain(selector.selectedKeys());}</code></pre></div><p>netty提供了两种处理selectionKey的方法——plain和optimized。<code>NioEventLoop</code>对象维护了一个<code>SelectedSelectionKeySet</code>对象，这个对象管理了一个selectionKey的集合。至于为什么不用Java原生的Set容器，应该还是出于效率上的考虑（TreeSet和HashSet在某些场景下都不如数组来的快）。 <code>SelectedSelectionKeySet</code>使用一个数组来作为set的底层实现，初始长度为1024，add操作向数组索引为size的位置插入元素，如果长度不够就扩容一倍，没有缩容的情况，没有remove操作，提供迭代器访问形式。 先看<code>processSelectedKeysOptimized</code>到底是怎么optimize的。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processSelectedKeysOptimized</span><span class="hljs-params">()</span> </span>{    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i < selectedKeys.size; ++i) {        <span class="hljs-keyword">final</span> SelectionKey k = selectedKeys.keys[i];        selectedKeys.keys[i] = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">final</span> Object a = k.attachment();        <span class="hljs-keyword">if</span> (a <span class="hljs-keyword">instanceof</span> AbstractNioChannel) {            processSelectedKey(k, (AbstractNioChannel) a);        } <span class="hljs-keyword">else</span> {            processSelectedKey(k, (NioTask<SelectableChannel>)task);        }        <span class="hljs-keyword">if</span> (needsToSelectAgain) {            ......        }    }}</code></pre></div><p>遍历set中的每一个selectionKey，取出attach在它上面的对象，有可能是<code>AbstractNioChannel</code>，也有可能是<code>NioTask</code>。 <strong>这里可以思考一下：SelectionKey上的attachment是什么时候加上去的？</strong> 在<code>AbstractNioChannel</code>中的<code>doRegister</code>中：</p><div class="hljs"><pre><code class="hljs java">selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class="hljs-number">0</span>, <span class="hljs-keyword">this</span>);</code></pre></div><p><code>AbstractNioChannel</code>被attach到了<code>SelectionKey</code>上面。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processSelectedKey</span><span class="hljs-params">(SelectionKey k, AbstractNioChannel ch)</span> </span>{        <span class="hljs-keyword">final</span> AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();        ......        <span class="hljs-keyword">int</span> readyOps = k.readyOps();        <span class="hljs-keyword">if</span> ((readyOps & SelectionKey.OP_CONNECT) != <span class="hljs-number">0</span>) {            k.interestOps(k.interestOps() & ~SelectionKey.OP_CONNECT);            unsafe.finishConnect();        }        <span class="hljs-keyword">if</span> ((readyOps & SelectionKey.OP_WRITE) != <span class="hljs-number">0</span>) {            ch.unsafe().forceFlush();        }        <span class="hljs-keyword">if</span> ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class="hljs-number">0</span> || readyOps == <span class="hljs-number">0</span>) {            unsafe.read();        }}</code></pre></div><p>思路很清晰，就是根据<code>readyOps</code>的不同的值，采取不同的行为。 <code>processSelectedKeysPlain</code>实际上类似，区别主要在于它使用Java自带的Set存放SelectionKey。</p><h2 id="runAllTasks"><a href="#runAllTasks" class="headerlink" title="runAllTasks"></a>runAllTasks</h2><p><code>runAllTasks</code>有两种，带时间限的和不带时间限的。不带时间限则执行所有任务：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">do</span> {    fetchedAll = fetchFromScheduledTaskQueue();    <span class="hljs-keyword">if</span> (runAllTasksFrom(taskQueue)) {        ranAtLeastOne = <span class="hljs-keyword">true</span>;    }} <span class="hljs-keyword">while</span> (!fetchedAll); <span class="hljs-comment">// keep on processing until we fetched all scheduled tasks.</span></code></pre></div><p>首先从<code>ScheduledTaskQueue</code>中取出任务，存放到<code>taskQueue</code>中，直到所有<code>ScheduledTaskQueue</code>被取空，或者<code>taskQueue</code>已满。 然后逐个执行<code>taskQueue</code>中的所有任务，直到<code>taskQueue</code>为空。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (;;) {    safeExecute(task);    task = pollTaskFrom(taskQueue);    <span class="hljs-keyword">if</span> (task == <span class="hljs-keyword">null</span>) {        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    }}</code></pre></div><p>引用闪电侠博客中的一张图来概括loop的过程。 <img src="https://upload-images.jianshu.io/upload_images/1357217-67ed6d1e8070426f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" srcset="/img/loading.gif" alt></p><h1 id="wakenUp"><a href="#wakenUp" class="headerlink" title="wakenUp"></a>wakenUp</h1><p>参考：<a href="https://wenku.baidu.com/view/c75d218c804d2b160a4ec04c.html" target="_blank" rel="noopener">Netty原子wakeup作用分析</a>，虽然这篇文章已经严重过期了。 在<code>NioEventLoop</code>对象中，有一个<code>AtomicBoolean</code>——<code>wakenUp</code>，在<code>run</code>方法及其调用的其他方法中多次见到了对该变量的判断及CAS（Compare and Set）操作，之前一直忽略了这个变量的作用。</p><blockquote><p>Boolean that controls determines if a blocked Selector.select should break out of its selection process. In our case we use a timeout for the select method and the select method will block for that time unless waken up.</p></blockquote><p>字面意思为：决定<code>Selector.select</code>阻塞调用是否要中断select过程的一个Boolean，即是否应该通过<code>select.wakeUp()</code>唤醒正在阻塞的select操作。 <strong>主要目的是防止<code>selector.wakeUp()</code>被重复调用，因为<code>selector.wakeUp()</code>操作的开销还是不小的。</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wakeup</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> inEventLoop)</span> </span>{    <span class="hljs-keyword">if</span> (!inEventLoop && wakenUp.compareAndSet(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>)) {        selector.wakeup();    }}</code></pre></div><p>这里有个问题：<code>NioEventLoop</code>是单线程的代码逻辑，怎么会出现在selector阻塞的同时唤醒他呢？我认为问题出在selector可能不是单线程独享的，即不是每一个<code>NioEventLoop</code>都有一个独立的<code>selector</code>。此外，通过<code>NioEventLoop.execute</code>执行<code>Runnable</code>是串行的，但调用<code>NioEventLoop</code>的其他方法时还是会出现多线程并发的情况。 在switch语句块的SELECT分支中，会首先设置<code>wakenUp</code>为false，相当于每次循环时都给<code>wakenUp</code>变量设个初始值。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">case</span> SelectStrategy.SELECT:    select(wakenUp.getAndSet(<span class="hljs-keyword">false</span>));</code></pre></div><p>在<code>select()</code>方法中，有两处对<code>wakenUp</code>的值做了判断：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">for</span>{    ......    <span class="hljs-keyword">if</span> (hasTasks() && wakenUp.compareAndSet(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>)) {        selector.selectNow();        selectCnt = <span class="hljs-number">1</span>;        <span class="hljs-keyword">break</span>;    }    ......    selector.select(timeoutMillis);}</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (wakenUp.get()) {    selector.wakeup();}</code></pre></div>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/75327452/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Netty——NioEventLoop(1)</title>
      <link>http://www.kherrisan.cn/posts/5e1f2791/</link>
      <guid>http://www.kherrisan.cn/posts/5e1f2791/</guid>
      <pubDate>Mon, 24 Dec 2018 20:41:23 GMT</pubDate>
      <description>
      
        &lt;p&gt;作为Netty中最核心的概念之一，&lt;code&gt;NioEventLoop&lt;/code&gt;作为线程实体承载Netty中几乎所有代码的运行、所有事件的检测和触发。&lt;code&gt;EventLoop&lt;/code&gt;这个单词并不陌生。在很多的图形用户界面（GUI）程序中，都会使用较少的数个线程来运行代码，以应对用户操作事件。 由于Netty的线程模型基于Java的&lt;strong&gt;NIO&lt;/strong&gt;，而NIO又是通过&lt;strong&gt;IO多路复用&lt;/strong&gt;实现的。IO多路复用是底层技术，在其之上则是负责管理多路IO的线程模型。Reactor模式就是一种经典的多线程IO设计模型。 &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>作为Netty中最核心的概念之一，<code>NioEventLoop</code>作为线程实体承载Netty中几乎所有代码的运行、所有事件的检测和触发。<code>EventLoop</code>这个单词并不陌生。在很多的图形用户界面（GUI）程序中，都会使用较少的数个线程来运行代码，以应对用户操作事件。 由于Netty的线程模型基于Java的<strong>NIO</strong>，而NIO又是通过<strong>IO多路复用</strong>实现的。IO多路复用是底层技术，在其之上则是负责管理多路IO的线程模型。Reactor模式就是一种经典的多线程IO设计模型。 </p><a id="more"></a><p><img src="https://oss.kherrisan.cn/f1e818b190a1ab88c077a337c471f8f3.png" srcset="/img/loading.gif" alt> 上面的第一张图是多线程IO模型，第二张图是单线程NIO模型，第三张图是Reactor线程模型。第一和第二张图的区别主要在于线程是否复用，第二和第三张图的区别在于第二张图使用单线程（进程）处理读写事件而图三将对同一台远程主机的操作聚合到一个Handler里面，由Reactor负责派发事件给Handler执行。 当然，Handler中代码的执行也是需要线程的，这时就可以考虑线程的复用，即通过线程池管理线程。而Acceptor也可以进行多线程并发，也可以使用线程池。</p><h1 id="EventLoop类体系"><a href="#EventLoop类体系" class="headerlink" title="EventLoop类体系"></a>EventLoop类体系</h1><p><img src="https://oss.kherrisan.cn/31af451f0f108a2f460d9f1061b87ac0.png" srcset="/img/loading.gif" alt> 图中白框框处的是JDK中自带的类。显然Netty也是利用了JDK中的接口来表达类的语义。</p><ol><li><code>Executor</code>表示任务的执行者，只有一个方法<code>execute()</code>，和<code>Runnable</code>的概念有点类似，但实际上是caller和callee的关系。</li><li><code>ExecutorService</code>表示提供执行功能的服务方，所有的线程池都是<code>ExecutorService</code>的子类，这个接口定义了和executor相关的一些方法，如<code>execute</code>,<code>submit</code>等。</li><li><code>EventExecutorGroup</code>表示基于事件的执行者集合，它继承了<code>Iterable</code>，说明他可以迭代，且每个元素都是<code>EventExecutor</code>。同时它继承了<code>ScheduledExecutorService</code>接口，表明他具有调度定时任务的功能。</li><li><code>EventExecutor</code>表示任务的执行者。</li><li><code>EventLoopGroup</code>表示<code>EventLoop</code>的集合，即线程的集合，这个接口的主要功能一个是遍历<code>EventLoop</code>，另一个是允许将<code>channel</code>注册到某个<code>EventLoop</code>上。</li><li><code>EventLoop</code>负责处理各个<code>channel</code>的任务，一般一个<code>EventLoop</code>会对应多个<code>channel</code>。此接口本身并没有提供什么有趣的方法。</li></ol><h1 id="第一个NioEventLoop"><a href="#第一个NioEventLoop" class="headerlink" title="第一个NioEventLoop"></a>第一个NioEventLoop</h1><p>不妨探索一下Netty启动时第一个<code>NioEventLoop</code>是何时何地启动的，以典型的启动代码为例：</p><div class="hljs"><pre><code class="hljs java">EventLoopGroup bossGroup = <span class="hljs-keyword">new</span> NioEventLoopGroup(<span class="hljs-number">1</span>);</code></pre></div><p>忽略重载的构造函数。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NioEventLoopGroup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads, Executor executor, <span class="hljs-keyword">final</span> SelectorProvider selectorProvider,</span></span><span class="hljs-function"><span class="hljs-params">                         <span class="hljs-keyword">final</span> SelectStrategyFactory selectStrategyFactory)</span> </span>{    <span class="hljs-keyword">super</span>(nThreads, executor, selectorProvider, selectStrategyFactory, RejectedExecutionHandlers.reject());}</code></pre></div><p>这里调用了父类的构造函数。</p><div class="hljs"><pre><code class="hljs java">    <span class="hljs-keyword">static</span> {            DEFAULT_EVENT_LOOP_THREADS = Math.max(<span class="hljs-number">1</span>, SystemPropertyUtil.getInt(            <span class="hljs-string">"io.netty.eventLoopThreads"</span>, NettyRuntime.availableProcessors() * <span class="hljs-number">2</span>));    }    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">MultithreadEventLoopGroup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads, Executor executor, Object... args)</span> </span>{        <span class="hljs-keyword">super</span>(nThreads == <span class="hljs-number">0</span> ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, args);}</code></pre></div><p><code>NioEventLoopGroup</code>是一个<code>MultiThreadEventLoopGroup</code>，即多线程事件循环组，最关键的是多线程的，这里既可以指多个线程，也可以看做是多个<code>EventLoop</code>组成的group。<strong>线程个数取决于最开始传入的整数，如果这个数是0，则会取一个默认值——处理器个数x2。</strong> 继续跟踪这个类的重载的及其父类的构造函数，直到构造函数中有明显的代码。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">MultithreadEventExecutorGroup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads, Executor executor,</span></span><span class="hljs-function"><span class="hljs-params">                                        EventExecutorChooserFactory chooserFactory, Object... args)</span> </span>{    <span class="hljs-keyword">if</span> (executor == <span class="hljs-keyword">null</span>) {        executor = <span class="hljs-keyword">new</span> ThreadPerTaskExecutor(newDefaultThreadFactory());    }    children = <span class="hljs-keyword">new</span> EventExecutor[nThreads];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i < nThreads; i ++) {        <span class="hljs-keyword">try</span> {            children[i] = newChild(executor, args);            success = <span class="hljs-keyword">true</span>;        } <span class="hljs-keyword">finally</span> {            <span class="hljs-keyword">if</span> (!success)                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j < i; j ++)                    children[j].shutdownGracefully();        }    }    chooser = chooserFactory.newChooser(children);    <span class="hljs-keyword">final</span> FutureListener<Object> terminationListener = ......;    <span class="hljs-keyword">for</span> (EventExecutor e: children) {        e.terminationFuture().addListener(terminationListener);    }    readonlyChildren = Collections.unmodifiableSet(childrenSet);}</code></pre></div><p>在<code>NioEventLoopGroup</code>初始化时，参数<code>executor</code>为null，于是会首先创建一个<code>ThreadPerTaskExecutor</code>（顾名思义，为每个任务取得一个线程来执行它的Executor，至于如何取得，是直接创建新线程还是复用线程，要看具体情况）。 <code>ThreadPerTaskExecutor</code>的<code>execute</code>方法如下：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ThreadFactory threadFactory;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable command)</span> </span>{    threadFactory.newThread(command).start();}</code></pre></div><p>在这里，<code>threadFactory</code>是一个<code>DefaultThreadFactory</code>对象，它提供线程的方式由<code>newThread</code>方法决定：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Thread <span class="hljs-title">newThread</span><span class="hljs-params">(Runnable r)</span> </span>{    Thread t = newThread(FastThreadLocalRunnable.wrap(r), prefix + nextId.incrementAndGet());        <span class="hljs-keyword">if</span> (t.isDaemon() != daemon) {            t.setDaemon(daemon);        }        <span class="hljs-keyword">if</span> (t.getPriority() != priority) {            t.setPriority(priority);        }    <span class="hljs-keyword">return</span> t;}</code></pre></div><p>显然，这里的<code>ThreadPerTaskExecutor</code>会将收到的每个task放到一个新创建的线程里运行。 回到构造函数，接下来程序开辟了一个数组用于存放所有的executor。<code>EchoServer</code>中nThread取1，自然就开辟长度为1的数组。 <code>newChild</code>在<code>MultithreadEventExecutorGroup</code>是一个抽象方法，具体如何创建子executor取决于其子类的实现。<code>NioEventLoopGroup</code>是这么实现它的：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">protected</span> EventLoop <span class="hljs-title">newChild</span><span class="hljs-params">(Executor executor, Object... args)</span> <span class="hljs-keyword">throws</span> Exception </span>{    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> NioEventLoop(<span class="hljs-keyword">this</span>, executor, (SelectorProvider) args[<span class="hljs-number">0</span>],        ((SelectStrategyFactory) args[<span class="hljs-number">1</span>]).newSelectStrategy(), (RejectedExecutionHandler) args[<span class="hljs-number">2</span>]);}</code></pre></div><p>直接new了一个<code>NioEventLoop</code>，并且把<code>executor</code>作为构造函数的参数传进了<code>NioEventLoop</code>。不过<code>executor</code>并不是由<code>NioEventLoop</code>使用，而是由其父类的父类——<code>SingleThreadEventExecutor</code>作为属性之一进行维护。<code>SingleThreadEventExecutor</code>作为<code>executor</code>的维护者，在它的代码中也只有一处地方用到了<code>executor</code>，就在<code>doStartThread</code>函数中。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doStartThread</span><span class="hljs-params">()</span> </span>{    executor.execute(<span class="hljs-keyword">new</span> Runnable() {        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{            thread = Thread.currentThread();            ......            <span class="hljs-keyword">try</span> {                SingleThreadEventExecutor.<span class="hljs-keyword">this</span>.run();            } <span class="hljs-keyword">catch</span> (Throwable t) {                ......            } <span class="hljs-keyword">finally</span> {                ......            }        }    });}</code></pre></div><p>而这个<code>doStartThread</code>方法也不是<code>SingleThreadEventExecutor</code>一诞生就起作用的，在<code>SingleThreadEventExecutor</code>的<code>execute</code>方法中调用了该方法。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable task)</span> </span>{    ......    addTask(task);    <span class="hljs-keyword">if</span> (!inEventLoop) {        startThread();        <span class="hljs-keyword">if</span> (isShutdown()) {            ......        }    }}</code></pre></div><p>重新审视<code>SingleThreadEventExecutor</code>，他提供了一个<code>execute</code>方法，当有人调用了该对象的<code>execute</code>方法时，会把要运行的任务加入到一个任务队列中（通过<code>addTask</code>方法，这个方法不看我们都能猜到是什么意思的）。如果是第一次execute，就在修改队列之后通过<code>SingleThreadEventExecutor</code>自带的<code>executor</code>启动一个线程，这个线程执行一个抽象的<code>run</code>方法，在<code>NioEventLoop</code>中对该方法给出了实现。 这里遇到了三种executor——<code>ThreadPerTaskExecutor</code>和<code>SingleThreadEventExecutor</code>，前者给每个任务（也就是<code>Runnable</code>）分配一个线程来执行，后者则只使用一个线程（只做一次<code>startThread</code>，那肯定只有一个线程了），<code>NioEventLoop</code>则也在其整个生命周期中只使用一个线程，此外它通过轮训来从队列中取任务。 <strong>那么问题来了，<code>SingleThreadEventExecutor</code>为什么要用<code>ThreadPerTaskExecutor</code>启动线程呢，二者看似是平级的概念，为什么却采用了包含关系？</strong> 会到负责启动多个<code>SingleThreadEventExecutor</code>的<code>MultithreadEventExecutorGroup</code>，接下来通过<code>chooserFactory</code>得到了一个<code>chooser</code>，这个对象的作用是根据特定的策略选择多个<code>executor</code>中的一个，即一个选择器。 <strong>这里不禁想起了在负载均衡中应该也有一个这样的<code>chooser</code>，只是不知道这样的<code>chooser</code>应该处于怎样的层级，来收集做出选择所需要的信息。</strong> 回到最初的问题——第一个<code>NioEventLoop</code>是何时启动的？到目前为止，第一个<code>NioEventLoop</code>已经诞生了，但他的<code>execute</code>方法还没有被任何人调用，因此他还没有启动自己的轮训线程。也就是说，应该是在另外的某一个犄角旮旯里，某行代码调用了<code>execute</code>，启动了第一个<code>NioEventLoop</code>的线程。 启动<code>EchoServer</code>的代码就那么多，不是初始化<code>EventLoopGroup</code>就是配置<code>Bootstrap</code>，最后就是<code>bind</code>。我认为在<code>bind</code>中可能性最大。 在前一篇文章中曾经分析过服务端启动的流程。这里稍微略过一些细节。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> ChannelFuture <span class="hljs-title">doBind</span><span class="hljs-params">(<span class="hljs-keyword">final</span> SocketAddress localAddress)</span> </span>{    <span class="hljs-keyword">final</span> ChannelFuture regFuture = initAndRegister();    ......}</code></pre></div><p>在<code>AbstractBootstrap</code>的<code>doBind</code>方法中，发现了<code>ChannelFuture</code>的踪迹。Future是一种返回异步结果的常见形式，出现了<code>ChannelFuture</code>说明其中肯定有某个函数是通过另一个线程执行操作，然后异步返回运行结果的。继续紧跟这个Future。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> ChannelFuture <span class="hljs-title">initAndRegister</span><span class="hljs-params">()</span> </span>{    ......    ChannelFuture regFuture = config().group().register(channel);    ......}</code></pre></div><p>这里的<code>group()</code>返回了一个<code>NioEventLoopGroup</code>。我有一个疑问： <strong>这个<code>NioEvnetLoopGroup</code>是Boss还是Worker呢？</strong> 这里我用了一个土办法，在调试模式下加断点，看对象的ID。 <img src="https://oss.kherrisan.cn/d7902ca4f0352876f72b9ffc01c72830.png" srcset="/img/loading.gif" alt> 答案了然了，这是一个Boss。继续跟踪。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> ChannelFuture <span class="hljs-title">register</span><span class="hljs-params">(Channel channel)</span> </span>{    <span class="hljs-keyword">return</span> register(<span class="hljs-keyword">new</span> DefaultChannelPromise(channel, <span class="hljs-keyword">this</span>));}<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> ChannelFuture <span class="hljs-title">register</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ChannelPromise promise)</span> </span>{    ObjectUtil.checkNotNull(promise, <span class="hljs-string">"promise"</span>);    promise.channel().unsafe().register(<span class="hljs-keyword">this</span>, promise);    <span class="hljs-keyword">return</span> promise;}</code></pre></div><p>在<code>SingleThreadEventLoop</code>中，Future逐渐浮出水面——他是作为一个Promise被创建出来的。但这里只是创建，并没有修改Future的状态，也没有在Future中填充异步运行的结果。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(EventLoop eventLoop, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> </span>{    ......    AbstractChannel.<span class="hljs-keyword">this</span>.eventLoop = eventLoop;    <span class="hljs-keyword">if</span> (eventLoop.inEventLoop()) {        register0(promise);    } <span class="hljs-keyword">else</span> {            eventLoop.execute(<span class="hljs-keyword">new</span> Runnable() {                <span class="hljs-meta">@Override</span>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{                    register0(promise);                }            });    }}</code></pre></div><p>在<code>AbstractChannel</code>中出现了一个<code>eventLoop</code>，这个<code>eventLoop</code>是不是就是通过<code>newChild</code>得到的<code>NioEventLoop</code>呢？再次祭出比对ID大法。 这里我就不截图了，结果是这里的<code>eventLoop</code>是作为boss的<code>NioEventLoopGroup</code>制造出来的。 这里代码会进入else分支，即<code>eventLoop.execute</code>，那么第一个<code>NioEventLoop</code>就会将这个<code>Runnable</code>加到自己的任务队列中，接着通过<code>ThreadPerTaskExecutor.execute</code>运行自己的<code>run</code>方法，在<code>run</code>方法中轮训任务队列，运行<code>Runnable</code>。</p><h1 id="eventLoop-inEventLoop"><a href="#eventLoop-inEventLoop" class="headerlink" title="eventLoop.inEventLoop"></a>eventLoop.inEventLoop</h1><p>我认为这个方法是一个十分关键的方法，虽然实现逻辑很简单，<strong>但他却很清晰地诠释了netty设计思路中对象和线程之间的关系，即executor和thread这两大概念之间的关系。</strong> netty把这个方法的定义放在了<code>AbstractEventExecutor</code>类中。 <img src="https://oss.kherrisan.cn/305bf4c6bc929c927ede4eecb54f2d68.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">inEventLoop</span><span class="hljs-params">()</span> </span>{    <span class="hljs-keyword">return</span> inEventLoop(Thread.currentThread());}</code></pre></div><p>在<code>AbstractEventExecutor</code>中，<code>inEventLoop</code>表示在当前这个线程的<code>EventLoop</code>，由于<code>EventLoop</code>是单线程的（它是<code>SingleThreadEventExecutor</code>的子类），一个<code>EventLoop</code>对象<code>run</code>方法的代码只会运行在一个线程中。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">inEventLoop</span><span class="hljs-params">(Thread thread)</span> </span>{    <span class="hljs-keyword">return</span> thread == <span class="hljs-keyword">this</span>.thread;}</code></pre></div><p>在<code>SingleThreadEventExecutor</code>中，<code>inEventLoop</code>表示传入参数的thread对象和与对象自身绑定的thread对象是同一个对象。 也就是说，一个<code>SingleThreadEventLoop</code>对象会和一个线程绑定，当想要通过这个对象执行某些方法的时候，可以先通过<code>inEventLoop()</code>方法判断，当前线程是不是和这个eventLoop绑定的线程，继而针对不同情况进行区分处理。如：如果当前线程不是eventLoop绑定的那个线程，就通过<code>execute</code>方法把任务加入到任务队列中；如果就是当前线程，那就直接运行代码。这样可以避免产生多线程操作同一个对象所带来的同步问题。</p><h1 id="重新梳理Bootstrap"><a href="#重新梳理Bootstrap" class="headerlink" title="重新梳理Bootstrap"></a>重新梳理Bootstrap</h1><p>结合<code>NioEventLoop</code>的初始化过程，重新梳理netty程序的启动流程。 <img src="https://oss.kherrisan.cn/44c84ddc625008b39ff4bb98e6d4fd05.png" srcset="/img/loading.gif" alt></p><ol><li>创建<code>NioEventLoopGroup</code>，包含多个<code>NioEventLoop</code>，个数视情况而定。每个<code>NioEventLoop</code>的<code>run</code>方法还没有开始运行。</li><li><code>Bootstrap</code>在<code>bind</code>的时候，通过反射创建<code>NioServerSocketChannel</code>对象。</li><li>初始化<code>NioServerSocketChannel</code>上面的attribute和option。</li><li><code>NioEventLoopGroup</code>选出下一个<code>NioEventLoop</code>，让channel注册到它上面。</li><li>在选中的<code>NioEventLoop</code>的线程上，注册interestOps和attachment到selector上。</li><li>在channel的eventloop线程上，通过<code>headContext</code>绑定到指定端口上。</li></ol><p><strong>NioEventLoop</strong>的核心——loop的梳理，见下一篇。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/5e1f2791/#disqus_thread</comments>
    </item>
    
    <item>
      <title>K2-PandoraBox-IPV6（教育网）配置过程</title>
      <link>http://www.kherrisan.cn/posts/96393751/</link>
      <guid>http://www.kherrisan.cn/posts/96393751/</guid>
      <pubDate>Sun, 25 Nov 2018 18:06:38 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;strong&gt;坐标：东南大学九龙湖校区梅园4C某宿舍&lt;/strong&gt; 昨晚向某个同学要了一台斐讯K2路由器，本想替换掉宿舍的TP-Link来提供5GHz频段的Wifi，因为2.4GHz频段的Wifi对我MacbookPro2018的USB-HUB以及蓝牙干扰太过于严重。忽然想把宿舍隔壁床位的IPV6网口利用起来。 之前尝试过将PC网口与IPV6网口直连上网，体会到了飞一般的网速，举个例子：下载一个ubuntu-desktop的镜像，大概只需要两分多钟就可以下载完毕。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>坐标：东南大学九龙湖校区梅园4C某宿舍</strong> 昨晚向某个同学要了一台斐讯K2路由器，本想替换掉宿舍的TP-Link来提供5GHz频段的Wifi，因为2.4GHz频段的Wifi对我MacbookPro2018的USB-HUB以及蓝牙干扰太过于严重。忽然想把宿舍隔壁床位的IPV6网口利用起来。 之前尝试过将PC网口与IPV6网口直连上网，体会到了飞一般的网速，举个例子：下载一个ubuntu-desktop的镜像，大概只需要两分多钟就可以下载完毕。</p><a id="more"></a><h1 id="K2固件相关工作"><a href="#K2固件相关工作" class="headerlink" title="K2固件相关工作"></a>K2固件相关工作</h1><ol><li>刷<strong>breed</strong>不死鸟固件。</li><li>刷<strong>PandoraBox</strong>固件。</li></ol><h2 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h2><p>在浏览器中打开<code>192.168.1.1</code>，输入默认密码<code>admin</code>，进入<code>PandoraBox</code>管理页面。 由于我此时已经将<code>IPV6</code>网口与路由去<code>WAN</code>口相连，因此在网络-接口界面可以看到<code>WAN6</code>口已经通过<code>DHCP</code>从上游路由器（DHCP服务器）得到了IPV6网址。 如果插入了<code>IPV6</code>网线，但页面上没有<code>IPV6</code>地址，可以尝试点击“连接”按钮重新连接上游路由器，并等待1分钟左右，一般就可以获得<code>IPV6</code>地址了。 <img src="https://oss.kherrisan.cn/Snipaste_2018-11-24_13-35-37.png" srcset="/img/loading.gif" alt></p><h2 id="下载所需程序"><a href="#下载所需程序" class="headerlink" title="下载所需程序"></a>下载所需程序</h2><p>打开一个控制台，通过ssh连到路由器上，<strong>密码默认为admin</strong>：</p><div class="hljs"><pre><code class="hljs angelscript">ssh <span class="hljs-symbol">root@</span><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span></code></pre></div><p><img src="https://oss.kherrisan.cn/Snipaste_2018-11-24_13-37-31.png" srcset="/img/loading.gif" alt> 路由器的操作系统也是Linux的一种，因此熟悉PC端Linux操作的人应该不会有太大困难。</p><div class="hljs"><pre><code class="hljs routeros">opkg update<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>opkg install ip6tables kmod-ipt-nat6</code></pre></div><p><img src="https://oss.kherrisan.cn/Snipaste_2018-11-24_13-38-30.png" srcset="/img/loading.gif" alt> 安装2个程序，装好了之后回到浏览器。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>进入网络-接口-LAN-DHCP服务器页面，勾选<strong>总是通告默认路由</strong>。 <img src="https://oss.kherrisan.cn/3adea32eb5cb208d4e481e3321a0b88d.png" srcset="/img/loading.gif" alt> 进入网络-防火墙-自定义规则页面，添加一条规则，并<strong>重启防火墙</strong>。</p><div class="hljs"><pre><code class="hljs routeros">ip6tables -t<span class="hljs-built_in"> nat </span>-A POSTROUTING -o eth0.2 -j MASQUERADE</code></pre></div><p><img src="https://oss.kherrisan.cn/2ade23d4f609146101a4df4396b8621f.png" srcset="/img/loading.gif" alt> 回到路由器终端，找出IPV6的默认路由网关地址，然后添加一条新的路由规则：</p><div class="hljs"><pre><code class="hljs routeros">ip -6<span class="hljs-built_in"> route </span>| grep default假设输出的地址为xxxx::xxxxroute -A inet6 <span class="hljs-builtin-name">add</span><span class="hljs-built_in"> default </span>gw xxxx::xxxx dev eth0.2</code></pre></div><p><img src="https://oss.kherrisan.cn/339f07f8fd170d0765c79ed2027d2105.png" srcset="/img/loading.gif" alt> 最后，重启一下相关服务。</p><div class="hljs"><pre><code class="hljs routeros">/etc/init.d<span class="hljs-built_in">/firewall </span>restart/etc/init.d<span class="hljs-built_in">/network </span>restart</code></pre></div><h2 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h2><p>重启结束之后，PC就可以<code>ping</code>通谷歌了，如果<code>ping</code>不通，可以重连一下路由器的<code>Wifi</code>。 <img src="https://oss.kherrisan.cn/259f944fc4663699a06f4f8ef77f6022.png" srcset="/img/loading.gif" alt></p><h2 id="打开网页"><a href="#打开网页" class="headerlink" title="打开网页"></a>打开网页</h2><p>离终点只有一步之遥了：由于<strong>chrome</strong>浏览器采用的策略是IPV6和IPV4共存，解析网址的<code>IPV6</code>和<code>IPV4</code>地址，然后优先与<code>IPV6</code>地址发起连接，当连接的时间超过300ms（具体数值不清楚）时，说明链路中的<code>IPV6</code>机制有问题，就会切换到<code>IPV4</code>地址发起<code>TCP</code>连接，最后发送<code>HTTP</code>请求报文。 这样的流程对于国内想要通过<code>IPV6</code>翻墙的用户而言是不合适的，因为连接远程主机的延迟一般会比较高，导致链路正常联通的<code>IPV6</code>链路被浏览器舍弃，转而尝试去访问无法连接的<code>IPV4</code>地址。 而我们希望的理想的过程是，浏览器先解析IPV6地址，只要<code>IPV6</code>地址存在，就直接去连接该地址，不要去管<code>IPV4</code>地址是多少。或者说串行地去请求做<code>IPV6</code>和<code>IPV4</code>地址的<code>DNS</code>解析操作。在<code>DNS</code>协议中，<code>IPV6</code>和<code>IPV4</code>对应报文头部的<code>type</code>值分别为<code>AAAA</code>和<code>A</code>。此外，需要在本机配置<code>DNS</code>服务器地址为本机地址。 我在Github上找到了这么一个好东西： <a href="https://github.com/adamyi/v6dns" target="_blank" rel="noopener">adamyi/v6dns</a> 这是一个<code>DNS</code>服务的中继程序，会在某个端口上监听所有<code>DNS</code>报文，并按照下面的逻辑运行： <img src="https://oss.kherrisan.cn/fafa577fd8ba1491f759bc03e039eacb.png" srcset="/img/loading.gif" alt> 为了解决<code>IPV4/6</code>优先级的问题，可以这么做：在本地运行v6dns程序，监听本机的53端口，并设置<code>DNS</code>查询服务器为某个远程的<code>DNS</code>服务器地址。这样，如果能够查询到某个网站的<code>IPV6</code>地址，那就直接发起连接，如果查不到，就再查询其<code>IPV4</code>地址。</p><h2 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h2><p>本文介绍了在教育网环境下使用K2的PandoraBox固件进行配置最终访问<code>IPV6</code>网站的过程，其中最核心的步骤就是配置<code>NAT6</code>，<code>NAT6</code>是基于<code>IPV6</code>的网络地址转换，目的是将上游<code>DHCP6</code>分配的一个<code>IPV6</code>地址转换成内网的多个地址分配给多个主机。 最终测试的效果不佳，在Youtube上看视频时常常出现卡顿的现象，记忆中原来看视频能够达到4K画质，并且帧率为60fps的网速水准。推测原因如下：</p><ol><li>K2路由器不够稳定。</li><li>PandoraBox固件或NAT6机制不够成熟。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/96393751/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Netty——下载、编译、调试源码</title>
      <link>http://www.kherrisan.cn/posts/1169e0a5/</link>
      <guid>http://www.kherrisan.cn/posts/1169e0a5/</guid>
      <pubDate>Thu, 15 Nov 2018 20:39:40 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Intellij，启动！&quot;&gt;&lt;a href=&quot;#Intellij，启动！&quot; class=&quot;headerlink&quot; title=&quot;Intellij，启动！&quot;&gt;&lt;/a&gt;Intellij，启动！&lt;/h1&gt;&lt;h2 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/9160684f134b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Netty分享之动态生成重复性的代码&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Intellij，启动！"><a href="#Intellij，启动！" class="headerlink" title="Intellij，启动！"></a>Intellij，启动！</h1><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://www.jianshu.com/p/9160684f134b" target="_blank" rel="noopener">Netty分享之动态生成重复性的代码</a></p><a id="more"></a><h2 id="完整过程"><a href="#完整过程" class="headerlink" title="完整过程"></a>完整过程</h2><p>我选择直接通过Intellij来clone Netty在Github上的源码，这样就不需要再另外起一个控制台了。Github地址如下： <a href="https://github.com/netty/netty.git" target="_blank" rel="noopener">https://github.com/netty/netty.git</a> <img src="https://oss.kherrisan.cn/fa1ea85ae614f8195aa96fe0f42e82df.png" srcset="/img/loading.gif" alt> 好了，现在就可以运行example中的程序了，直接点Intellij的运行就行。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/1169e0a5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Netty——Bootstrap</title>
      <link>http://www.kherrisan.cn/posts/7c7e2239/</link>
      <guid>http://www.kherrisan.cn/posts/7c7e2239/</guid>
      <pubDate>Wed, 14 Nov 2018 20:24:36 GMT</pubDate>
      <description>
      
        &lt;p&gt;以netty-example中的Echo（Server）为例，分析Netty源码的结构与运行过程。 跳过SSL相关的部分。从下面这一行代码开始：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;ChannelFuture f = b.bind(PORT).sync();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>以netty-example中的Echo（Server）为例，分析Netty源码的结构与运行过程。 跳过SSL相关的部分。从下面这一行代码开始：</p><div class="hljs"><pre><code class="hljs java">ChannelFuture f = b.bind(PORT).sync();</code></pre></div><a id="more"></a><p><code>sync</code>方法的功能是同步地等待该操作结束，因此对于server启动监听没有实质性的作用，这里可以忽略他。 首先进入到<code>bootstrap.bind</code>方法中，这个方法由<code>AbstractBootstrap</code>负责实现：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Create a new {<span class="hljs-doctag">@link</span> Channel} and bind it.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> ChannelFuture <span class="hljs-title">bind</span><span class="hljs-params">(<span class="hljs-keyword">int</span> inetPort)</span> </span>{    <span class="hljs-keyword">return</span> bind(<span class="hljs-keyword">new</span> InetSocketAddress(inetPort));}</code></pre></div><p>再进入到<code>bind</code>方法中：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Create a new {<span class="hljs-doctag">@link</span> Channel} and bind it.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> ChannelFuture <span class="hljs-title">bind</span><span class="hljs-params">(SocketAddress localAddress)</span> </span>{    validate();    <span class="hljs-keyword">if</span> (localAddress == <span class="hljs-keyword">null</span>) {        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">"localAddress"</span>);    }    <span class="hljs-keyword">return</span> doBind(localAddress);}</code></pre></div><p><code>bind</code>方法做了两件事：1.做一些校验工作；2.调用<code>doBind</code>方法进行真正的监听地址绑定。校验操作一般无足轻重，因此不妨直接进入<code>doBind</code>方法中去：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> ChannelFuture <span class="hljs-title">doBind</span><span class="hljs-params">(<span class="hljs-keyword">final</span> SocketAddress localAddress)</span> </span>{    <span class="hljs-keyword">final</span> ChannelFuture regFuture = initAndRegister();    <span class="hljs-keyword">final</span> Channel channel = regFuture.channel();    <span class="hljs-keyword">if</span> (regFuture.isDone()) {        doBind0(regFuture, channel, localAddress, promise);        <span class="hljs-keyword">return</span> promise;    } <span class="hljs-keyword">else</span> {        <span class="hljs-comment">// Registration future is almost always fulfilled already, but just in case it's not.</span>        <span class="hljs-keyword">final</span> PendingRegistrationPromise promise = <span class="hljs-keyword">new</span> PendingRegistrationPromise(channel);        regFuture.addListener({                doBind0(regFuture, channel, localAddress, promise);        });        <span class="hljs-keyword">return</span> promise;    }}</code></pre></div><p><strong>上面的代码并不完整，删除了一些细枝末节，因为目前阅读源码的目的是尽快尽可能完整地理清楚程序脉络，因此我删除了自认为对于程序总体认识没有太大帮助的代码。</strong> <code>doBind</code>方法主要做了两件事：</p><ol><li><code>initAndRegiter</code></li><li><code>doBind0</code></li></ol><p>暂时不知道这两个方法各自起了怎样的作用，一个一个来看。</p><h1 id="initAndRegister"><a href="#initAndRegister" class="headerlink" title="initAndRegister"></a>initAndRegister</h1><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> ChannelFuture <span class="hljs-title">initAndRegister</span><span class="hljs-params">()</span> </span>{    ......    channel = channelFactory.newChannel();    init(channel);    ......    ChannelFuture regFuture = config().group().register(channel);    ......}</code></pre></div><p><code>initAndRegister</code>方法所做的工作可以大致分为三块：</p><ol><li>调用<code>channelFactory</code>实例化<code>channel</code>；</li><li>初始化<code>channel</code>；</li><li>将<code>channel</code>注册到<code>group</code>返回的对象上去。</li></ol><h2 id="实例化Channel"><a href="#实例化Channel" class="headerlink" title="实例化Channel"></a>实例化Channel</h2><p><strong>Netty和NIO都有一个叫做Channel的概念，为了方便区分，这里及后续的分析中都将Netty中的称为Channel，而NIO中的称为JavaChannel。</strong> Channel是Netty中的核心概念之一，表示的是客户端或服务端与远程主机通讯的某个Socket。在大多数语言的网络通讯库中，客户端中只有一种Socket，但在服务端中有两种：ServerSocket和Socket，前者只负责监听端口，后者负责处理与远程主机的数据交换。 至于服务端为什么要使用两种Socket，我认为还是受限于OS系统调用的接口定义。</p><div class="hljs"><pre><code class="hljs java">channel = channelFactory.newChannel();</code></pre></div><p>和Spring等一众Java框架类似，对于核心概念的实例化采用了工厂模式。<code>ChannelFactory</code>接口结构很简单：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ChannelFactory</span><<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Channel</span>> </span>{    <span class="hljs-function">T <span class="hljs-title">newChannel</span><span class="hljs-params">()</span></span>;}</code></pre></div><p><img src="https://oss.kherrisan.cn/5c8854379f983db74506487c2d562e67.png" srcset="/img/loading.gif" alt> 实现了<code>ChannelFactory</code>接口的类不多，工厂对象的实际类型多半就是<code>ReflectiveChannelFactory</code>了。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReflectiveChannelFactory</span><span class="hljs-params">(Class<? extends T> clazz)</span> </span>{    <span class="hljs-keyword">this</span>.clazz = clazz;}<span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">newChannel</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> clazz.getConstructor().newInstance();}</code></pre></div><p><code>ReflectiveChannelFactory</code>在构造函数中拿到了<code>channel</code>的类型，然后使用了反射构造函数来实例化对象，没毛病。至于它的构造函数是在何处调用的，在server启动代码链式调用<code>bootstrap</code>的数个方法中，有这么一个方法设置了<code>channel</code>的类型（准确地说是Class对象）。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> B <span class="hljs-title">channel</span><span class="hljs-params">(Class<? extends C> channelClass)</span> </span>{    <span class="hljs-keyword">return</span> channelFactory(<span class="hljs-keyword">new</span> ReflectiveChannelFactory<C>(channelClass));}</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> B <span class="hljs-title">channelFactory</span><span class="hljs-params">(ChannelFactory<? extends C> channelFactory)</span> </span>{    <span class="hljs-keyword">this</span>.channelFactory = channelFactory;    <span class="hljs-keyword">return</span> self();}</code></pre></div><p>这里<code>ReflectiveChannelFactory</code>是直接new出来的，没有通过反射，传入构造函数的参数为<code>channel</code>的类型。<code>AbstractBootstrap</code>简单的实例化了一个<code>channelFactory</code>，并关联到该对象自身。 <strong>貌似Netty中很多的setter方法都是这种写法。</strong> <strong><code>channel</code>实例化的过程还是挺简单的：在<code>bootstrap</code>的链式调用中实例化<code>channelFactory</code>，然后在server启动监听时有工厂实例化真正的<code>channel</code>。</strong></p><h2 id="初始化channel"><a href="#初始化channel" class="headerlink" title="初始化channel"></a>初始化channel</h2><p><code>AbstractBootstrap</code>的<code>init</code>方法是抽象的，该方法的实现被下放到了子类中去：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Channel channel)</span> <span class="hljs-keyword">throws</span> Exception </span>{    <span class="hljs-keyword">final</span> Map<ChannelOption<?>, Object> options = options0();    <span class="hljs-keyword">synchronized</span> (options) {        setChannelOptions(channel, options, logger);    }    <span class="hljs-keyword">final</span> Map<AttributeKey<?>, Object> attrs = attrs0();    <span class="hljs-keyword">synchronized</span> (attrs) {        <span class="hljs-keyword">for</span> (Entry<AttributeKey<?>, Object> e: attrs.entrySet()) {            <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)            AttributeKey<Object> key = (AttributeKey<Object>) e.getKey();            channel.attr(key).set(e.getValue());        }    }    ChannelPipeline p = channel.pipeline();    <span class="hljs-keyword">final</span> EventLoopGroup currentChildGroup = childGroup;    <span class="hljs-keyword">final</span> ChannelHandler currentChildHandler = childHandler;    <span class="hljs-keyword">final</span> Entry<ChannelOption<?>, Object>[] currentChildOptions;    <span class="hljs-keyword">final</span> Entry<AttributeKey<?>, Object>[] currentChildAttrs;    <span class="hljs-keyword">synchronized</span> (childOptions) {        currentChildOptions = childOptions.entrySet().toArray(newOptionArray(<span class="hljs-number">0</span>));    }    <span class="hljs-keyword">synchronized</span> (childAttrs) {        currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(<span class="hljs-number">0</span>));    }    p.addLast(<span class="hljs-keyword">new</span> ChannelInitializer<Channel>() {        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Channel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>{            <span class="hljs-keyword">final</span> ChannelPipeline pipeline = ch.pipeline();            ChannelHandler handler = config.handler();            <span class="hljs-keyword">if</span> (handler != <span class="hljs-keyword">null</span>) {                pipeline.addLast(handler);            }            ch.eventLoop().execute(<span class="hljs-keyword">new</span> Runnable() {                <span class="hljs-meta">@Override</span>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{                    pipeline.addLast(<span class="hljs-keyword">new</span> ServerBootstrapAcceptor(                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));                }            });        }    });}</code></pre></div><ol><li>将<code>AbstractBootstrap</code>负责维护的<code>options</code>和<code>attrs</code>无脑地全部设置到<code>channel</code>对象上去。为了避免另一个线程修改<code>options</code>和<code>attrs</code>，访问时都进行了同步，我认为这里的加锁在服务器启动阶段是不会对性能造成太大影响的。</li><li>在该channel的<code>pipeline</code>尾部添加一个<code>ChannelInitializer</code>，何时调用其<code>initChannel</code>方法目前还不得而知，但是该<code>ChannelInitializer</code>的目的还是挺明确的： 2.1. 在<code>pipeline</code>尾部添加一个<code>ChannelHandler</code>。 2.2. 在该<code>channel</code>的线程中，异步地在其<code>pipeline</code>尾部添加一个<code>ServerBootstrapAcceptor</code>。</li></ol><h2 id="注册channel"><a href="#注册channel" class="headerlink" title="注册channel"></a>注册channel</h2><p><code>ChannelFuture regFuture = config().group().register(channel);</code> <code>group()</code>返回的是<code>EventLoopGroup</code>，即线程组，Netty中一个<code>EventLoop</code>即为一个线程，将多个线程组合起来管理就产生了“线程组”的概念（和OS中的线程组概念不同）。这里调用了<code>EventLoopGroup</code>接口里的<code>register</code>方法来注册<code>channel</code>，但暂时还无法判断是哪个实现了<code>EventLoopGroup</code>接口的小可爱。 在这一行代码加断点并以调试模式运行Echo Example。 <img src="https://oss.kherrisan.cn/d94b109dc5c60ed0de2b23e7417abb6c.png" srcset="/img/loading.gif" alt> 发现<code>config().group()</code>返回的是一个<code>NioEventLoopGroup</code>对象，这个对象是<code>MultithreadEventLoopGroup</code>的子类，其<code>register</code>方法所做之事很简单。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> ChannelFuture <span class="hljs-title">register</span><span class="hljs-params">(Channel channel)</span> </span>{    <span class="hljs-keyword">return</span> next().register(channel);}</code></pre></div><p><code>next()</code>方法返回了一个<code>EventLoop</code>，根据直觉猜测<code>EventLoopGroup</code>是一个可迭代的对象，其中存放了<code>EventLoop</code>的列表，而<code>next()</code>方法类似于迭代器的<code>next()</code>方法，返回下一个<code>EventLoop</code>对象。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> EventExecutor <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>{    <span class="hljs-keyword">return</span> chooser.next();}</code></pre></div><p><code>MultithreadEventLoopGroup</code>的<code>next()</code>方法最终会借助于<code>chooser</code>返回下一个<code>EventLoop</code>对象。暂时还不知道这个chooser是何方神圣，只知道他是<code>MultithreadEventLoopGroup</code>维护的众多对象之一。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EventExecutor[] children;<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set<EventExecutor> readonlyChildren;<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicInteger terminatedChildren = <span class="hljs-keyword">new</span> AtomicInteger();<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Promise<?> terminationFuture = <span class="hljs-keyword">new</span> DefaultPromise(GlobalEventExecutor.INSTANCE);<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EventExecutorChooserFactory.EventExecutorChooser chooser;</code></pre></div><p>由于目前我们还只是专注于启动流程，而启动过程中线程的选择与切换的特点还不能很好地显现出来，因此先不管<code>chooser</code>，回到<code>register</code>方法中。 <code>next()</code>返回了一个<code>SingleThreadEventLoop</code>对象，通知他调用他自己实现的<code>register</code>方法。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> ChannelFuture <span class="hljs-title">register</span><span class="hljs-params">(Channel channel)</span> </span>{    <span class="hljs-keyword">return</span> register(<span class="hljs-keyword">new</span> DefaultChannelPromise(channel, <span class="hljs-keyword">this</span>));}</code></pre></div><p>这里实例化了一个<code>DefaultChannelPromise</code>，并把<code>channel</code>和<code>SingleThreadEventLoop</code>作为参数传入，估计<code>Promise</code>会把他们两人关联起来。 <img src="https://oss.kherrisan.cn/d2d80e9027d11fab989d4dc9f3f2b4c1.png" srcset="/img/loading.gif" alt> 如果忘记了<code>channel</code>是什么东西的话，可以回溯到<code>ChannelFactory</code>的部分：<code>ChannelFactory</code>通过反射实例化<code>channel</code>对象，而其类型就是在<code>bootstrap</code>对象上进行方法链式调用时传入的<code>NioServerSocketChannel.class</code>。 实例化promise后并没有结束，因为还没有注册呢：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> ChannelFuture <span class="hljs-title">register</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ChannelPromise promise)</span> </span>{    ObjectUtil.checkNotNull(promise, <span class="hljs-string">"promise"</span>);    promise.channel().unsafe().register(<span class="hljs-keyword">this</span>, promise);    <span class="hljs-keyword">return</span> promise;}</code></pre></div><p>此时<code>promise.channel()</code>返回的就是刚才传入构造函数的<code>NioServerSocketChannel</code>。<code>unsafe</code>是个什么玩意儿还不是很清楚，但联想到JDK中有一个也叫<code>Unsafe</code>的组件，用于提供对内存的直接操作，就可以猜测这个<code>unsafe</code>应该是负责某些底层操作流程的。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(EventLoop eventLoop, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> </span>{            ......            AbstractChannel.<span class="hljs-keyword">this</span>.eventLoop = eventLoop;<span class="hljs-comment">//从此这个channel有了属于自己的eventloop</span>            <span class="hljs-keyword">if</span> (eventLoop.inEventLoop()) {                register0(promise);            } <span class="hljs-keyword">else</span> {                    eventLoop.execute(<span class="hljs-keyword">new</span> Runnable() {                        <span class="hljs-meta">@Override</span>                        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{                            register0(promise);                        }                    });                    ......            }        }</code></pre></div><p><code>unsafe</code>的<code>register</code>方法的主要内容如上，最终目的是调用<code>register0</code>方法，注册<code>promise</code>。直觉告诉我，名字里带0的方法都差不多快要到终点了。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register0</span><span class="hljs-params">(ChannelPromise promise)</span> </span>{        ......        <span class="hljs-keyword">boolean</span> firstRegistration = neverRegistered;        doRegister();        ......        pipeline.invokeHandlerAddedIfNeeded();        ......        pipeline.fireChannelRegistered();        <span class="hljs-keyword">if</span> (isActive()) {            <span class="hljs-keyword">if</span> (firstRegistration) {                pipeline.fireChannelActive();            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (config().isAutoRead()) {                beginRead();            }        }        ......}</code></pre></div><p>除了触发了几个事件之外，最神秘的当属<code>doRegister</code>方法，直觉告诉我，当看到带有do字样的方法的时候，就离终点不远了。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doRegister</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{    <span class="hljs-keyword">boolean</span> selected = <span class="hljs-keyword">false</span>;    <span class="hljs-keyword">for</span> (;;) {        <span class="hljs-keyword">try</span> {            selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), <span class="hljs-number">0</span>, <span class="hljs-keyword">this</span>);            <span class="hljs-keyword">return</span>;        } <span class="hljs-keyword">catch</span> (CancelledKeyException e) {            <span class="hljs-keyword">if</span> (!selected) {                <span class="hljs-comment">// Force the Selector to select now as the "canceled" SelectionKey may still be</span>                <span class="hljs-comment">// cached and not removed because no Select.select(..) operation was called yet.</span>                eventLoop().selectNow();                selected = <span class="hljs-keyword">true</span>;            } <span class="hljs-keyword">else</span> {                <span class="hljs-comment">// We forced a select operation on the selector before but the SelectionKey is still cached</span>                <span class="hljs-comment">// for whatever reason. JDK bug ?</span>                <span class="hljs-keyword">throw</span> e;            }        }    }}</code></pre></div><p><code>doRegister</code>的主体是一个死循环，虽然这个死循环只会重复一到两次，在<code>javaChannel</code>上注册<code>selector</code>以及感兴趣的事件，同时，由于<code>AbstractNioChannel</code>本身是一个<code>AttributeMap</code>，因此自己作为属性的持有者也被注册到了<code>javaChannel</code>上。 这个<code>register</code>方法以及属于<code>java.nio</code>中的代码，总算可以说到终点了。 现在回到<code>AbstractBootstrap</code>的<code>doBind0</code>方法。</p><h2 id="doBind0"><a href="#doBind0" class="headerlink" title="doBind0"></a>doBind0</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doBind0</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">final</span> ChannelFuture regFuture, <span class="hljs-keyword">final</span> Channel channel,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">final</span> SocketAddress localAddress, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> </span>{    channel.eventLoop().execute(<span class="hljs-keyword">new</span> Runnable() {        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{                ......                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);                ......        }    });}</code></pre></div><p><code>doBind0</code>在另一个线程中将监听的地址绑定到<code>channel</code>上去，猜测这个<code>channel</code>应该是一个<code>NioServerSocketChannel</code>。然而并不是：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ChannelFuture <span class="hljs-title">bind</span><span class="hljs-params">(SocketAddress localAddress, ChannelPromise promise)</span> </span>{    <span class="hljs-keyword">return</span> tail.bind(localAddress, promise);}</code></pre></div><p>netty试图找到<code>pipline</code>上的最后一个<code>OutboundHandler</code>，这个<code>handler</code>有一个与之关联的<code>HeadContext</code>，它的<code>bind</code>方法如下：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bind</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">        ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise)</span></span><span class="hljs-function">        <span class="hljs-keyword">throws</span> Exception </span>{    unsafe.bind(localAddress, promise);}</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bind</span><span class="hljs-params">(<span class="hljs-keyword">final</span> SocketAddress localAddress, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> </span>{    ......        doBind(localAddress);    ......    <span class="hljs-keyword">if</span> (!wasActive && isActive()) {        invokeLater(<span class="hljs-keyword">new</span> Runnable() {            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{                pipeline.fireChannelActive();            }        });    }}</code></pre></div><p><code>unsafe</code>的<code>bind</code>方法在调用<code>doBind</code>同时，不忘发起一个<code>channelActive</code>事件。 最终让<code>javaChannel</code>监听该地址：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doBind</span><span class="hljs-params">(SocketAddress localAddress)</span> <span class="hljs-keyword">throws</span> Exception </span>{    <span class="hljs-keyword">if</span> (PlatformDependent.javaVersion() >= <span class="hljs-number">7</span>) {        javaChannel().bind(localAddress, config.getBacklog());    } <span class="hljs-keyword">else</span> {        javaChannel().socket().bind(localAddress, config.getBacklog());    }}</code></pre></div><p>注意到，此时<code>javaChannel</code>上的<code>interestOps</code>只有0，也就是无论<code>channel</code>上发生什么事件，都不会被<code>selector</code>选中，作为一个服务器，是肯定要处理<code>ACCEPT</code>事件的，在<code>pipeline.fireChannelActive()</code>中，经过<code>pipline</code>，调用到了<code>unsafe.beginRead()</code>方法：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doBeginRead</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{    ......    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> interestOps = selectionKey.interestOps();    <span class="hljs-keyword">if</span> ((interestOps & readInterestOp) == <span class="hljs-number">0</span>) {        selectionKey.interestOps(interestOps | readInterestOp);    }}</code></pre></div><p>这里的<code>readInterestOp</code>的值为16，对应的java nio中的<code>OP_ACCEPT</code>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>netty启动过程还是很复杂的，启动过程总结如下：</p><ol><li><code>channelFactory</code>通过反射实例化<code>ServerSocketChannel</code>对象。</li><li>初始化<code>channel</code>的attrs和options。</li><li>要求新连接到来的时候，在<code>pipeline</code>尾部添加一个<code>ServerBootstrapAcceptor</code>。</li><li>选择一个<code>eventLoop</code>，注册到该<code>channel</code>上。</li><li>在<code>javaChannel</code>上注册这个<code>eventLoop</code>的<code>selector</code>。</li><li>触发<code>handlerAdded</code>和<code>channelRegistered</code>事件。</li><li>将<code>javaChannel</code>绑定到指定的地址和端口上去。</li><li>触发<code>channelActivated</code>事件。</li><li>注册<code>OP_ACCEPT</code>到<code>selector</code>上去。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/7c7e2239/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JUC——ConcurrentHashMap</title>
      <link>http://www.kherrisan.cn/posts/b6a54201/</link>
      <guid>http://www.kherrisan.cn/posts/b6a54201/</guid>
      <pubDate>Sun, 14 Oct 2018 17:14:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/dbdcdc86ee06761292636a46d6fc8878.png&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; 1.7中的ConcurrentHashMap使用分段锁来解决并发线程之间的同步竞争问题，本文总结1.8中的实现。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/dbdcdc86ee06761292636a46d6fc8878.png" srcset="/img/loading.gif" alt> 1.7中的ConcurrentHashMap使用分段锁来解决并发线程之间的同步竞争问题，本文总结1.8中的实现。</p><a id="more"></a><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><ol><li>table：Node类型的数组，用于存放散列桶</li><li>nextTable：扩容阶段的新的table</li><li>baseCount</li><li>sizeCtl：一个状态变量<ul><li>-1表示map正在初始化</li><li>-(1+n)表示正在有n个线程一起努力扩容map</li><li>在初始化之后，正数表示下一次扩容的阈值</li><li>在初始化之前，正数表示table的初始大小</li></ul></li><li>transferIndex</li><li>cellsBusy</li><li>counterCells：CounterCell的数组，CounterCell似乎是用来计数的。</li></ol><hr><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="1-putVal"><a href="#1-putVal" class="headerlink" title="1. putVal"></a>1. putVal</h2><p>一个很长很长的方法：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent)</span> </span>{        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span> || value == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();        <span class="hljs-keyword">int</span> hash = spread(key.hashCode());        <span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (Node<K,V>[] tab = table;;) {            Node<K,V> f; <span class="hljs-keyword">int</span> n, i, fh;            <span class="hljs-keyword">if</span> (tab == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)                tab = initTable();            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((f = tabAt(tab, i = (n - <span class="hljs-number">1</span>) & hash)) == <span class="hljs-keyword">null</span>) {                <span class="hljs-keyword">if</span> (casTabAt(tab, i, <span class="hljs-keyword">null</span>,                             <span class="hljs-keyword">new</span> Node<K,V>(hash, key, value, <span class="hljs-keyword">null</span>)))                    <span class="hljs-keyword">break</span>;                   <span class="hljs-comment">// no lock when adding to empty bin</span>            }            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)                tab = helpTransfer(tab, f);            <span class="hljs-keyword">else</span> {                V oldVal = <span class="hljs-keyword">null</span>;               <span class="hljs-comment">//省略部分代码</span>            }        }        addCount(<span class="hljs-number">1L</span>, binCount);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    }</code></pre></div><ol><li>通过spread算出hash。spread的算法与HashMap中的hash函数类似，把高16位与低16位进行异或得到结果（当然高16位还是被保留的），区别在于这里hash值的最高位用作标志位，因此只能用低31位作为hash之后的index，最高位强制为0。</li></ol><p><img src="https://oss.kherrisan.cn/41c3beacdddb68b5f1d36a4c8f64e884.png" srcset="/img/loading.gif" alt></p><ol><li>进入一个死循环。 2.1. 检查刚刚拿到的table是否为null，或者长度是否为0，如果是空的，就初始化一个table。这里有可能出现多个线程同时调用initTable的情况。initTable函数也是一个死循环，在这个循环中多个线程争夺修改sizeCtrl变量的机会：抢着把sizeCtrl改为-1，如果CAS修改操作成功，说明抢到了初始化table的机会，再次检查一下table是不是空，如果是空的，就让table指向一个长度为n的新的Node数组。最后把sizeCtrl改为原来sizeCtrl的0.75倍。也就是说，在table为null的时候，sizeCtrl会发生缩减。</li></ol><p><strong>这里把sizeCtrl改为-1相当于一个latch，把其他线程锁在了外面（其他线程只能yield）。一旦某个线程完成了table的创建，所有线程就都会从循环中退出来，退出initTable函数。</strong> <strong>在while条件处会判断table是否为null，或者长度是否为0，当CAS操作成功只有还会再做一次判断，这样判断两次的目的应该是为了防止在进入while循环后，其他线程完成了table的创建，sizeCtrl变为正数，那如果当前线程再new Table的话就会造成资源的浪费了。（光一个创建数组操作就如此复杂，滴水不漏）</strong> <img src="https://oss.kherrisan.cn/e4d0c7796b2b0dcde9efc3856ef7cc13.png" srcset="/img/loading.gif" alt> 2.2.1. 如果f为空，通过CAS在table的hash位置插入一个新的node，插入成功则退出，插入失败则继续循环（回到2）。这里CAS操作只做一次，如果失败了就说明有另外一个线程在table的同样的地方插入了一个新的元素，而插入失败的线程就只能在下一次循环中遍历这个链表，把node插在链表尾部了。 2.3. 如果table的hash位置的f的hash==MOVED（-1），说明这个node后面的链表正在扩容，调用helpTransfer帮助其扩容。 2.4. 通过synchronize把这个桶加锁，尝试往这个桶中插入元素。 2.4.1. 如果是链表，就遍历链表并检查有无Node的key与目标key相等，如果存在就修改value为新的值，如果没有就在链表尾部插入一个新的节点。 2.4.2. 如果是红黑树，调用TreeBin的putVal方法插入元素。 2.4.3. 在遍历链表的过程中还会统计这个链表中节点个数，如果超过TREEIFY_THRESHOLD就会把这个链表变为一棵二叉树。 2.5. 调用addCount，元素个数加一。</p><blockquote><p>putVal的步骤总结一下： 1. 检验参数，计算hash，进入for循环2。 2. 一个循环。 2.1. 如果table为空，initTable。 2.2. 如果table[hash&(table.length-1)]为空，尝试CAS插入新节点。 2.3. 如果table[hash&(table.length-1)]的hash是MOVED，调用helpTransfer帮助其扩容。 2.4. 同步加锁，向链表或者红黑树中插入新节点，或者修改已有节点的value。 3. map元素个数加1。</p></blockquote><hr><h2 id="2-addCount"><a href="#2-addCount" class="headerlink" title="2. addCount"></a>2. addCount</h2><p>addCount语义上的功能为让map的大小（size）加1。addCount的代码可以分为两段。 <img src="https://oss.kherrisan.cn/987256f0e0ac59d7826222cacb3183a0.png" srcset="/img/loading.gif" alt></p><ol><li>如果counterCells为null，就直接返回。</li><li>如果通过CAS直接修改baseCount成功，就直接返回。</li><li>如果刚刚拿到的counterCells为null（说明CAS是失败的），就调用fullAddCount，并返回。</li><li>如果刚刚拿到的counterCells（记为as）不为null，而as长度为0（本质上和null是一回事），就调用fullAddCount，并返回。</li><li>如果as的某个随机的位置为null，就调用fullAddCount，并返回。</li><li>如果通过CAS直接修改CELLVALUE失败了，就调用fullAddCount，并返回。</li><li>如果以上条件都不满足，调用sumCount计算得到一个s。</li></ol><p>sumCount的实现逻辑是在baseCount的基础上，累加上所有的CounterCell的值。 以上是addCount的上半段，下半段应该是check>=0的时候需要进行的操作。 <img src="https://oss.kherrisan.cn/470aa3a3a2732ede598cc39debc99980.png" srcset="/img/loading.gif" alt> 主体是一个while循环，循环判断的条件比较苛刻：</p><ol><li>刚刚计算的sumCount比sizeCtrl大： 1.1. table正在扩容 1.2. 或者sumCount比下一次扩容的阈值大</li><li>table不为空</li><li>table大小不超过最大容量</li></ol><p>while循环体：</p><ol><li>根据table长度计算resizeStamp（记为rs）。</li><li>如果sizeCtrl<0，说明要么是没有初始化，要么是正在扩容。 2.1. 如果sizectrl中保存的stamp（记为sc）和rs不相等，或者sc比rs大1，或者sc比rs大max_resizers，或者transferindex<="0，就直接返回。这里可以猜测，肯定是其他线程修改了sizeCtrl，导致sizeCtrl的stamp与rs不一致。" 2.2. 如果通过cas尝试让sizectrl加1成功了（多了一个线程参与扩容），就帮助其扩容。 2.3. 如果sizectrl>=0，说明当前不在扩容，通过CAS修改sizeCtrl为<code>(rs << RESIZE_STAMP_SHIFT) + 2</code>。（<strong>其实这里会面临一个问题，就是sizeCtrl经过如此计算之后会变得特别大？</strong>）</0，说明要么是没有初始化，要么是正在扩容。></li><li>每次循环都重新计算一次sumCount。</li></ol><hr><h2 id="3-resizeStamp"><a href="#3-resizeStamp" class="headerlink" title="3. resizeStamp"></a>3. resizeStamp</h2><p><img src="https://oss.kherrisan.cn/6640e8c8a5b2ab14a87427946e3893eb.png" srcset="/img/loading.gif" alt> 返回的是table长度的前导0的个数 按位或 2^15。table最大大小为<code>Integer.MAX_VALUE - 8</code>，<code>Integer.MAX_VALUE</code>是除符号位外全为1，也就是2^31-1，前导0的个数会是0-32，0-32的数占6个二进制位，这6个二进制位与2^15进行或操作，也就是说造出了个这样的数字： <strong>0000 0000 0000 0000 1000 0000 00xx xxxx</strong> 尝试反推为什么要这么做，比如table.length为30，31，32时，rs： <strong>0000 0000 0000 0000 1000 0000 0001 1011</strong> <strong>0000 0000 0000 0000 1000 0000 0001 1011</strong> <strong>0000 0000 0000 0000 1000 0000 0001 1010</strong> 注意，sizeCtrl也有保存stamp的功能，根据addCount的check中的代码，sizeCtrl的高16位保存的值应该和rs是同一个概念。</p><hr><h2 id="4-helpTransfer"><a href="#4-helpTransfer" class="headerlink" title="4. helpTransfer"></a>4. helpTransfer</h2><p>helpTransfer这个函数被调用的机会不多，主要都是在putVal、clear、replaceNode这三个函数中。刚刚在putVal的流程中涉及到了helpTransfer。 <img src="https://oss.kherrisan.cn/c15c3369264dfd90022f2d40dfafd9e7.png" srcset="/img/loading.gif" alt> helpTransfer的第二个参数是一个Node，在putVal中，如果遇到某个node的hash==MOVED的情况，就对这个node调用helpTransfer。MOVED代表这个node是ForwardNode。 FowardNode类继承于Node类，它拥有一个叫nextTable的字段，所有的ForwardNode的hash值都是MOVED（-1），这个值是一个静态常量。 <strong>在数组扩容（转移）的过程中，如果table的某个位置为null，则会在那里插入一个ForwardNode</strong> helpTransfer的实现逻辑：</p><ol><li>检查table是null，或者该node（记为f）不是ForwardNode，或者f的nextTable为null，就直接退出。</li><li>利用table的长度计算stamp（记为rs）。</li><li>一个while循环，循环条件为：刚刚拿到的ForwardNode中的nextTable和map中的nextTable是同一个东西，并且table还是那个table，并且正在扩容！。 3.1. 和addCount中的check一样，把sizeCtrl和rs一顿比较，意义不明。 3.2. 通过CAS让sizeCtrl加1，代表又多了一个线程参与了扩容，如果CAS失败了的话就算了。</li></ol><hr><h2 id="5-transfer"><a href="#5-transfer" class="headerlink" title="5. transfer"></a>5. transfer</h2><p>transfer应该是ConcurrentHashMap的方法中最长的方法了。 直接看代码不太好理解，先引用一段别人写的：</p><blockquote><ol><li>如果当前的 nextTab 是空，也就是说需要进行扩容的数组还没有初始化，那么初始化一个大小是原来两倍的数组出来，作为扩容后的新数组。</li><li>我们分配几个变量，来把原来的数组拆分成几个完全相同的段，你可以把他们想象成一个个大小相同的短数组，每个短数组的长度是 stride 。</li><li>我们先取最后一个短数组，用 i 表示一个可变的指针，可指向短数组的任意一个位置，最开始指向的是短数组的结尾。bound 表示短数组的下界，也就是开始的位置。也就是我们在短数组选择的时候是采用从后往前进行的。</li><li>然后使用了一个全局的属性 transferIndex（线程共享），来记录当前已经选择过的短数组和还没有被选择的短数组之间的分隔。</li><li>那么当前的线程选择的这个短数组其实就是当前线程应该进行的数据迁移任务，也就是说当前线程就负责完成这一个小数组的迁移任务就行了。那么很显然在 transferIndex 之前的，没有被线程处理过的短数组就需要其他线程来帮忙进行数据迁移，其他线程来的时候看到的是 transferIndex 那么他们就会从 transferIndex 往前数 stride 个元素作为一个小数组当做自己的迁移任务。</li></ol></blockquote>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/b6a54201/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JUC——ReentrantLock</title>
      <link>http://www.kherrisan.cn/posts/994661cc/</link>
      <guid>http://www.kherrisan.cn/posts/994661cc/</guid>
      <pubDate>Sat, 06 Oct 2018 16:32:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/ce7ae3e6bb8915c9daaf1b1cc426ad33.png&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; 单线程持有的、可重入的锁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个可重入的互斥锁定 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁定相同的一些基本行为和语义，但功能更强大。ReentrantLock 将由最近成功获得锁定，并且还没有释放该锁定的线程所拥有。当锁定没有被另一个线程所拥有时，调用 lock 的线程将成功获取该锁定并返回。如果当前线程已经拥有该锁定，此方法将立即返回。可以使用 isHeldByCurrentThread() 和 getHoldCount() 方法来检查此情况是否发生。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/ce7ae3e6bb8915c9daaf1b1cc426ad33.png" srcset="/img/loading.gif" alt> 单线程持有的、可重入的锁。</p><blockquote><p>一个可重入的互斥锁定 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁定相同的一些基本行为和语义，但功能更强大。ReentrantLock 将由最近成功获得锁定，并且还没有释放该锁定的线程所拥有。当锁定没有被另一个线程所拥有时，调用 lock 的线程将成功获取该锁定并返回。如果当前线程已经拥有该锁定，此方法将立即返回。可以使用 isHeldByCurrentThread() 和 getHoldCount() 方法来检查此情况是否发生。</p></blockquote><a id="more"></a><p>ReentrantLock有3个内部类，一个Sync类及其衍生出的两个子类FairSync和NonFairSync，代表公平锁和非公平锁。</p><h1 id="公平性的控制"><a href="#公平性的控制" class="headerlink" title="公平性的控制"></a>公平性的控制</h1><p>AQS的acquire方法的第一步就是通过子类的tryAcquire方法来尝试获得锁。 <img src="https://oss.kherrisan.cn/2569c482e46833c20b6a967974e094df.png" srcset="/img/loading.gif" alt></p><ol><li>判断锁有没有被其他线程持有，如果在该线程之前没有其他等待线程并且CAS操作修改锁状态成功了，说明加锁成功。</li><li>如果锁被某线程持有，而且这个线程就是自己，给状态数值加上一个数（1），证明自己重入了。</li></ol><p><img src="https://oss.kherrisan.cn/7f3f467fbb52491518ef0564f3130157.png" srcset="/img/loading.gif" alt> 不会判断是否有更早的等待线程。</p><h1 id="release"><a href="#release" class="headerlink" title="release"></a>release</h1><p>在AQS中，首先tryRelease，然后唤醒后继节点。 <img src="https://oss.kherrisan.cn/6ba5210f4f36b59903e9ce079c581add.png" srcset="/img/loading.gif" alt> tryRelease会让锁状态state减少1，如果变为0了，说明释放锁的次数和锁重入的次数相等了，当前线程已经完全释放了锁。值得注意的是，由于一次只会有一个线程调用tryRelease，因此这里对state的修改不需要CAS。 如果tryRelease返回true了，说明这个线程完全释放了锁，可以唤醒后继节点了。</p><h1 id="tryLock-timeout"><a href="#tryLock-timeout" class="headerlink" title="tryLock(timeout)"></a>tryLock(timeout)</h1><p>带有延迟参数的加锁方法，这个方法是Lock类与synchronize关键字相比的一大优势，他提供了有限时间内尝试获取锁的机制，而不是无穷无尽的等待。 <img src="https://oss.kherrisan.cn/fa8f23c158fb51ae37050603f81db14a.png" srcset="/img/loading.gif" alt></p><ol><li>调用tryAcquire尝试获取锁。</li><li>调用doAcquireNanos方法。</li></ol><p><img src="https://oss.kherrisan.cn/Snipaste_2018-10-06_15-45-27.jpg" srcset="/img/loading.gif" alt> doAcquireNanos方法和acquireQueued方法很相似。</p><ol><li>计算ddl，即实际到期时间。</li><li>调用addWaiter，在队列尾部插入一个节点。</li><li>进入死循环，检查该节点是否有资格拿锁（即是否为第二个节点），如果有资格，tryAcquire。</li><li>计算距离ddl还剩多长时间记为delta。</li><li>如果delta<0，说明已经超时，acquire失败。</li><li>如果该节点应该睡眠，并且delta比自旋时间阈值大的话，调用LockSupport.parkNanos让该线程睡眠指定时间。</li><li>如果该线程发生了中断，就抛出interrptedexception。</li><li>如果以上都不满足，就一直自旋，直到拿到锁或者超时或者中断。</li></ol><p><img src="https://oss.kherrisan.cn/95a2820e520129712a21853d29f2346c.png" srcset="/img/loading.gif" alt></p><h1 id="lockInterruptibly"><a href="#lockInterruptibly" class="headerlink" title="lockInterruptibly"></a>lockInterruptibly</h1><p>通过lockInterruptibly加锁，如果锁已经被其他线程获取，那么有两种情况能使得当前线程能够被唤醒：</p><ol><li>当前线程拿到锁了。</li><li>当前线程被其他线程中断了。</li></ol><p><img src="https://oss.kherrisan.cn/b5ba5cfbeeaa64d4b215575ea40b25ef.png" srcset="/img/loading.gif" alt> 如果某个线程在睡眠过程中被其他线程中断了，acquireQueued会返回true给acquire，而acquire紧接着会调用selfInterrupt方法来使得当前线程的interrupted标志位为true，但并不会抛出异常，而doAcquireInterruptible会抛出InterruptException。 根据LockSupport.park的语义，unpark操作和interrupt方法都能够唤醒某个沉睡的线程。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/994661cc/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JUC——AQS</title>
      <link>http://www.kherrisan.cn/posts/794bdde7/</link>
      <guid>http://www.kherrisan.cn/posts/794bdde7/</guid>
      <pubDate>Sat, 06 Oct 2018 15:08:33 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/6de3aa05c56e9c4d58266c20b05abb9c.png&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; AQS————AbstractQueuedSynchronizor，队列同步器，AQS是一个抽象类，它为开发者编写同步工具（比如锁、信号量）提供了开发框架，这个框架封装了对线程和竞态条件的细节，使得开发者能够只关注于锁的逻辑，而无需关注线程的维护以及竞态条件的控制。 JUC中很多锁都是基于AQS进行开发的。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/6de3aa05c56e9c4d58266c20b05abb9c.png" srcset="/img/loading.gif" alt> AQS————AbstractQueuedSynchronizor，队列同步器，AQS是一个抽象类，它为开发者编写同步工具（比如锁、信号量）提供了开发框架，这个框架封装了对线程和竞态条件的细节，使得开发者能够只关注于锁的逻辑，而无需关注线程的维护以及竞态条件的控制。 JUC中很多锁都是基于AQS进行开发的。</p><a id="more"></a><h1 id="Node类"><a href="#Node类" class="headerlink" title="Node类"></a>Node类</h1><p>由于AQS是队列，需要有一个类来封装每个节点的状态，Node类代表队列中的每一个节点。除了构造函数之外没有方法。 <img src="https://oss.kherrisan.cn/910b221f6636d393b151869bb9fab175.png" srcset="/img/loading.gif" alt></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol><li>waitStatus，等待状态。状态值可能为SIGNAL(-1)、CANCELLED(1)、CONDITION(-2)、PROPAGATE(-3)、0。</li><li>prev，队列中的前驱节点。</li><li>next，队列中的后继节点。</li><li>thread，线程对象</li><li>nextWaiter，</li></ol><h1 id="AQS实现——Mutex"><a href="#AQS实现——Mutex" class="headerlink" title="AQS实现——Mutex"></a>AQS实现——Mutex</h1><p>AQS框架使用了模板方法模式来实现自身功能，某个锁的实现通常要继承AQS并重写数个方法，因此脱离具体的锁去谈AQS是有些不切实际的。</p><div class="hljs"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MutexLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span> </span>{      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LOCK = <span class="hljs-number">1</span>;      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> UNLOCK = <span class="hljs-number">0</span>;      <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync = <span class="hljs-keyword">new</span> Sync();      <span class="hljs-meta">@Override</span>      <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>{          sync.acquire(LOCK);      }      <span class="hljs-meta">@Override</span>      <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>{          sync.acquireInterruptibly(LOCK);      }      <span class="hljs-meta">@Override</span>      <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span> </span>{          <span class="hljs-function"><span class="hljs-keyword">return</span> sync.<span class="hljs-title">tryAcquire</span><span class="hljs-params">(LOCK)</span></span>;      }      <span class="hljs-meta">@Override</span>      <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(<span class="hljs-keyword">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>{          <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;      }      <span class="hljs-meta">@Override</span>      <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>{          sync.release(UNLOCK);      }      <span class="hljs-meta">@Override</span>      <span class="hljs-keyword">public</span> <span class="hljs-function">Condition <span class="hljs-title">newCondition</span><span class="hljs-params">()</span> </span>{          <span class="hljs-function"><span class="hljs-keyword">return</span> sync.<span class="hljs-title">newCondition</span><span class="hljs-params">()</span></span>;      }      <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isLock</span><span class="hljs-params">()</span> </span>{          <span class="hljs-function"><span class="hljs-keyword">return</span> sync.<span class="hljs-title">isHeldExclusively</span><span class="hljs-params">()</span></span>;      }      <span class="hljs-comment">/** </span><span class="hljs-comment">     * 一般同步器都使用静态内部类去控制外部类的状态 </span><span class="hljs-comment">     */</span>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> </span>{          <span class="hljs-comment">/** </span><span class="hljs-comment">         * 独占模式 </span><span class="hljs-comment">         * * </span><span class="hljs-comment">         */</span>          <span class="hljs-comment">// 获取锁  </span>        <span class="hljs-meta">@Override</span>          <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>{              <span class="hljs-keyword">if</span> (compareAndSetState(UNLOCK, LOCK)) { <span class="hljs-comment">//状态为0的时候获取锁  </span>                setExclusiveOwnerThread(Thread.currentThread());                  <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;              }              <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;          }          <span class="hljs-comment">//释放锁  </span>        <span class="hljs-meta">@Override</span>          <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>{              <span class="hljs-keyword">if</span> (getState() == UNLOCK) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();              setExclusiveOwnerThread(<span class="hljs-keyword">null</span>);              setState(UNLOCK);              <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;          }          <span class="hljs-comment">//锁是否被占用  </span>        <span class="hljs-meta">@Override</span>          <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isHeldExclusively</span><span class="hljs-params">()</span> </span>{              <span class="hljs-keyword">return</span> getState() == LOCK;          }  <span class="hljs-comment">/*        //共享模式 </span><span class="hljs-comment">        @Override </span><span class="hljs-comment">        protected int tryAcquireShared(int arg) { </span><span class="hljs-comment">            return super.tryAcquireShared(arg); </span><span class="hljs-comment">        } </span><span class="hljs-comment"></span><span class="hljs-comment">        @Override </span><span class="hljs-comment">        protected boolean tryReleaseShared(int arg) { </span><span class="hljs-comment">            return super.tryReleaseShared(arg); </span><span class="hljs-comment">        }*/</span>          <span class="hljs-keyword">final</span> <span class="hljs-function">ConditionObject <span class="hljs-title">newCondition</span><span class="hljs-params">()</span> </span>{              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConditionObject();          }      }  }</code></pre></div><h1 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h1><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="acquire"><a href="#acquire" class="headerlink" title="acquire"></a>acquire</h2><p><img src="https://oss.kherrisan.cn/a89a145141c87e969ff8b307bb1d18e6.png" srcset="/img/loading.gif" alt></p><ol><li>tryAcquire，尝试直接获取锁。tryAcquire方法是子类实现的。以Mutex为例。</li></ol><div class="hljs"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span>          <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>{              <span class="hljs-keyword">if</span> (compareAndSetState(UNLOCK, LOCK)) { <span class="hljs-comment">//状态为0的时候获取锁  </span>                setExclusiveOwnerThread(Thread.currentThread());                  <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;              }              <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;          }</code></pre></div><p>通过CAS操作尝试修改锁状态，注意这个state状态是volatile的，没有做其他同步。 <img src="https://oss.kherrisan.cn/426c7493ece8b4de68444256c69df35a.png" srcset="/img/loading.gif" alt> 使用unsafe对象类进行CAS操作，成功返回true，失败为false。如果CAS修改成功了，将当前线程设为持有该锁的线程。这里设置持有线程并没CAS，因为只有一个线程能够执行这行代码，不会产生竞争。</p><ol><li>如果tryAcquire失败，说明这个时刻有其他线程持有锁了，如果锁是非共享的话，当前线程是无法获取锁的，先添加一个waiter，然后调用acquireQueued。</li></ol><p><img src="https://oss.kherrisan.cn/0d388868ea1d8690dc18b73aaf69c09f.png" srcset="/img/loading.gif" alt> 主体也是一个死循环（<strong>实际上这里就有点像自旋锁的旋转了</strong>）：</p><ol><li>如果刚刚插入的新节点的前驱节点是head，说明刚刚插入的新节点是队列里的第二个。这时候再tryAcquire一下试试，如果试成功了，那刚刚插入的新节点就是锁的持有者了，把他当成head，setHead方法只会有一个线程访问因此不需要CAS。</li><li>如果刚刚插入的新的节点不是第二个节点，或者他是第二个但是tryAcquire失败了，需要判断一下当前线程是否需要阻塞（park）。判断规则挺复杂： 2.1. 前驱节点为SIGNAL，说明应该阻塞。 2.2. 前驱节点状态>0，说明前驱节点状态为CANCELLED，从队列中删除掉前驱节点，并继续判断前驱的前驱。不要阻塞。 2.3. 前驱节点状态为其他（CONDITION、PROPOGATE），通过CAS把前驱节点状态设为SIGNAL。同样不要阻塞。</li><li>如果要阻塞，LockSupport.park来阻塞当前线程。唤醒当前线程可以通过3种方式： 3.1. unpark当前线程 3.2. interrupt当前线程 3.3. unsafe.park意外返回了！</li><li>线程不管通过哪种方式醒了，也不代表他可以拿到锁了，还是要进入循环中，判断是否是第二个节点并且tryAcquire的。</li></ol><p><img src="https://oss.kherrisan.cn/50c1a58ad4a28e0da82216dc6f06aff2.png" srcset="/img/loading.gif" alt> 从acquireQueued可以看出队列中线程的竞争有以下特点：</p><ol><li>只有第二个节点才有资格获得锁，第一个节点是正在持有锁的节点。</li><li>队列中线程的等待和争夺模式类似于自旋的概念，阻塞——>尝试获取——>阻塞——>尝试获取——>获取成功~。</li></ol><h2 id="release"><a href="#release" class="headerlink" title="release"></a>release</h2><p>从概念上来说，release操作应该比acquire操作简单一些。。。 <img src="https://oss.kherrisan.cn/9eb55c91d37eafb1e53659cb33e6ea76.png" srcset="/img/loading.gif" alt></p><ol><li>首先调用子类的tryRelease方法，直接设置状态为unlock即可，都不用CAS。如果tryRelease失败了的话，说明那个线程本来就没有拿到锁，是个非法调用。</li><li>拿到head节点，只要head存在并且head状态不为0，就通过unparkSuccessor唤醒他的后继节点。如果他刚刚tryRelease成功之后立刻有线程拿到锁，成为了头节点，那这时候头节点就不是这个释放锁的节点了。但还是要尝试唤醒一下这个节点（虽然他极有可能是拿不到锁的）。</li></ol><p><img src="https://oss.kherrisan.cn/8d547ef41afc3e63df08e02eb03a39c5.png" srcset="/img/loading.gif" alt> 如果这个节点的后继节点变为null了，或者状态时CANCLLED，就从tail节点开始沿队列往前找，直到找到一个状态不为CANCELLED的节点。唤醒这个节点上的正在沉睡的线程。</p><h1 id="简单的Mutex的加锁解锁过程总结"><a href="#简单的Mutex的加锁解锁过程总结" class="headerlink" title="简单的Mutex的加锁解锁过程总结"></a>简单的Mutex的加锁解锁过程总结</h1><h2 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h2><ol><li>首先尝试能否通过CAS操作直接设置锁标志位，如果成功，说明当前线程很轻易地抢到了锁，加锁结束。</li><li>如果失败，把当前线程封装到一个node对象里，尝试通过CAS操作将该node插入队列尾部。如果一次CAS失败，进入一个死循环，不停地检查队列是否为空，不停地尝试通过CAS将node插入队列尾部，直到成功。</li><li>进入正式等待的死循环，如果当前节点为第二个节点，说明有资格获取锁，通过CAS尝试修改锁标志位，如果成功，当前节点升级为头节点，加锁结束。</li><li>如果失败，判断当前节点是否需要睡眠。只要其前驱节点状态为SIGNAL，就说明需要睡眠，通过unsafe的park方法让当前线程睡眠。</li></ol><h2 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h2><ol><li>直接修改锁标志位，表示自己释放了锁。</li><li>调用LockSupport的unpark方法，唤醒他后继节点的线程。如果在唤醒之前发现他的后继节点为null了，就从tail往前找第一个状态不为CANCELLED的节点。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/794bdde7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——PriorityQueue</title>
      <link>http://www.kherrisan.cn/posts/ecb1842/</link>
      <guid>http://www.kherrisan.cn/posts/ecb1842/</guid>
      <pubDate>Fri, 05 Oct 2018 18:31:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/5e8210e35fb88ecb1fdf30acb61e0c78.png&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; Java中的优先队列采用的是最小堆的结构，即使用数组来保存一棵完全二叉树。&lt;strong&gt;无界&lt;/strong&gt;，可以自动扩容。用于比较的元素值必须是不可变的否则最小堆的性质会被破坏。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/5e8210e35fb88ecb1fdf30acb61e0c78.png" srcset="/img/loading.gif" alt> Java中的优先队列采用的是最小堆的结构，即使用数组来保存一棵完全二叉树。<strong>无界</strong>，可以自动扩容。用于比较的元素值必须是不可变的否则最小堆的性质会被破坏。</p><a id="more"></a><p> <img src="https://oss.kherrisan.cn/b969e51cd210f011a3bd6b8062a1e37b.png" srcset="/img/loading.gif" alt></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><ol><li>queue，一个Object类型的数组，这是保存完全二叉树的实体。</li><li>size，优先队列的大小。</li><li>comparator，比较器，优先队列有两种比较方式：直接传入comparator或者让元素继承comparable接口，大小关系由此确定。</li><li>modCount，修改次数，避免一边遍历一边修改的情况发生。</li></ol><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol><li>构造函数</li></ol><p><img src="https://oss.kherrisan.cn/1fe7802e49a2a44c3ef2f4c7c76cfc70.png" srcset="/img/loading.gif" alt> 第一个参数是初始化容量，默认是11，<strong>优先队列是本身是无界的</strong>，因此初始化容量并不是最大容量。第二个参数是一个比较器。</p><ol><li>offer</li></ol><p><img src="https://oss.kherrisan.cn/998f055c56e027ba9469f64dfd25a4f5.png" srcset="/img/loading.gif" alt> 向优先队列中插入一个元素。由于offer的语义是向队列尾部插入一个元素，但是优先队列的首尾顺序是依靠元素大小顺序的，因此这里offer就是简单的插入一个元素的意思。</p><ol><li>判断是否需要扩容，如果要的话就grow。判断的标准是数组有没有满。</li><li>如果数组为空的话，把元素放在第0位。</li><li>如果数组不为空，把元素放在最后一位，并shiftUp该元素使其上浮到路径上的正确位置。</li></ol><p>和教科书上的最小堆不一样，这个最小堆的第0位也是放东西的，这就说明第i个元素的父节点是（i-1）/2，子节点是2i+1和2i+2。</p><ol><li>grow</li></ol><p><img src="https://oss.kherrisan.cn/4cce5cea01ccdf0b5019a76c5a33966f.png" srcset="/img/loading.gif" alt> 扩容的过程贼简单，如果原先数组大小较小（比64小），就扩容一倍，否则扩容一半。然后Arrays.copyOf把原数组的元素复制到新数组即可。</p><ol><li>siftUp</li></ol><p>元素上浮可以使用comparator也可以使用comparable的compareTo方法，但如果即没有comparator又没有实现comparable接口的话是不行的。而不论用哪种方式来表大大小关系，上浮算法的过程都是一样的。 <img src="https://oss.kherrisan.cn/cb61a3363ccd546506cb98788c1d7c6a.png" srcset="/img/loading.gif" alt></p><ol><li>siftDown</li></ol><p><img src="https://oss.kherrisan.cn/c41422d0eef4943e049b6eba218cfea9.png" srcset="/img/loading.gif" alt> 和上浮不同的是，下沉的过程中每个元素可能往两个位置下沉：他的左子节点和右子节点。如果是最小堆的话，就要和两个子节点中的最小的元素交换位置，以此保证最小堆的性质。但同时又要注意有的节点没有右子节点。如果父节点比两个子节点中的最小节点还要小，那就不需要继续迭代了。</p><ol><li>heapify</li></ol><p><img src="https://oss.kherrisan.cn/fe367d5c7ebba6912b9d555d9509cb1a.png" srcset="/img/loading.gif" alt> 从二叉树的倒数第二层开始，每个节点进行下沉操作。</p><ol><li>poll</li></ol><p><img src="https://oss.kherrisan.cn/1f31843643155b3db11d404e15bf4f5b.png" srcset="/img/loading.gif" alt> poll的语义是从队列首部弹出一个元素，这里即为从最小堆中弹出一个最小的元素，在数组中，最小的元素就是第0位的元素。 把数组最后一个元素放到第0位，然后下沉。最后返回原来在第0位的元素。</p><ol><li>removeAt</li></ol><p><img src="https://oss.kherrisan.cn/e4578ad3f1c3db8e7fcd0496f258ee49.png" srcset="/img/loading.gif" alt> 删除数组中的第i位元素，这个方法主要是为了remove(object)方法服务的。</p><ol><li>修改modCount，size。</li><li>看删除的是不是最后一个元素，如果是的话，把最后一个设为null就行啦。</li><li>把最后一个元素放到第i位上，先下沉。</li><li>如果在上一步中最后一个元素不用下沉，那就说明该元素比它的两个子元素还要小，说不定比被删掉的元素还要小，出现这种情况的原因是最后一个元素不在原来第i个元素的子树中，这样他们的大小关系是不确定的。那就需要让现在的第i个元素上浮试一试了。</li><li>如果上浮成功了，就返回原先的最后一个元素，否则返回null。返回值主要是为了迭代器move方法服务的。</li></ol><h1 id="Itr迭代器"><a href="#Itr迭代器" class="headerlink" title="Itr迭代器"></a>Itr迭代器</h1><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><ol><li>cursor，下一次要返回的元素在数组中的位置。</li><li>lastRet，上一次next操作返回的元素在数组中的位置。</li><li>forgetMeNot，一个贼神奇的东西。。。</li><li>lastRetElt，上一次next操作返回的元素。</li><li>expectedModCount，修改次数。</li></ol><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><p><img src="https://oss.kherrisan.cn/9bd982b40e903e670d6f727ddd0734ad.png" srcset="/img/loading.gif" alt></p><ol><li>检查有没有发生并发修改错误。</li><li>如果cursor<size，就直接返回下一个元素。</li><li>如果cursor已经走到头了，那有两种情况： 3.1. 真的走到头了，所有元素都遍历过一次了，就抛出NoSuchElemetException。 3.2. 如果走到头了，但是上浮的元素没有被遍历过，就从forgetMeNot中取出一个元素，返回他。</li></ol><p>不论是普通系列，还是forgetMeNot中的序列，每次next之间都只能remove一次。</p><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p><img src="https://oss.kherrisan.cn/59384f64e44c67a6765cfea27c15617a.png" srcset="/img/loading.gif" alt></p><ol><li>检查有没有发生并发修改错误。</li><li>如果上一个返回的元素是有效的，不是-1，就用优先队列的removeAt方法删除该元素。lastRet变为-1，用于标识上一个返回的对象已经被删掉了，不存在了。 2.1. 如果removeAt方法返回的不是null，说明removeAt的删除过程中，最后一个元素被移动到了第i位，并且成功上浮了。如果还按照之前的规则一个一个向后遍历，那这个元素会被漏掉，这时候把这个元素加到forgetMeNot。 2.2. 如果返回是null，说明没有上浮，那就让cursor—，因为上一次next之后cursor等于i+1，这时把第i个元素删除，并把最后一个元素移到第i位，可能会下沉，但没有上浮，cursor需要从第i位开始。</li><li>如果lastRtn是-1，但是lastRtnElt不为null，说明上一个元素就是从forgetMeNot里取出来的，这个元素本来是最后一个元素，由于某次remove导致其上位而被加到了forgetMeNot中，现在遍历到了他，并且要把他删掉，于是调用优先队列的removeEq方法将其从堆中删除（这时没人知道他在数组的哪个位置，因为它上浮了，也许上浮了很多步）。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/ecb1842/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——HashTable</title>
      <link>http://www.kherrisan.cn/posts/212ef57b/</link>
      <guid>http://www.kherrisan.cn/posts/212ef57b/</guid>
      <pubDate>Fri, 05 Oct 2018 15:00:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-05-09_16-06-28.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; HashTable继承了Dictionary类，这个抽象类没有在HashMap中见到过。进入该Dictionary抽象类中，发现所有的方法都没有实现，而且和Map接口很相似。 初步浏览了一下HashTable，感觉比HashMap更轻量一些，同时额外地提供了同步机制（在方法之前加synchronized关键字，类似于Vector之于ArrayList）。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/Snipaste_2018-05-09_16-06-28.jpg" srcset="/img/loading.gif" alt> HashTable继承了Dictionary类，这个抽象类没有在HashMap中见到过。进入该Dictionary抽象类中，发现所有的方法都没有实现，而且和Map接口很相似。 初步浏览了一下HashTable，感觉比HashMap更轻量一些，同时额外地提供了同步机制（在方法之前加synchronized关键字，类似于Vector之于ArrayList）。</p><a id="more"></a><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><ol><li>Entry[]类型的table，用于存放散列bucket</li><li>count，计数</li><li>threshold，重哈希的阈值，如果某次操作是的count超过这个值，就重新散列</li><li>loadFactor，装载因子，衡量buckets的稀疏程度，数值上count*loadfactor=threshold，装载因子是可以人为规定的</li><li>modcount，修改次数，避免一边便利一边修改结果</li></ol><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h2><p><img src="https://oss.kherrisan.cn/198594764fd8a3073742d7dc3825e52e.png" srcset="/img/loading.gif" alt> 对于每一个bucket的每一个节点，根据equal的结果判断是否相等。</p><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><p><img src="https://oss.kherrisan.cn/733aee9734108a82dbadfdfc92ecba62.png" srcset="/img/loading.gif" alt> 与HashMap不同的是，HashTable的许多方法的key参数都不能为null。包括get和上面的contains。 首先将hashCode映射到buckets空间中，找到bucket，接着遍历链表，根据hash和equals判断是否相等。</p><h2 id="put"><a href="#put" class="headerlink" title="put"></a>put</h2><p><img src="https://oss.kherrisan.cn/c4a91c12029e0d1787efd34cc39876c6.png" srcset="/img/loading.gif" alt> 首先将hashCode映射到buckets空间中，找到bucket，接着遍历链表，根据hash和equals判断是否相等。如果相等，说明原来就有这个key，只要修改该节点的value，如果找不到，调用addEntry来添加该key-value对。</p><h2 id="addEntry"><a href="#addEntry" class="headerlink" title="addEntry"></a>addEntry</h2><p><img src="https://oss.kherrisan.cn/e3ce2928965d23892192f82e3f3d5752.png" srcset="/img/loading.gif" alt></p><ol><li>修改modCount，因为addEntry会改变HashTable的结构。</li><li>检查是否要rehash。如果要的话，会重新计算散列index。</li><li>直接将新的key-value封装到entry中，插入到链表的首位上。</li></ol><h2 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h2><p><img src="https://oss.kherrisan.cn/d667be502658a6fa7ce02fd2634d0e8d.png" srcset="/img/loading.gif" alt></p><ol><li>计算新的容量，扩容规则为oldCapacity<<1+1。</li><li>开辟新的buckets数组。</li><li>修改modCount，threshold，切换到新的buckets数组上（此时还是空的）。</li><li>遍历老的buckets的每个bucket，遍历每个bucket的每个节点，对每个节点重新计算散列index，插入到index对应bucket的首位上。</li></ol><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><p><img src="https://oss.kherrisan.cn/facc0b15f4599a2a37c32621576f81d5.png" srcset="/img/loading.gif" alt></p><ol><li>计算散列的index，找到对应bucket。</li><li>遍历bucket中每个节点，根据hash和equals判断是否相等，如果相等，就把该节点从链表中删除。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/212ef57b/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux——进程管理</title>
      <link>http://www.kherrisan.cn/posts/2b8650f6/</link>
      <guid>http://www.kherrisan.cn/posts/2b8650f6/</guid>
      <pubDate>Sun, 26 Aug 2018 18:36:06 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;进程（Process）是处于执行期程序以及其相关资源的总和，不仅仅局限于可执行程序代码，通常还包括其他资源如打开的文件、挂起的信号、内核内部数据、处理器的状态、一个或多个内存映射的内存地址空间以及一个或多个执行线程、全局变量数据段等。 在现代操作系统中，提供两种虚拟机制：虚拟CPU和虚拟内存，都给进程一种独占设备的假象。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>进程（Process）是处于执行期程序以及其相关资源的总和，不仅仅局限于可执行程序代码，通常还包括其他资源如打开的文件、挂起的信号、内核内部数据、处理器的状态、一个或多个内存映射的内存地址空间以及一个或多个执行线程、全局变量数据段等。 在现代操作系统中，提供两种虚拟机制：虚拟CPU和虚拟内存，都给进程一种独占设备的假象。</p><a id="more"></a><hr><h1 id="进程描述符"><a href="#进程描述符" class="headerlink" title="进程描述符"></a>进程描述符</h1><p>内核把进程存放在一个叫<strong>任务队列</strong>的双向链表中。链表中的每一个项的类型为<strong>task<em>struct</em></strong>_。task_struct结构体相对比较大，在32位机器上大约有1.7KB。</p><div class="hljs"><pre><code class="hljs routeros">struct task_struct{    unsigned long state;    int prio;    unsigned long policy;    struct task_struct *parent;    struct list_head tasks;    pid_t pid;    <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>}</code></pre></div><h2 id="pid和tpid"><a href="#pid和tpid" class="headerlink" title="pid和tpid"></a>pid和tpid</h2><p>pid是进程的唯一标识符，Linux中使用task_struct来表示进程和线程，为了能够表达多个线程从属于一个进程的意思，使用tpid来记录<strong>线程组</strong>的标号。某个进程的第一个创建的线程的pid和tpid相同，其后创建的线程的tpid为第一个线程的pid。</p><h2 id="内核栈"><a href="#内核栈" class="headerlink" title="内核栈"></a>内核栈</h2><p>一个进程在调用系统调用的时候，必然会陷入到内核态中，此时运行的代码所操作的栈不再是用户态的进程栈，而是一个内核栈。在内核栈的底部（从高地址生长的栈）存放了一个<strong>thread<em>info</em></strong>_，这个结构指向当前进程的task_struct，从而使系统能够高效地获取到当前进程的信息。 <img src="https://oss.kherrisan.cn/Snipaste_2018-08-26_14-31-03.png" srcset="/img/loading.gif" alt></p><hr><h1 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h1><p><img src="https://oss.kherrisan.cn/Snipaste_2018-08-26_14-47-35.png" srcset="/img/loading.gif" alt> Linux进程一般有5种状态</p><ol><li>RUNNING：进程在运行或者在运行队列中等待运行</li><li>INTERRUPTIBLE：可中断</li><li>UNINTERRUPTIBLE：不可中断</li><li>TRACED\STOPPED：被追踪\暂停，比如在用gdb调试的时候</li><li>DEAD：退出</li></ol><hr><h1 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h1><h2 id="fork系统调用"><a href="#fork系统调用" class="headerlink" title="fork系统调用"></a>fork系统调用</h2><ol><li>为新进程创建一个内核栈、thread_info和task_struct</li><li>检查当前用户有没有超出分配资源的限制</li><li>将统计信息清0或初始化</li><li>子进程变为UNINTERRUPTIBLE</li><li>分配一个pid</li><li>根据clone的参数，拷贝父进程的对应资源（文件、系统信息、信号处理函数、地址空间和命名空间等）</li><li>扫尾 传统的fork会拷贝所有父进程的所有资源，Linux使用了一种<strong>写时拷贝</strong>的技术：当fork时先只做浅拷贝（共享内存空间），当有数据需要写入内存空间时，再拷贝原内存空间副本给子进程，并做写入操作。这样，<strong>fork的职责就只剩下：复制页表、分配进程描述符</strong>。 Linux会倾向于让子进程先执行，因为他希望子进程能够尽快调用exec，这样就可以避免写时拷贝的开销。</li></ol><h2 id="vfork"><a href="#vfork" class="headerlink" title="vfork"></a>vfork</h2><p>在使用了写时拷贝的技术后，vfork与fork的区别就仅仅在于vfork不需要复制父进程页表。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>在Linux中，线程仅仅是进程进行共享资源的手段，他使用完全相同的task_struct结构来维护线程信息。因此创建线程就相当于分配新的task_struct。</p><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>可以通过clone的参数来指定创建线程时需要共享的资源：打开的文件、文件系统资源、信号响应程序等。 <img src="https://oss.kherrisan.cn/Snipaste_2018-08-26_15-11-54.png" srcset="/img/loading.gif" alt></p><h2 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h2><p>一些内核任务由内核线程执行，内核线程与普通线程的区别在于内核线程没有独立的地址空间，只在内核空间执行。他参与内核调度也参与内核抢占。 Linux内核程序是一个进程，其中的多个指令流分别运行在多个内核线程中。 常用的内核线程：</p><ul><li>kthreadd：管理调度其他内核线程</li><li>events：将软硬时间包装为event，并分发给感兴趣的线程</li><li>pdflush：脏页写回</li><li>kswapd0：回收内存</li></ul><h1 id="进程终结"><a href="#进程终结" class="headerlink" title="进程终结"></a>进程终结</h1><p>进程终结有两种情况：</p><ul><li>exit系统调用</li><li>接收到了不能处理但也不能忽略的信号或异常 进程退出时，一般会先释放内存空间资源，释放文件资源，设置退出代码，并向父进程发送退出的信号。此时进程还有内核栈、thread_info、task_struct这三样没有被释放，并且其状态变为ZOMBIE。</li></ul><p>进程终结时，内核必须释放他所占用的所有资源并且告知父进程。</p><ol><li>修改task_struct中的标志</li><li>删除任一内核定时器</li><li><p>释放mm_struct，如果这个地址空间计数变为0，则彻底释放这个地址空间。</p></li><li><p>分别递减文件描述符和文件系统数据的引用计数，如果计数变为0，则彻底释放。</p></li><li>设置task_struct的exit_code为exit提供的参数</li><li>向父进程发信号，给该进程的子进程重新找养父（找养父的规则是在终结进程的线程组中找存活的其他进程——即该进程是否还有存活的线程，如果没有，则选择init进程），线程状态变为ZOMBIE</li><li>schedule切换到新的进程</li></ol><p>在ZOMBIE状态中，进程所占有的资源只有内核栈、thread_info、task_struct，此时进程存在的唯一目的是向他父进程提供信息。</p>]]></content:encoded>
      
      
    </item>
    
    <item>
      <title>Orange&#39;S——学习笔记</title>
      <link>http://www.kherrisan.cn/posts/45017174/</link>
      <guid>http://www.kherrisan.cn/posts/45017174/</guid>
      <pubDate>Sat, 18 Aug 2018 21:47:33 GMT</pubDate>
      <description>
      
        &lt;p&gt;由于时间关系，不能够跟着书的进度自己一点点动手写出一个操作系统，因此想着先把书的内容过一遍，只要了解到OS底层运作思路即可。Orang’S下文简称为OS。&lt;/p&gt;
&lt;p&gt;启动和加载&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>由于时间关系，不能够跟着书的进度自己一点点动手写出一个操作系统，因此想着先把书的内容过一遍，只要了解到OS底层运作思路即可。Orang’S下文简称为OS。</p><p>启动和加载</p><a id="more"></a><p>=====</p><p>OS的启动和加载主要分为三个阶段。</p><ol><li>BIOS检查外部存储设备并加载boot模块。</li><li>boot模块从外部存储设备搜索并加载loader模块。</li><li>loader模块从外部存储设备搜索并加载kernel模块。运行kernel.bin，正式进入系统。</li></ol><p>由于BIOS对boot模块的大小有限制，只能有512字节，因此启动过程中的大部分操作都在loader中进行。</p><h2 id="Boot"><a href="#Boot" class="headerlink" title="Boot"></a>Boot</h2><p>Boot是最先被读取并被加载进入内存的部分，根据约定，Boot不能超过512字节，且最后两个字节作为引导记录的标志，必须为0xaa55，这样BIOS才能识别的到。在OS中，boot、loader、kernel都是存放在floppy中的，为了方便写入文件，并且降低搜索文件和加载文件的复杂度，loader和kernel都是作为普通的文件写入floppy，而floppy被预格式化为了FAT12文件系统，这样boot只要按照读写FAT12文件系统的逻辑运行就可以读到loader和kernel。</p><p>Boot流程：</p><ol><li>软驱复位</li><li>在根目录区，逐个读取条目，比对文件名，直到找到Loader.bin所在的扇区号（开始簇号）。</li><li>在FAT表1，根据开始扇区号，读取该扇区在FAT表中的条目（簇号），读取该簇号对应扇区的文件。</li><li>根据簇号读取该簇号（扇区号）在FAT表中的条目（另一个簇号），重复读取这样的链式结构，直到某个条目的簇号为结束标志符。</li><li>跳转到Loader的入口代码处，交出控制权。</li></ol><h2 id="FAT12文件系统"><a href="#FAT12文件系统" class="headerlink" title="FAT12文件系统"></a>FAT12文件系统</h2><p>FAT12文件系统将存储空间分为四块：引导区，FAT表1和FAT表2，根目录区，用户数据区。</p><p><img src="https://oss.kherrisan.cn/Snipaste_2018-08-18_18-42-39.png" srcset="/img/loading.gif" alt></p><p>在FAT文件表中，每个条目占12位（一个半字节），条目所在位置或者说条目在表中的索引为该扇区簇号，条目内容为该文件下一部分簇号。</p><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>Loader的功能如下：</p><ol><li>通过BIOS的15号中断（SMAP）读取总的内存空间大小。</li><li>以和Boot相同的方式，在floppy中定位到kernel.bin所在的位置，并加载到内存中。</li><li>启动保护模式的一系列操作：关中断，打开A20地址线，修改cr0寄存器的值，跳转到32位代码段。从此正式进入保护模式。</li><li>根据之前读到的内存空间大小，初始化足够的页目录和页表。</li><li>由于kernel.bin是ELF格式的，因此要重整kernel.bin在内存中的数据。</li><li>将控制权交给内核。</li></ol><p>Loader将内存组织为下面这样子：</p><p><img src="https://oss.kherrisan.cn/Snipaste_2018-08-19_10-40-31.png" srcset="/img/loading.gif" alt></p><h2 id="ELF文件格式"><a href="#ELF文件格式" class="headerlink" title="ELF文件格式"></a>ELF文件格式</h2><p>ELF是一种文件格式约定。对象文件有三类：</p><ol><li>可重定位文件。也就是.o文件。一个或多个.o文件可以被归档为一个静态库文件。</li><li>可执行文件。</li><li>可被共享文件。也就是.so动态库文件。</li></ol><p><img src="https://oss.kherrisan.cn/Snipaste_2018-08-19_11-45-09.png" srcset="/img/loading.gif" alt></p><p>上图中左侧为链接视图，右侧为运行视图。链接过程中以section为单位，运行过程中以segment为单位。整个文件可以分为4部分：</p><ol><li>ELF头部</li><li>program header table（程序头部表）</li><li>sections\segments</li><li>section header table（节头部表）</li></ol><p>ELF头部结构如下：</p><p>typedef struct {<br>    unsigned char e_ident[EI_NIDENT];     //一个数组，数组内容包括：魔数、32位/64位、大端/小端、文件版本等。<br>    ELF32_Half e_type;             //文件类型，可执行文件或者可重定向文件或者可共享文件<br>    ELF32_Half e_machine;             //架构<br>    ELF32_Word e_version;             //<br>    ELF32__Addr e_entry;             //可执行程序入口点地址<br>    ELF32_Off e_phoff;             //程序头部表地址<br>    ELF32_Off e_shoff;             //节头部表地址<br>    ELF32_Word e_flags;<br>    ELF32_Half e_ehsize;             //ELF头部大小<br>    ELF32_Half e_phentsize;         //程序头部表单个表项大小<br>    ELF32_Half e_phnum;             //程序头部表表项个数<br>    ELF32_Half e_shentsize;         //节头部表单个表项大小<br>    ELF32_Half e_shnum;             //节头部表表项个数<br>    ELF32_Half e_shstrndx;             //名称表的位置<br>}Elf32_Ehdr;</p><p>程序头部表结构如下：</p><p>typedef struct{<br>    Elf32_Word p_type;<br>    Elf32_Off p_offset;                //段相对于文件的偏移地址<br>    Elf32_Addr p_vaddr;                //段在内存中的虚拟地址<br>    Elf32_Addr p_paddr;                //段的物理地址<br>    Elf32_Word p_filesz;            //段在文件中的长度<br>    Elf32_Word p_memsz;                //段在内存中的长度<br>    Elf32_Word p_flage;<br>    Elf32_Word p_align;                //字节对齐<br>} Elf32_phdr;</p><p>节头部表的结构如下：</p><p>typedef struct{<br>    Elf32_Word sh_name;<br>    Elf32_Word sh_type;                //节区类型：程序定义、符号表、字符串表、重定位表等<br>    Elf32_Word sh_flags;<br>    Elf32_Addr sh_addr;<br>    Elf32_Off sh_offset;<br>    Elf32_Word sh_size;<br>    Elf32_Word sh_link;<br>    Elf32_Word sh_info;<br>    Elf32_Word sh_addralign;<br>    Elf32_Word sh_entsize;<br>}Elf32_Shdr;</p><p>常见系统节区：</p><ol><li>字符串表。类似于JVM字节码文件的常量表。只负责定义常量，其他地方如果要用到某个字符串常量只要通过索引即可。一般会有一个或者多个字符串表。</li><li>符号表。符号表格式相对复杂，每个符号表项约定了该符号的名字、值（某个具体值或者函数地址）、占用大小、可见性、类型（函数、变量、外部文件、某个节区）</li><li>代码段（.text）。符号表中会有字段指向代码段中的某个位置，来表示函数的代码。</li><li>全局偏移表（.got）。为了使得对全局变量的有效引用不依赖于实际的地址空间，因此为全局符号（静态函数或者变量）提供一个偏移量表。</li><li>过程链接表（.plt）。</li><li>哈希表。</li><li>数据段（.data .bss .rodata）。</li></ol><h1 id="段页式存储"><a href="#段页式存储" class="headerlink" title="段页式存储"></a>段页式存储</h1><p>逻辑地址经过分段转换变为线性地址，线性地址经过分页转换变为物理地址。段式存储是从逻辑上对内存的区域进行划分，以求对区域内内存的保护和管理，页式存储是从空间上对内存空间进行等分映射，目的在于控制内存分配粒度（外碎片）、虚拟地址空间。</p><h2 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h2><p>x86段表也成描述符表，有全局（GDT）和局部（LDT）两种描述符表，全局描述符表由内核管理，局部描述符表由进程管理。描述符表能够介入实模式中“段基址+段内偏移”的直接寻址模式，是一个中间步骤。</p><p>x86的段表项的结构如下：</p><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><p>每个表项占8个字节，其中占字节位数最多的是base和limit，由于某些历史上的原因，base和limit各自都不是连续地存放在表项中的。</p><ul><li>段基址共32位，4G，表示段的起点位置。</li><li>段界限共20位，表示段的长度，单位取决于G字段（1Byte或者4KByte）。</li><li>S为表示系统段、数据段。</li><li>DPL表示特权级，0、1、2、3。</li><li>P表示该段是否在内存中，和页表项的P位类似。</li><li>AVL位保留字段。</li><li>DB表示段的默认操作尺寸：16bit或者32bit。</li></ul><p>要引用某个段表项时，只需要指定段表项相对于表头的索引，即索引加1对应内存地址加8。索引不是数字，而是段选择子（selector）。段选择子的格式如下：</p><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage-1.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><ul><li>一个selector占16位。</li><li>高13位用于索引段表项。Index加1的话整个选择子的值增加8，正好对应每个段表项8个字节的特性。</li><li>TI位用于区分是GDT还是LDT。</li><li>RPL表示特权级，0、1、2、3。</li></ul><p>真正使用时，将选择子放入段寄存器中（CS、DS、SS等），硬件就会自动通过选择子找到对应的段表项，取得段表项的基址和界限，确认逻辑地址的段内偏移在界限内之后，通过基址+段内偏移得到线性地址。</p><p>系统通过GDTR寄存器来找到GDT的位置。</p><p>LDT相当于GDT的后级段表。</p><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage-2.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><p>LDTR寄存器存放某个选择子，系统会根据该选择子从GDT中选择某个段，然后将该段的基址和界限内的内存空间视为一张LDT，通过逻辑地址SELECTOR:OFFSET的SELECTOR选择段表项，通过OFFSET得到具体的线性地址。</p><p>使用LDT的好处是，只需要切换LDTR，就可以让相同的逻辑地址指向不同的线性地址。</p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>OS中使用页目录——页表组成的二级页表结构来将线性地址转换为物理地址。</p><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage-3.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><p>页目录项和页表项的结构大致相同：</p><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage-4.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><ul><li>Avail保留。</li><li>G位表示全局页，全局页表示当CR3加载时，该页目录项或者页表项也是有效的。</li><li>D位表示脏位。</li><li>A位表示是否被访问过。</li><li>PCD位表示单个页或者页表是否可以被缓冲。</li><li>U/S位表示特权级，与CPL（CR0中的WP位）一起共同控制读写权限。</li><li>R/W位表示读写权限，与CPL（CR0中的WP位）一起控制读写权限。</li><li>P位表示是否存在于内存中。如果不存在，会产生页错误。</li></ul><p>注意：多个页表并不需要连续存放，页表可以存在于内存中的任何位置。</p><p>系统通过CR3寄存器获得页目录基址。</p><h2 id="TSS（任务状态段）"><a href="#TSS（任务状态段）" class="headerlink" title="TSS（任务状态段）"></a>TSS（任务状态段）</h2><p>TSS可以看做一张表。</p><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage-5.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><p>TSS的用户：</p><ul><li>保存ring0、ring1、ring2的栈顶和堆栈段选择子。</li><li>通过JMP+TSS段选择子，可以一次性切换一堆寄存器（先保存当前寄存器值到TR指定的TSS，再用新的TSS中的寄存器值替换寄旧值）。GDT中可以存放多个TSS，引用TSS同样需要使用selector。</li></ul><p>据说设计TSS的初衷就是为了方便任务切换，但由于效率太低，因此已经被启弃用了。</p><h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1><p>中断本质上是一种事件处理机制。</p><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage-9.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage-6.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><p>OS保护模式下的中断的处理机制如下：</p><ol><li>由外部设备或者CPU产生触发中断，硬件会根据中断号在中断描述符表（IDT）中选择一个表项，IDT中存放的表项成为门描述符，有3种：中断门、陷阱门、任务门。</li><li>取出门描述符后，会进行一些检查：limit检查、权限检查。</li><li>从门描述符中读取段表选择子，判断是LDT还是GDT（依靠TI位）。</li><li>根据选择子从段表中读取代码段描述符，会进行一些检查：limit检查，权限检查。</li><li>段描述符的base+门描述符的offset得到中断处理程序的地址。</li></ol><p>x86提供了一些预制的中断和中断向量号。这些预制的中断能够保证在该事件发生时，硬件会根据中断向量号去调取相应的门描述符，但门描述符的内容需要操作系统自己去设置。还可以使用8259来处理新的外部中断。</p><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage-8.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><p>x86在进入中断处理程序之前，会把eflags、cs、eip、errorcode压栈，便于中断处理程序结束之后回到中断现场。</p><h1 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h1><p><img src="https://www.dokyme.cn/wp-content/uploads/2018/08/NewImage-10.png" srcset="/img/loading.gif" alt="NewImage" title="NewImage.png"></p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/45017174/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring——IOC流程概述</title>
      <link>http://www.kherrisan.cn/posts/e6be9c71/</link>
      <guid>http://www.kherrisan.cn/posts/e6be9c71/</guid>
      <pubDate>Tue, 07 Aug 2018 22:29:11 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;tiny-spring&quot;&gt;&lt;a href=&quot;#tiny-spring&quot; class=&quot;headerlink&quot; title=&quot;tiny-spring&quot;&gt;&lt;/a&gt;tiny-spring&lt;/h1&gt;&lt;p&gt;这是一个简化版的spring框架，模仿spring的思路实现了IOC和AOP的功能，是github上的一位开发者编写的。 &lt;a href=&quot;https://github.com/Dokyme/tiny-spring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Dokyme/tiny-spring&lt;/a&gt; 其实spring IOC的步骤并不复杂，和把大象装进冰箱的过程（三步）是基本一致的，也可以说成是两步，根据我的理解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取bean的xml配置文件，并解析每个bean的定义，及其属性。&lt;/li&gt;
&lt;li&gt;延迟bean的实例化，并根据依赖关系进行组装。&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="tiny-spring"><a href="#tiny-spring" class="headerlink" title="tiny-spring"></a>tiny-spring</h1><p>这是一个简化版的spring框架，模仿spring的思路实现了IOC和AOP的功能，是github上的一位开发者编写的。 <a href="https://github.com/Dokyme/tiny-spring" target="_blank" rel="noopener">https://github.com/Dokyme/tiny-spring</a> 其实spring IOC的步骤并不复杂，和把大象装进冰箱的过程（三步）是基本一致的，也可以说成是两步，根据我的理解：</p><ol><li>读取bean的xml配置文件，并解析每个bean的定义，及其属性。</li><li>延迟bean的实例化，并根据依赖关系进行组装。</li></ol><a id="more"></a><p>所用到的类文件如下： <img src="https://oss.kherrisan.cn/Snipaste_2018-08-07_20-20-34.png" srcset="/img/loading.gif" alt></p><h2 id="Resource和ResourceLoader"><a href="#Resource和ResourceLoader" class="headerlink" title="Resource和ResourceLoader"></a>Resource和ResourceLoader</h2><p>Resouce代表一种资源，在SpringWeb项目中最常见的就是XML文件，spring内部通过Resource接口定义了资源实体所需要提供的数据。在tiny中，Resource接口只有一个函数，那就是得到一个InputStream。 Resouce不是凭空产生的，不是由用户new出来的，而是通过ResourceLoader制造出来的。ResouceLoader接口定义了制造Resouce的方法。在tiny中，ResourceLoader接口也只有一个函数，是根据一个字符串地址制造出一个Resouce实例。 Resouce和ResourceLoader接口都需要具体的实现类去实现各自的逻辑，tiny中只实现了Url资源的Resouce和ResourceLoader，即根据字符串地址得到Url，再建立Url连接，得到InputStream。</p><h2 id="BeanDefinition和BeanDefinitionReader"><a href="#BeanDefinition和BeanDefinitionReader" class="headerlink" title="BeanDefinition和BeanDefinitionReader"></a>BeanDefinition和BeanDefinitionReader</h2><p>在spring中，万物皆为bean，bean指的是一个提供了默认构造函数、setter和getter方法的类，这个类可以是数据实体类，也可以是封装了一些逻辑操作的类。spring体系中使用xml文件来定义bean，一个bean节点通常包含名称（id），具体实现类，属性列表等。 BeanDefinition封装了xml中的bean节点，因此spring读取并解析xml文件后得到的就是一个BeanDefinition的列表。 读取xml并解析的过程则交给了BeanDefinitionReader接口，在tiny中BeanDefinitionReader接口提供了一个函数（loadBeanDefinition），其直接实现类AbstractBeanDefinition没有实现这个方法，但是给出了用于缓存bean的数据载体——一个Map<string,beandefinition>，还有一个ResouceLoader，即该抽象类约定了其子类必须将多个bean保存在这个map中，但如何读取并解析，根据怎样的顺序，是实时还是延迟，该抽象类并没有做出规定。 tiny中XmlBeanDefinitionReader集成了AbstractBeanDefinition类，并实现了BeanDefinitionReader接口所留下的load方法。该类借用了AbstractBeanDefinition所维护的ResouceLoader获得Resource的InputStream，进而读取该InputStream，默认使用XML解析器来解析这个文件。解析完成之后遍历得到的所有XML节点，针对每个节点，Reader取出他们的id，类名，并遍历该节点内部的Property列表，针对每个Property，取出name和value，或者ref。最后将该节点的所有信息填入BeanDefinition对象中。</string,beandefinition></p><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>如果说BeanDefinitionReader是做静态处理的话，BeanFactory所完成了bean组装就是动态的。BeanFactory负责对bean进行组装，包括组装的时机、方式、顺序的控制。在tiny中，BeanFactory是一个接口，这个接口只提供了一个方法getBean，根据名字返回一个bean实例。该接口的直接实现类AbstractBeanFactory没有完全实现getBean方法，而是给出了返回bean的逻辑：首先从map中找到对应bean的BeanDefinition，由于BeanDefinition是在最开始就初始化好的，所以如果找不到BeanDefinition，那肯定是异常情况。BeanDefinition对象除了维护bean的信息之外，还会维护该bean的实例，如果这个实例没有被初始化，name就根据该BeanDefinition创建一个bean实例并初始化；如果已经被初始化过了，那就直接返回。听起来有点像单例模式，实际上tiny中的bean都是singleton的，因此全程只维护一个实例。 BeanFactory根据BeanDefinition创建实例的过程很简单，只要从BeanDefinition中拿到类名，直接实例化即可。组装bean的过程稍微复杂一些，BeanDefinition会维护该bean的Property列表，如果该Property是基本类型的字面量，那就直接进行属性的赋值，如果是一个引用对象，并且该引用对象是另外一个bean的话，就通过getBean方法先得到那个bean，然后再赋值，当然得到该bean的过程可能也包含着创建和初始化的步骤。 需要注意的是，对于bean属性的赋值都是通过反射获取对应的setter方法进行处理的，而不是直接赋值或者通过反射修改属性的可见性后赋值。 在tiny中没有对循环依赖的情况进行判断和处理。</p><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>ApplicationContext接口继承了BeanFactory接口，因为其本质上也是负责进行bean组装的容器。在tiny中AbstractApplicationContext类实现了该接口，并持有一个BeanFactory对象，将getBean方法委托给BeanFactory，而自己负责将bean配置文件的加载、解析、注册过程结合起来，变为一个refresh函数。 ClassPathXmlApplicationContext类继承了AbstractApplicationContext，直接在构造函数里调用refresh函数，即在构造的时候进行一系列初始化操作，同时其规定了加载bean配置文件是通过xmlBeanDefinitionReader进行处理，并且逐个注册解析到的BeanDefinition。</p><h2 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h2><p>这个接口提供了两个方法来拓展bean初始化前后的操作，AbstractApplicationContext会将所有BeanPostProcessor类型的bean注册到beanFactory中去，当beanFactory初始化某个bean时，会调用该Processor的两个回调函数。 <img src="https://oss.kherrisan.cn/tinyspring.jpg" srcset="/img/loading.gif" alt></p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>以ClassPathXmlAppliationContext的初始化为例。</p><p>public class ClassPathXml {<br>    public static void main(String[] args) {<br>        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(“classpath:config.xml”);<br>        SimpleBean bean = applicationContext.getBean(SimpleBean.class);<br>        bean.hello();<br>    }<br>}</p><p>public class SimpleBean {<br>    public void hello() {<br>        System.out.println(“SimpleBean Hello”);<br>    }<br>}</p><p><?xml version=”1.0” encoding=”UTF-8”?></p><beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">    <bean id="simpleBean" class="com.testspringframework.bean.SimpleBean"></bean></beans>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/e6be9c71/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Dell XPS 9360上安装Ubuntu 18.04失败的情况</title>
      <link>http://www.kherrisan.cn/posts/befdb876/</link>
      <guid>http://www.kherrisan.cn/posts/befdb876/</guid>
      <pubDate>Thu, 05 Jul 2018 11:59:58 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;最近在我的xps 9360上安装Ubuntu18.04的时候出现这样一个问题：在硬盘分区完成之后，本来应该进入安装进度条，结果安装窗口突然变成了黑色，然后窗口自动消失，过了一分钟之后Ubuntu系统提示有一个crash。 后来经过搜索，找到了解决方案： &lt;a href=&quot;h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>最近在我的xps 9360上安装Ubuntu18.04的时候出现这样一个问题：在硬盘分区完成之后，本来应该进入安装进度条，结果安装窗口突然变成了黑色，然后窗口自动消失，过了一分钟之后Ubuntu系统提示有一个crash。 后来经过搜索，找到了解决方案： <a href="https://bugs.launchpad.net/ubuntu/+source/ubiquity/+bug/1751252" target="_blank" rel="noopener">https://bugs.launchpad.net/ubuntu/+source/ubiquity/+bug/1751252</a></p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/befdb876/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTTP协议详解</title>
      <link>http://www.kherrisan.cn/posts/b9e67ec1/</link>
      <guid>http://www.kherrisan.cn/posts/b9e67ec1/</guid>
      <pubDate>Sat, 30 Jun 2018 20:45:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;HTTP协议应该是如今互联网中使用范围最广的协议了。现在对HTTP协议进行一个全面的分析，力求能够把常用的协议功能都覆盖到。&lt;/p&gt;
&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;HTTP协议全名为超文本传输协议，英文名为Hypertext Transfer Protocol，不出意外也是一个外国人发明的网络传输协议。这个协议大概在1960年左右被构思出来，后来经过多方合作，不断地被修改和完善，最终进入RFC，成为互联网标准之一，应该是和TCP协议重要性相当的。  &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>HTTP协议应该是如今互联网中使用范围最广的协议了。现在对HTTP协议进行一个全面的分析，力求能够把常用的协议功能都覆盖到。</p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>HTTP协议全名为超文本传输协议，英文名为Hypertext Transfer Protocol，不出意外也是一个外国人发明的网络传输协议。这个协议大概在1960年左右被构思出来，后来经过多方合作，不断地被修改和完善，最终进入RFC，成为互联网标准之一，应该是和TCP协议重要性相当的。  </p><a id="more"></a><p><a href="https://tools.ietf.org/html/rfc1945" target="_blank" rel="noopener">RFC 1945 - HTTP1.0</a><a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">RFC 2616 - HTTP1.1</a>  </p><p>HTTP协议被广泛运用于浏览器访问Web网页的场景中，当然其灵活性也使得它能够在其他领域发挥优势比如API、RPC。</p><h2 id="1-1-协议栈"><a href="#1-1-协议栈" class="headerlink" title="1.1 协议栈"></a>1.1 协议栈</h2><p>如今互联网绝大多数主机使用的是TCP/IP协议，这个协议有5层，分别是：物理层、链路层、网络层、传输层和应用层，所谓的4G、5G、WIFI为物理层技术；链路层常用协议有以太网、X.25、令牌环等（实际上除了以太网之外其他的链路层协议都已经基本上不存在了，只是在计算机网络课上介绍过而已）；网络层协议为IP；传输层协议为TCP或UDP；到了应用层，协议就多种多样了，常用的有FTP、HTTP，任何一个基于Socket编写的应用程序都可以说是实现了一个应用层协议，或者说工作在应用层上。  </p><p><img src="https://oss.kherrisan.cn/Snipaste_2018-06-30_20-37-53.jpg" srcset="/img/loading.gif" alt></p><p>HTTP协议属于典型的应用层协议，其工作在应用层之上，屏蔽了TCP层的接口，同时应用程序可以直接使用HTTP协议进行通讯。虽然HTTP协议看起来不复杂，用起来也挺方便，但是要时刻记住它还是基于TCP/IP协议运作的，只是将下层的细节屏蔽了而已，但是真正运行起来它还是要遵循下层协议的规则，如TCP层的拥塞控制、IP层的报文分段（MSS）、IP寻址等等。  </p><p>如今将HTTP协议置于TLS层之上，变为HTTPS，也是一种较为流行的加密网络通讯协议。有关HTTPS协议的细节以后再谈，今天只看HTTP明文通讯。</p><h2 id="1-2-运作流程"><a href="#1-2-运作流程" class="headerlink" title="1.2 运作流程"></a>1.2 运作流程</h2><p>以浏览器地址栏输入www.baidu.com并回车为例，一次典型的HTTP协议通讯过程如下：  </p><p>1. 浏览器通过DNS协议解析得到baidu.com主机的IP地址（有关DNS的细节这里也不谈）。  </p><p>2. 浏览器于该IP地址建立TCP连接，即Socket连接，HTTP服务一般是运行在80端口上，即本地的一个随机端口和远程服务器的80端口进行连接，需要进行3次握手（SYN、SYN+ACK、ACK）。  </p><p>3. 在发送了三次握手的最后一次ACK报文之后，正式开始发送HTTP请求，这里可以先把请求理解为一个字符串，或者一个比特流，在该比特流外部包裹TCP头部、IP头部、以太网头部，然后经过网线发送给服务器。  </p><p>4. 服务器逐层拆包，得到真正的HTTP请求内容后，根据请求内容中的具体信息，从服务器的硬盘或者内存中读取HTTP请求中所明确的具体资源（百度首页的html文件）作为响应内容，再次以比特流的形式，逐层打包，返回给客户端浏览器。  </p><p>5. 浏览器逐层拆包，得到响应内容，经过浏览器渲染进而呈现出来。  </p><p><img src="https://oss.kherrisan.cn/Snipaste_2018-06-30_20-57-34.jpg" srcset="/img/loading.gif" alt></p><p>以上是使用浏览器访问www.sina.com的过程中与服务器之间往返的数据。可以看到第四个报文才是HTTP请求报文，三次握手大概用了0.1s的时间，从HTTP请求到收到响应大概用了0.26s的时间，延迟还是很小的。当然到了HTTPS，由于交换证书和协商密钥的需要，又要花费更多的时间来建立连接（2-3个RTT）。</p><h1 id="2-HTTP协议格式"><a href="#2-HTTP协议格式" class="headerlink" title="2 HTTP协议格式"></a>2 HTTP协议格式</h1><p>远程协议，最重要的就是协议格式，以太网、IP、TCP都有一套相当严格但又可扩展的格式，HTTP也有。</p><h2 id="2-1-请求-响应格式"><a href="#2-1-请求-响应格式" class="headerlink" title="2.1 请求/响应格式"></a>2.1 请求/响应格式</h2><p>请求和响应统称为HTTP消息，他们的格式其实这么形容：  </p><p><img src="https://oss.kherrisan.cn/Snipaste_2018-06-30_21-16-03.jpg" srcset="/img/loading.gif" alt></p><p>首先是一个开始行，然后是消息头（包含0个或多个，每个头部以回车换行结尾），接着是一个CRLF（回车换行），最后是消息体（可选）。  </p><p>消息头部中有一些头部字段是请求和响应都可以使用的，称为通用头部。</p><h3 id="2-1-1-通用头-GeneralHeader"><a href="#2-1-1-通用头-GeneralHeader" class="headerlink" title="2.1.1 通用头 GeneralHeader"></a>2.1.1 通用头 GeneralHeader</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-06-30_21-25-03.jpg" srcset="/img/loading.gif" alt></p><p>Cache-Control：指定缓存机制，请求和响应头中都可以使用该字段。请求头：no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached，响应头：public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。  </p><p>Connection：由于HTTP1.1默认使用长连接，因此如果要拒绝使用长连接，可以将该字段设为false。只要有一方的头部的false就不会使用长连接。  </p><p>Via：报文经过的中间节点，网关或者代理。  </p><p>Trailer：有一些字段的值可能是随着发送动态生成的，比如Expire，Date，Trailer允许指定某个字段的值被推迟到某个响应体的数据块的尾部。  </p><p>Upgrade：希望升级的协议信息。</p><h2 id="2-2-请求格式"><a href="#2-2-请求格式" class="headerlink" title="2.2 请求格式"></a>2.2 请求格式</h2><p><img src="https://oss.kherrisan.cn/Snipaste_2018-06-30_21-28-36.jpg" srcset="/img/loading.gif" alt></p><h3 id="2-2-1-请求行"><a href="#2-2-1-请求行" class="headerlink" title="2.2.1 请求行"></a>2.2.1 请求行</h3><h4 id="2-2-1-1-URI"><a href="#2-2-1-1-URI" class="headerlink" title="2.2.1.1 URI"></a>2.2.1.1 URI</h4><p>全名为统一资源定位符，明确指定了一个资源或者多个资源的所在的位置。URI可以是相对的也可以是绝对的，如之前访问sina的请求中URI就是相对的，即服务器根目录，而具体的主机地址则在请求头的Host字段中。</p><h4 id="2-2-1-2-Method"><a href="#2-2-1-2-Method" class="headerlink" title="2.2.1.2 Method"></a>2.2.1.2 Method</h4><p>如今流行一种成为Restful风格的后端API设计风格，这其中就充分利用了Method字段，Method字段描述了这个HTTP请求的动作意图，是查询数据（GET）、提交数据（POST），还是删除数据（DELETE），甚至是只请求响应的头部而不要响应体（HEAD）。从语义上来说Method字段并没有明确的规范，如果你同时负责了客户端和服务器端的开发，那你完全可以随意约定，只需要保证一致性即可。当然尽量符合语义来总归是好的。</p><h4 id="2-2-1-3-HTTP-Version"><a href="#2-2-1-3-HTTP-Version" class="headerlink" title="2.2.1.3 HTTP-Version"></a>2.2.1.3 HTTP-Version</h4><p>采用的HTTP协议的版本号，常用的有1.0、1.1、2.0，不同的版本号代表客户端可以接受的HTTP协议版本，版本越低功能越low。</p><h3 id="2-2-2-请求头-RequestHeader"><a href="#2-2-2-请求头-RequestHeader" class="headerlink" title="2.2.2 请求头 RequestHeader"></a>2.2.2 请求头 RequestHeader</h3><p>除了通用头部之外，请求头还可以使用如下字段：  </p><p><img src="https://oss.kherrisan.cn/Snipaste_2018-06-30_21-38-17.jpg" srcset="/img/loading.gif" alt></p><p>Accept：请求方希望接收的数据类型，常见的有text/html，application/json，以及通配符<em>/</em>。  </p><p>Expect：客户端在发起请求前可以在该字段中注明将要进行的操作，然后将这个请求发给服务器作为一个握手信息，等到服务器返回接受后再发送真正的请求。在POST大对象的时候常常使用此字段来避免传输无效的流量。  </p><p>Host：主机名。  </p><p>Range：请求方希望接收的是完整响应文件的某一段数据，那么可以通过该字段来指定第一个字节和最后一个字节的偏移，这个字段常常用于HTTP断点续传。  </p><p>Referer：从哪个链接过来的。服务器通过限制该字段可以防盗链。  </p><p>User-Agent：标识了浏览器相关信息。服务器可以通过该字段来判断访问的是PC还是移动设备，或者根据更加详细的信息来返回充分适配的网页资源。</p><h3 id="2-2-3-实体头-EntityHeader"><a href="#2-2-3-实体头-EntityHeader" class="headerlink" title="2.2.3 实体头 EntityHeader"></a>2.2.3 实体头 EntityHeader</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-07-31_13-45-00.jpg" srcset="/img/loading.gif" alt></p><p>Allow：严格限定该URL能够接受的method。  </p><p>Content-Encoding：编码方式，如gzip、x-gzip压缩。  </p><p>Content-Length：数据实体的大小，用十进制整数表示。注意这个数字是数据实体的大小，和是否压缩无关。  </p><p>Content-Type：数据实体的媒体类型，格式为 Type/SubType，如 text/html。  </p><p><img src="https://oss.kherrisan.cn/Snipaste_2018-07-31_13-53-09.jpg" srcset="/img/loading.gif" alt></p><p>Expires：一个时间。既然HTTP是一个远程协议，那就会出现分布式系统中一定会出现的数据一致性的问题。Expire字段用于标识该资源的有效期，客户端能够在该有效期内缓存该资源。  </p><p>Last-Modified：该资源上次被修改的时间，类似于文件属性的修改时间。当然如果资源实体的类型不同，也能够表示成别的意思，如某个数据表的某一行被修改的时间，某个实体的某个组件被修改的时间。</p><h3 id="2-2-4-请求体"><a href="#2-2-4-请求体" class="headerlink" title="2.2.4 请求体"></a>2.2.4 请求体</h3><p>请求也是可以</p><h2 id="2-3-响应格式"><a href="#2-3-响应格式" class="headerlink" title="2.3 响应格式"></a>2.3 响应格式</h2><p>响应格式其实和请求格式大同小异。  </p><p><img src="https://oss.kherrisan.cn/Snipaste_2018-07-31_14-10-34.jpg" srcset="/img/loading.gif" alt></p><h3 id="2-3-1-状态行"><a href="#2-3-1-状态行" class="headerlink" title="2.3.1 状态行"></a>2.3.1 状态行</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-07-31_22-24-20.jpg" srcset="/img/loading.gif" alt></p><p>响应报文的状态行的格式为HTTP版本+状态码+ReasonPhrase，  </p><p>其中最重要的就是状态码。  </p><p><img src="https://oss.kherrisan.cn/Snipaste_2018-07-31_22-26-26-1.jpg" srcset="/img/loading.gif" alt></p><p>RFC认为应用程序不必完全理解每一个状态码，但是必须能够区分状态码是什么类型的。</p><h3 id="2-3-2-响应头"><a href="#2-3-2-响应头" class="headerlink" title="2.3.2 响应头"></a>2.3.2 响应头</h3><h3 id="2-3-3-响应体"><a href="#2-3-3-响应体" class="headerlink" title="2.3.3 响应体"></a>2.3.3 响应体</h3><h1 id="3-字段重新整理"><a href="#3-字段重新整理" class="headerlink" title="3 字段重新整理"></a>3 字段重新整理</h1><p><img src="https://oss.kherrisan.cn/HTTP头部字段.png" srcset="/img/loading.gif" alt></p><h2 id="X-常见问题"><a href="#X-常见问题" class="headerlink" title="X 常见问题"></a>X 常见问题</h2><p>X.1 GET和POST有什么区别</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/b9e67ec1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Framework——概览及目录</title>
      <link>http://www.kherrisan.cn/posts/2591264a/</link>
      <guid>http://www.kherrisan.cn/posts/2591264a/</guid>
      <pubDate>Mon, 07 May 2018 18:49:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-08-06_10-45-57.png&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; SpringFramework由十多个模块组成，其中最最核心的模块有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Beans：包括BeanFactory，负责生成Java Bean&lt;/li&gt;
&lt;li&gt;Core：负责DI和AOP，重中之重。&lt;/li&gt;
&lt;li&gt;Context：管理web应用长下文。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目录： 1.&lt;a href=&quot;https://www.dokyme.cn/index.php/2018/08/07/spring-ioc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IOC&lt;/a&gt; 2.Resources 3.Validation, Data Binding, and Type Conversion 4.AOP&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/Snipaste_2018-08-06_10-45-57.png" srcset="/img/loading.gif" alt> SpringFramework由十多个模块组成，其中最最核心的模块有：</p><ol><li>Beans：包括BeanFactory，负责生成Java Bean</li><li>Core：负责DI和AOP，重中之重。</li><li>Context：管理web应用长下文。</li></ol><p>目录： 1.<a href="https://www.dokyme.cn/index.php/2018/08/07/spring-ioc/" target="_blank" rel="noopener">IOC</a> 2.Resources 3.Validation, Data Binding, and Type Conversion 4.AOP</p><a id="more"></a>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/2591264a/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaEE——JSP概览</title>
      <link>http://www.kherrisan.cn/posts/a85d6717/</link>
      <guid>http://www.kherrisan.cn/posts/a85d6717/</guid>
      <pubDate>Mon, 07 May 2018 18:24:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-05-07_18-25-12.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; JSP是基于Servlet和模板渲染技术发展出来的一种后端开发技术（虽然现在JavaEE说到底都是用的Servlet）。其原理非常简单，模板引擎解析JSP文件之后，将其中的Java对象取出，其余的字面常量统统放入print函数中，以最为淳朴的字符串连接的操作组成最终完整的响应，填充到servlet的对应函数中。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/Snipaste_2018-05-07_18-25-12.jpg" srcset="/img/loading.gif" alt> JSP是基于Servlet和模板渲染技术发展出来的一种后端开发技术（虽然现在JavaEE说到底都是用的Servlet）。其原理非常简单，模板引擎解析JSP文件之后，将其中的Java对象取出，其余的字面常量统统放入print函数中，以最为淳朴的字符串连接的操作组成最终完整的响应，填充到servlet的对应函数中。</p><a id="more"></a><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><ol><li>编译：惰性编译，只有在第一次请求的时候，被请求的JSP会被编译为包含一个Servlet的java源码文件，然后再编译为class字节码文件。</li><li>初始化：和Servlet的init方法一样，只初始化一次，常见的初始化操作有初始化一些变量、连接数据库、打开文件等。</li><li>执行：调用一个以HttpServletRequest和HttpServletResponse为参数的方法。</li><li>清理：和Servlet的destory方法一样。</li></ol><h1 id="九大对象"><a href="#九大对象" class="headerlink" title="九大对象"></a>九大对象</h1><p><img src="https://oss.kherrisan.cn/Snipaste_2018-05-07_18-36-41.jpg" srcset="/img/loading.gif" alt> 因为JSP和SSM的思路脱节太严重了，所以我也只想了解到这个深度了。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/a85d6717/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java——IO体系概览</title>
      <link>http://www.kherrisan.cn/posts/5088f3cd/</link>
      <guid>http://www.kherrisan.cn/posts/5088f3cd/</guid>
      <pubDate>Mon, 07 May 2018 16:53:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;java整个io包主要分为四块：字节流、字符流、File、RandomAccessFile。其中最复杂的是字节流和字符流两个簇，File和RandomAccessFile的功能较为单一。从名字可以看出，RandomAccessFile用于随机读写，字节流和字符流则用于顺序读写。 &lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-05-07_16-01-04.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>java整个io包主要分为四块：字节流、字符流、File、RandomAccessFile。其中最复杂的是字节流和字符流两个簇，File和RandomAccessFile的功能较为单一。从名字可以看出，RandomAccessFile用于随机读写，字节流和字符流则用于顺序读写。 <img src="https://oss.kherrisan.cn/Snipaste_2018-05-07_16-01-04.jpg" srcset="/img/loading.gif" alt></p><a id="more"></a><h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><p>字节流以字节为单位进行输入输出操作，也是JDK较早的版本中就存在的IO方式。字节流IO提供了两大接口InputStream和OutputStream，一个用于输入，一个用于输出。 输入是指从“外部”某个对象上读取数据到JVM内存中，这个对象可以是<strong>磁盘上的一个文件</strong>，可以是<strong>套接字</strong>，可以是另一个<strong>进程的标准输出</strong>，甚至也可以是一个本来就在这个进程的内存空间里的一个<strong>字节数组或者字符串</strong>。</p><h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><p>字节输入流的总接口，接口中规定了输入字节流的各种实现所需要提供的方法。接口中声明的方法只有寥寥数个。 <img src="https://oss.kherrisan.cn/Snipaste_2018-05-07_16-43-36.jpg" srcset="/img/loading.gif" alt> 由于是字节流，所以输入的最小单位是字节（Byte），但是read方法返回的是int，范围是0-255，如果读到了文件末尾，返回-1。不带参数的read方法返回的是一个字节，带参数的read方法将读到的数据直接填充进参数的byte数组中，返回的是实际读取的字节数，类似于Unix中的read方法。  </p><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><p>文件输入字节流，用于从一个外存中的文件读取数据。在FileInputStream的源码中可以看到很多出native关键字，说明读取数据的方法主要由C++调用本地接口实现的。 <img src="https://oss.kherrisan.cn/Snipaste_2018-05-07_16-50-51.jpg" srcset="/img/loading.gif" alt></p><h2 id="ByteArrayInputStream"><a href="#ByteArrayInputStream" class="headerlink" title="ByteArrayInputStream"></a>ByteArrayInputStream</h2><p>从一个字节数组中读取数据，这个字节数组实际上就是内存里的一个byte[]对象。常见的用法是这个样子的： <img src="https://oss.kherrisan.cn/Snipaste_2018-05-07_16-56-46.jpg" srcset="/img/loading.gif" alt></p><h2 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h2><p>是一个包装器流，能够将一个输入的字节流自动根据字节序解序列化，转换成开发人员所需要的对象或基本数据类型。当然转换成什么数据类型必须要在代码中自己指定，如果指定错了就会导致数据出现错误。 <img src="https://oss.kherrisan.cn/Snipaste_2018-05-07_17-14-47.jpg" srcset="/img/loading.gif" alt> 如上图所示，ObjectOutputStream读取基本数据类型或者变量需要提前知道输入流的结构。如果输入时不按照字节流的结构，很有可能会抛出异常。 直接读写对象时，要求对象实现Serializable接口。虽然这个接口只是一个标记接口，没有函数。而且序列化的方式完全由JVM决定，序列化之后的结果对于人来说是不可读的。 默认会把对象的所有字段都序列化，如果需要略过某些字段，可以添加transient修饰符。当然被序列化的对象中包含的其他对象的引用的话，也是会被序列化的。 反序列化不会调用对象的构造函数。</p><h2 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h2><p>是一个包装器流，在输入的时候提供一个缓冲。这个缓冲就是一个byte[]对象，默认大小为8k，最大大小为Integer.MAX_VALUE-8。 输入的时候，默认从缓冲中读取，如果缓冲中没有足够数据，就先把缓冲区填满，再读。</p><h2 id="DataInputStream"><a href="#DataInputStream" class="headerlink" title="DataInputStream"></a>DataInputStream</h2><p>类似于ObjectInputStream，能够提供一组与平台无关的函数来读取基本数据类型。至于ObjectInputStream和DataInputStream的区别：</p><blockquote><p>DataInput/OutputStream performs generally better because its much simpler. It can only read/write primtive types and Strings. ObjectInput/OutputStream can read/write any object type was well as primitives. It is less efficient but much easier to use if you want to send complex data. I would assume that the Object*Stream is the best choice until you <em>know</em> that its performance is an issue.</p></blockquote><p>意思就是，二者在读取基本数据类型的时候几乎没有区别。</p><h2 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h2><p>这是一个输出流，System.out,System.err就是PrintStream实例。PrintStream所提供的方法与其他几个输出流不太一样，除了write其他的都是print。 PrintStream提供格式化输出字符串的方法printf，此外也可以输出各种基本数据类型和引用类型对象。相比于ObjectOutputStream和DataOutputStream，PrintStream的方法更加简练，一个print就可以应对各种数据类型。 PrintStream有两大特征：不会抛出IOException；自动flush（遇到换行、\n、写byte[]）。</p><h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><p>为了解决国际化的问题，JDK在某个较新的版本中引入了字符流，由Reader和Writer两大簇组成。字符流不论输入和输出，基本单位都是字符，字符在Java中是Unicode字符集的，占2个字节。 字符流家族中很多类都是和字节流中某个类对应的。如BufferedInputStream和BufferedReader，FileOutputStream和FileWriter等。 因为输入输出的单位都是字符，因此（输入时）函数返回值和（输出时）函数传入参数都是char或者char[]或者String类型，其中也有int类型的，这个int的范围应该是0-2^16-1。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/5088f3cd/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JVM——垃圾收集（GC）和内存分配</title>
      <link>http://www.kherrisan.cn/posts/2118eccf/</link>
      <guid>http://www.kherrisan.cn/posts/2118eccf/</guid>
      <pubDate>Sun, 06 May 2018 11:04:37 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;GC日志&quot;&gt;&lt;a href=&quot;#GC日志&quot; class=&quot;headerlink&quot; title=&quot;GC日志&quot;&gt;&lt;/a&gt;GC日志&lt;/h1&gt;&lt;p&gt;JVM可以输出GC日志供开发者分析GC过程。 -XX:+PrintGC 输出GC日志 -XX:+PrintGCDetails 输出GC的详细日志 -XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式） -XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800） -XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息 -Xloggc:../logs/gc.log 日志文件的输出路径&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h1><p>JVM可以输出GC日志供开发者分析GC过程。 -XX:+PrintGC 输出GC日志 -XX:+PrintGCDetails 输出GC的详细日志 -XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式） -XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800） -XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息 -Xloggc:../logs/gc.log 日志文件的输出路径</p><a id="more"></a><h1 id="垃圾的定义"><a href="#垃圾的定义" class="headerlink" title="垃圾的定义"></a>垃圾的定义</h1><p>在Java中，要定义一个堆中的对象是垃圾的方法是判断是否通过全局中所有的引用都无法接触到这个对象，如果是，说明这个对象再也不可能被建立新的引用，即没有存在的意义，因为对象存在就是要被引用到。因此它就是个垃圾。</p><h1 id="引用计数（Reference-Counting）"><a href="#引用计数（Reference-Counting）" class="headerlink" title="引用计数（Reference Counting）"></a>引用计数（Reference Counting）</h1><p>引用计数是不可能引用计数的，这辈子是不可能引用计数的。引用计数无法解决循环引用的问题。</p><h1 id="可达性分析（Reachability-Analysis）"><a href="#可达性分析（Reachability-Analysis）" class="headerlink" title="可达性分析（Reachability Analysis）"></a>可达性分析（Reachability Analysis）</h1><p><img src="https://oss.kherrisan.cn/Snipaste_2018-05-06_11-14-44.jpg" srcset="/img/loading.gif" alt> 从一些被视为GC Root对象开始，从这些节点开始向下搜索，搜索经过的路径被称作引用链，如果一个对象到GC Roots没有任何引用链相连（不可达），就说明这个对象是个垃圾。 GC Roots包含以下几种对象：</p><ol><li>虚拟机栈中：引用对象（本地变量表）</li><li>方法区中：类静态属性引用的对象</li><li>方法区中：常量引用的对象</li><li>本地方法栈中：JNI引用的对象</li></ol><p>同时JVM更加细粒度地区分了引用的强弱：</p><ul><li>强引用：类似于Object obj=new Object();</li><li>软引用：有用但非必须的对象。被软引用的对象不会被首先考虑回收，只有在第一轮回收之后内存仍然可能溢出的时候才会将软引用的对象纳入回收范围。</li><li>弱应用：在下一次垃圾回收的时候都会被回收掉。</li><li>虚引用：虚引用对象对于对象的生命周期（何时被回收）不会产生任何影响，有时仅仅是为了使虚引用对象能够在被回收的时候收到系统的一个通知。</li></ul><p>需要注意的是，GC Roots实际上是一组被特殊对待的指针。没有任何对象能够引用GC Roots。</p><blockquote><p>GC Root在对象图之外，是特别定义的“起点”，不可能被对象图内的对象所引用。 一个常见的误解是以为GC Root是一组对象。 实际情况是GC Root通常是一组特别管理的指针，这些指针是tracing GC的trace的起点。它们不是对象图里的对象，对象也不可能引用到这些“外部”的指针，所以题主想像的情况无法成立。 另外，tracing GC能正确处理循环引用，保证每个活对象只会被访问一次就能确定其存活性。对象图里是否存在循环引用，tracing GC都能正确判断对象的存活与否。</p><p>作者：RednaxelaFX 链接：<a href="https://www.zhihu.com/question/29218534/answer/43580432" target="_blank" rel="noopener">https://www.zhihu.com/question/29218534/answer/43580432</a> 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="生存还是死亡"><a href="#生存还是死亡" class="headerlink" title="生存还是死亡"></a>生存还是死亡</h1><p>一个对象被回收需要经历两次标记过程：</p><ol><li>某次可达性分析发现该对象不可达。被标记后，JVM会将该对象加入到一个队列中，同时在一个优先级较低的线程运行该对象的finalize方法（但并不保证finalize方法会执行完成）。</li><li>对该队列中的对象做一次小规模的可达性分析，并标记不可达的对象。</li></ol><h1 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h1><p>由于和堆区性质不同，有很多人认为方法区的对象是不会被回收的，然而事实并不是这样。JVM规范中没有规定方法区一定要GC，但实际上，面对大量使用反射、动态代理等字节码技术，JVM是需要在方法区做GC的。 方法区垃圾回收的效率一般较低，远不如堆区每次能够释放百分之七十以上的空间。 方法区主要回收两部分内容：</p><ol><li>废弃的常量：标记的方法和堆区的变量类似。</li><li>无用的类：一个类是无用的有三个条件：该类所有实例都已经被回收；ClassLoader已被回收；Class对象没有在任何地方被引用，也无法再任何地方通过反射获取。当满足这三个条件，则说明该类可以被回收，但是否会采取措施进行回收还是要看JVM的参数。</li></ol><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><h2 id="标记-清除（Mark-Sweep）"><a href="#标记-清除（Mark-Sweep）" class="headerlink" title="标记-清除（Mark-Sweep）"></a>标记-清除（Mark-Sweep）</h2><p>这是最原始也是最基础的方法，先扫描内存空间中的所有对象，对其中应该回收的进行标记。然后释放所有被标记对象所占用的空间。 两个缺点：</p><ol><li>效率不高。</li><li>会在内存空间产生大量的不连续的碎片。</li></ol><h2 id="复制（Copying）"><a href="#复制（Copying）" class="headerlink" title="复制（Copying）"></a>复制（Copying）</h2><p>将内存分为两块，每次只使用其中的一块。当被使用的块发生了GC之后，将其中剩余的对象复制到另一个块中，同时紧密排列存活的对象。 这样做的优点是对内存的空间管理（已用部分和剩余部分）非常简单易操作。缺点是牺牲了一半的内存空间的可用性。 实际应用中，新生代都是使用这种方法进行垃圾收集的。而且有聪明的人发现，新生代中，98%的对象的生命周期非常的短暂。因此可以采取如下做法： <img src="https://oss.kherrisan.cn/Snipaste_2018-05-06_13-27-10.jpg" srcset="/img/loading.gif" alt> 如上图所示，新生代被分成三个部分，一个较大的区域名为Eden，另两个较小的且大小相等的区域名为Survivor。每次使用Eden和其中一块Survivor，当发生GC后，将Eden和Survivor中的存活对象复制到另一个Survivor中，最后清理掉Eden和Survivor中用过的空间。</p><h2 id="标记-整理（Mark-Compact）"><a href="#标记-整理（Mark-Compact）" class="headerlink" title="标记-整理（Mark-Compact）"></a>标记-整理（Mark-Compact）</h2><p>在标记-清除的基础上，每次GC后重新排列存活的对象，使其位于内存的一端。</p><h2 id="分代收集（Generational-Collection）"><a href="#分代收集（Generational-Collection）" class="headerlink" title="分代收集（Generational Collection）"></a>分代收集（Generational Collection）</h2><p>其实这只是一种内存分配规划思路，将内存分为新生代和老年代，对于不同的代采取不同的垃圾收集算法。</p><h2 id="垃圾回收分类"><a href="#垃圾回收分类" class="headerlink" title="垃圾回收分类"></a>垃圾回收分类</h2><ul><li>MinorGC（新生代GC）</li><li>MajorGC/FullGC（老年代GC）</li></ul><h1 id="HotSpot算法实现"><a href="#HotSpot算法实现" class="headerlink" title="HotSpot算法实现"></a>HotSpot算法实现</h1><h2 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h2><p>要做GC扫描的话，就需要从每个GC Root出发，追踪所有引用的对象。可作为GC Roots的对象主要是方法区的常量或类静态属性，以及栈中的局部变量表，因此如何高效的表里局部变量表也是十分重要的。 为了避免在整个方法区或者栈中遍历寻找GC Roots，JVM维护了一个表（Oopmap），这个表记录了在方法区和栈中哪个位置存放了对象的引用。这样JVM扫枚举根节点时，只需要遍历Oopmap即可，大幅度降低了枚举的工作量。 在我看来，Oopmap有点像是一个对一个范围内所有引用对象的快照。</p><h2 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h2><p>由于在程序执行过程中，对象的引用关系随时可能发生变化，因此Oopmap也会随时发生变化。JVM不会实时更新Oopmap，因为这样对性能的消耗会非常的大，因此JVM只选择在特点的位置更新Oopmap到最新状态，同时可能进行GC。这些位置就是安全点。 安全点的选择基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的，如方法调用、循环跳转、异常跳转等。</p><h2 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h2><p>安全区域是指，在一段代码区域内，引用关系不会发生变化。相当于扩展的安全点。 根节点枚举是GC操作的必要步骤，同时进行根节点枚举必须在一个确保一致性的快照中，这就是GC需要停顿所有执行线程进行根节点枚举的原因。</p><h1 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h1><blockquote><p>![](<a href="https://www.dokyme.cn/wp-content/uploads/2018/05/JavaGC.png" target="_blank" rel="noopener">https://www.dokyme.cn/wp-content/uploads/2018/05/JavaGC.png</a>) <strong>按线程</strong> 单线程：Serial、SerialOld 多线程：ParNew、Parallel Scavenge、Parallel Old、CMS、G1 <strong>按适用代</strong> 新生代: Serial、ParNew、Parallel Scavenge 老年代: SerialOld、CMS 、Parallel Old G1可以在新生代和老年代使用 <strong>常见的组合</strong> ParNew+CMS Parallel Scavenge+Parallel Old</p><p>作者：王常贵 链接：<a href="https://www.zhihu.com/question/21535747/answer/18548071" target="_blank" rel="noopener">https://www.zhihu.com/question/21535747/answer/18548071</a> 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h2 id="CMS（Concurrent-Mard-Sweep）收集器"><a href="#CMS（Concurrent-Mard-Sweep）收集器" class="headerlink" title="CMS（Concurrent Mard Sweep）收集器"></a>CMS（Concurrent Mard Sweep）收集器</h2><p><img src="https://oss.kherrisan.cn/Snipaste_2018-05-06_20-25-53.jpg" srcset="/img/loading.gif" alt> 四个步骤：</p><ol><li>初始标记（initial mark）：Stop The Word，并标记GC Root直接引用的对象，并做标记。这一步很快。</li><li>并发标记（concurrent mark）：恢复执行线程，同时继续追踪各个引用路径，完成可达性分析。</li><li>重新标记（remark）：Stop The Word，修正前一个阶段中标记产生变动的对象的标记记录。</li><li>并发清除（concurrent sweep）：恢复执行线程，同时进行垃圾清除操作。</li></ol><p>缺点： 1. 对CPU资源敏感 2. 由于在并发清除阶段没有stop the world，因此无法应对“浮动垃圾”，即标记结束之后新产生的垃圾 3. 基于清除算法，会产生大量碎片</p><h2 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h2><p>四个步骤：</p><ol><li>初始标记（initial mark）：同CMS。</li><li>并发标记（concurrent mark）：同CMS。</li><li>最终标记（final mark）：同CMS的重新标记</li><li>筛选回收（live data counting and evacuation）：对各个region的回收价值和所需时间（也就是性价比hhhhh）进行评估，排序，然后根据用户能够接受的GC停顿时间来指定回收计划。</li></ol><p>G1和CMS最大的区别在于，G1将内存区域分为很多个region，对每个region的GC性价比进行评估，并维护一个GC优先列表。 找到了一个详细介绍G1垃圾回收过程的网站。</p><h3 id="对于新生代对象"><a href="#对于新生代对象" class="headerlink" title="对于新生代对象"></a>对于新生代对象</h3><p>很简单，把Eden和Survivor中的对象做标记复制，复制到另一个Survivor或者提升到老年代中。需要Stop the World。 <img src="https://oss.kherrisan.cn/Snipaste_2018-05-06_20-38-03.jpg" srcset="/img/loading.gif" alt></p><h3 id="对于老年代对象"><a href="#对于老年代对象" class="headerlink" title="对于老年代对象"></a>对于老年代对象</h3><p>首先，初始标记，标记所有GC Roots直接关联的对象。实际上这一步是在新生代GC的过程中顺带着做的。需要Stop the World。 <img src="https://oss.kherrisan.cn/Snipaste_2018-05-06_20-50-38.jpg" srcset="/img/loading.gif" alt></p><h3 id="G1的优势"><a href="#G1的优势" class="headerlink" title="G1的优势"></a>G1的优势</h3><ol><li>分代收集</li><li>空间整合，不会存在碎片</li><li>可预测的停顿时间</li></ol><h1 id="内存分配与回收"><a href="#内存分配与回收" class="headerlink" title="内存分配与回收"></a>内存分配与回收</h1><p>其实内存分配的策略并不是一成不变的，不同的收集器组合可能会采用不同的内存分配规则。</p><h2 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h2><p>对象会优先在Eden区分配，如果Eden区空间不足，会触发一次minor GC。</p><h2 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h2><p>因为新生代采用复制算法收集内存，如果新生代中有很多大对象，那复制就会很费时间，因此大对象直接放入老年代，使用标记清除或者标记整理算法更合适一些。</p><h2 id="长期存活的对象进入老年代"><a href="#长期存活的对象进入老年代" class="headerlink" title="长期存活的对象进入老年代"></a>长期存活的对象进入老年代</h2><p>JVM记录每个新生代对象的年龄（age），每经过一次minor GC，age加一，当超过一定值的时候，就会被提升到老年代。</p><h2 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h2><p>如果survivor空间中某个年龄的所有对象的所占的大小大于survivor空间大小的一半，年龄大于等于该年龄的对象就可以提升到老年代中。全体晋升。</p><h2 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h2><p>在MinorGC时，会先检测老年代最大可用的连续空间是否大于新生代所有对象总空间。如果不成立，检查历次晋升到老年代对象的平均大小是否大于老年代最大可用连续空间，如果小于，则进行一次MinorGC，如果大于，进行FullGC。 担保失败后只能进行FullGC，回收老年代空间。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/2118eccf/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaEE——Servlet总结</title>
      <link>http://www.kherrisan.cn/posts/d1de75a8/</link>
      <guid>http://www.kherrisan.cn/posts/d1de75a8/</guid>
      <pubDate>Tue, 01 May 2018 15:54:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;谈到JavaEE，虽然如今绝大部分场合使用的都是SSH、SSM等框架，但这些都是基于Servlet技术所做的进一步发展，也就是说底层实现还是servlet，只是做了针对业务需求做了进一步的封装，使得开发人员能够更加有针对性的、更加高效的编写代码。这里稍微总结一下servlet技术的几个重要概念。 从没有在实际项目过程中使用过servlet，因此这里就从一个开发者的角度来考虑几个问题。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>谈到JavaEE，虽然如今绝大部分场合使用的都是SSH、SSM等框架，但这些都是基于Servlet技术所做的进一步发展，也就是说底层实现还是servlet，只是做了针对业务需求做了进一步的封装，使得开发人员能够更加有针对性的、更加高效的编写代码。这里稍微总结一下servlet技术的几个重要概念。 从没有在实际项目过程中使用过servlet，因此这里就从一个开发者的角度来考虑几个问题。</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Servlet是Java中一系列对象的统称，也可以说是一个标准，也可以说是java中的一个借口（interface）。</p><h2 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h2><p>和JDBC一样，Servlet规定了Java Web Server程序所需要的输入数据、输出数据的规范，遵守该规范的程序能够在常用的Servlet容器如Tomcat中运行。类比于JDBC规范，Servlet就是JDBC，在JDBC中，编写Java程序进行数据库的增删改查操作的函数接口都由JDBC规范约定好了，同一个Java程序可以应用于不同的数据库DBMC，只需要切换驱动即可；在Servlet中，Servlet容器也可以随意更换，编写的Servlet类是可以处处运行的。而Tomcat等容器对应于各种DBMS如MySQL、Oracle及其驱动。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>开发人员编写Servlet程序是以自定义类并覆盖抽象类，或实现接口，这两种形式进行的。在运行时，类在容器中被实例化为对象，容器负责管理对象的生死存亡，负责向servlet对象中传入参数或接收返回值。 以HttpServlet为例，servlet对象被实例化后存活于容器中，每当有HTTP请求进入容器，容器会将该请求报文封装为一个HTTP请求对象（该请求对象也要符合Servlet标准），传入对应的Servlet中，Servlet根据请求内容采取操作，最后返回一个HTTP响应对象，该响应对象经容器序列化为响应报文，返回给客户端。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>既然是标准，那肯定要有interface。 <img src="https://oss.kherrisan.cn/v2-85bf84640fbc6b6e195b9c5b513b918f_hd.jpg" srcset="/img/loading.gif" alt></p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><img src="https://oss.kherrisan.cn/Snipaste_2018-04-30_20-27-04.jpg" srcset="/img/loading.gif" alt> Servlet的生命周期比较简单，过程中经历的函数也不是很多。</p><ol><li><ol><li><ol><li>Servlet会被惰性初始化（或者在容器启动时初始化，取决于配置），即在容器在处理某个请求的时候检查其需要的Servlet是否存在，如果不存在，载入该Servlet类，实例化，运行init方法，读入一些初始化参数。</li><li>在某个请求到来的时候，会运行servlet的service方法，并传入相关参数。这些参数由容器打包。servlet处理结束之后，其第二个参数——response会被容器提取，并返回给客户端。每个请求都会运行service方法。</li><li>由容器决定何时销毁servlet（就像JVM垃圾回收一样），销毁时执行destroy方法，释放资源。一般是容器关闭的时候销毁。</ol start=”1.”></li></ol></li></ol></li></ol><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>Servlet并不是单例，即允许实例化多个对象，尽管其在大多数情况下只有一个对象。一个servlet声明对应一个对象，声明多次就有多个。</p><blockquote><p>For a servlet not hosted in a distributed environment (the default), the servlet container must use only one instance per servlet declaration. 如果 servlet 不是在分布式环境下（默认），servlet 容器必须使一个 servlet 实例对应一个 servlet 声明。 However, for a servlet implementing the SingleThreadModel(Deprecated) interface, the servlet container may instantiate multiple instances to handle a heavy request load and serialize requests to a particular instance. 然而，实现了 SingleThreadModel 接口的 Servlet，可以有多个实例。以处理繁重的请求，并且序列化 request 到特定的 servlet 实例。</p></blockquote><p>在面对并发的情况时，servlet对象会运行在多线程环境中。即一个servlet对象会被多个线程共享，每个线程可能对应于一个HTTP连接（线程的复用机制取决于容器）。在service方法内部的局部变量不会受线程切换而影响，但是如果servlet类中定义了实例变量，那么就有可能造成线程的冲突。 因此要避免在servlet中定义实例变量，或者手动同步，不过手动同步可能会影响处理性能。</p><h1 id="过滤器（Filter）"><a href="#过滤器（Filter）" class="headerlink" title="过滤器（Filter）"></a>过滤器（Filter）</h1><p>和servlet对象一样，过滤器概念也是来自于servlet标准，即如果我按照标准编写并配置了一个过滤器，那么容器就必须将该过滤器实例化并装载在合适的位置，对于HTTP请求进行过滤。</p><h2 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h2><p>和servlet类似，有init和destroy阶段，只初始化一次。初始化时机在servlet初始化之前，销毁于servlet之后。对应于servlet的service方法，filter有一个doFilter方法，表示在过滤HTTP请求时采取该行为。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>直接上代码吧，理解起来没什么难度。这是一个处理字符编码的过滤器。</p><filter>      <filter-name>setCharacterEncoding</filter-name>      <filter-class>com.company.strutstudy.web.servletstudy.filter.EncodingFilter</filter-class>      <init-param>          <param-name>encoding</param-name>          <param-value>utf-8</param-value>      </init-param>  </filter>  <filter-mapping>      <filter-name>setCharacterEncoding</filter-name>      <url-pattern>/*</url-pattern>  </filter-mapping>  如果声明了多个servlet对象，HTTP请求入站过程经过过滤器的顺序为从上到下。模式--一个HTTP可能会经过多个filter，filter的组装顺序和过滤控制是可以调整的。容器会自动把声明的过滤器组装在一个filterChain对象里面，在某个过滤器的doFilter方法中，如果想要让该请求进入下一个过滤器，就需要调用`chain.doFilter`方法。最后一个过滤器调用该方法把请求直接传给servlet对象。监听器（Listener）=============监听器，顾名思义，就是监听某个事件发生并采取相应行动的组件。 监听器能够监视三类对象，ServletContext、HttpSession、ServletRequest，监听这三类对象的监听器的抽象类类名和接口名也不同：1.  1.  1.  1.  监听应用上下文：ServletContextListener            2.  监听用户会话：HttpSessionListener            3.  监听请求：ServletRequestListener![](https://oss.kherrisan.cn/Snipaste_2018-05-01_15-28-55.jpg) 每种监听器都有数个类似的方法，如监听对象的创建、销毁事件，增加、修改、删除某个属性的事件。有的监听器会有一些独特的方法。这里不详细解释每个监听器的原型。配置--<listener>    <listener-class>cn.itcast.web.listener.MyServletContextListener</listener-class></listener>  如果在web.xml中声明了多个监听器，那么这些监听器会按照声明的顺序注册到相应对象中。上下文（Context）============容器启动后，会为每个web应用创建一个context，只要不关闭容器或者卸载该web应用，context就不会被销毁。servlet之间通过context来通信，servlet也可以通过context来获取全局的资源文件等。配置--<?xml version="1.0" encoding="UTF-8"?><web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app\_4\_0.xsd" version="4.0" metadata-complete="true"><!--配置和映射Servlet--><!--配置Servlet--><servlet>       <servlet-name>FristServlet</servlet-name>       <servlet-class>com.hello.com.FristServlet</servlet-class></servlet><!--映射Servlet -- ><servlet-mapping>         <servlet-name>FristServlet</servlet-name>         <url-pattern>/test</url-pattern>     </servlet-mapping>  </web-app>  servlet和filter都是通过mapping-url来标识是否要选择此servlet或filter的，而监听器则是对于每个对象都会无条件绑定。Web.xml=======web.xml是Jave Web应用程序所使用的配置文件，虽然它并不是必须的。web.xml中可以定义上文所提及的servlet、listener、filter对象，每种对象可以定义一个或多个，并通过xml语法指定他们的属性。定义和加载顺序-------在web.xml中，servlet、listener、filter的定义顺序是随意的，但是Tomcat只会按照规定的顺序加载他们： Listener->Filter->Servlet 可以这么理解：Listener中有一个ContextListener用于监听ContextInitialize时间，由于该项目一启动就会有一个ApplicationContext，因此为了监听到这个事件就必须要在最前面初始化。Servlet是惰性初始化的，所以排在最后。运作流程----![](https://oss.kherrisan.cn/invfilt.gif) 当一个web请求到来时，首先在在该请求上注册监听器（只有针对于请求的监听器才会再此时注册，针对其他对象的监听器在其他时刻注册，因为说不定其他对象还没有实例化呢），然后经过多个过滤器，最终到达servlet。  实验--<?xml version="1.0" encoding="UTF-8"?><web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xmlns="http://java.sun.com/xml/ns/javaee"         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app\_2\_5.xsd"         version="2.5">    <filter>        <filter-name>MyFilter</filter-name>        <filter-class>com.testwebxml.MyFilter</filter-class>        <init-param>            <param-name>name</param-name>            <param-value>FirstFilter</param-value>        </init-param>    </filter><div class="hljs"><pre><code>&lt;filter-mapping&gt;    &lt;filter-name&gt;MyFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;filter&gt;    &lt;filter-name&gt;MySecondFilter&lt;/filter-name&gt;    &lt;filter-class&gt;com.testwebxml.MyFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;name&lt;/param-name&gt;        &lt;param-value&gt;SecondFilter&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;listener&gt;    &lt;listener-class&gt;com.testwebxml.MyServletContextAttritubeListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;listener&gt;    &lt;listener-class&gt;com.testwebxml.MyServletContextListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;listener&gt;    &lt;listener-class&gt;com.testwebxml.MyServletRequestListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;listener&gt;    &lt;listener-class&gt;com.testwebxml.MyHttpSessionActivationListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;listener&gt;    &lt;listener-class&gt;com.testwebxml.MyHttpSessionListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;servlet&gt;    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.testwebxml.MyServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet&gt;    &lt;servlet-name&gt;MyHttpServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.testwebxml.MyHttpServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;MyHttpServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/http/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre></div><p>&lt;/web-app&gt;</p><p>项目启动时</p><p>[2018-08-06 10:32:26,102] Artifact test: Artifact is being deployed, please wait…<br>Connected to server<br>[com.testwebxml.MyServletContextAttritubeListener][<init>]<br>[com.testwebxml.MyServletContextListener][<init>]<br>[com.testwebxml.MyServletRequestListener][<init>]<br>[com.testwebxml.MyHttpSessionActivationListener][<init>]<br>[com.testwebxml.MyHttpSessionListener][<init>]<br>[com.testwebxml.MyServletContextListener][contextInitialized]ApplicationContextFacade<br>[com.testwebxml.MyFilter][init]FirstFilter<br>[com.testwebxml.MyFilter][init]SecondFilter<br>[2018-08-06 10:32:26,493] Artifact test: Artifact is deployed successfully<br>[2018-08-06 10:32:26,493] Artifact test: Deploy took 391 milliseconds</p><p>接收第一个/请求时</p><p>[com.testwebxml.MyServletRequestListener][requestInitialized]ApplicationContextFacade<br>[com.testwebxml.MyServletRequestListener][requestInitialized]RequestFacade<br>[com.testwebxml.MyServlet][init]<br>[com.testwebxml.MyFilter][doFilter]FirstFilter ServletRequest:127.0.0.1<br>[com.testwebxml.MyFilter][doFilter]SecondFilter ServletRequest:127.0.0.1<br>[com.testwebxml.MyServlet][service]<br>[com.testwebxml.MyServletRequestListener][requestDestroyed]ApplicationContextFacade<br>[com.testwebxml.MyServletRequestListener][requestDestroyed]RequestFacade</p><p>接收第二个/请求时</p><p>[com.testwebxml.MyServletRequestListener][requestInitialized]ApplicationContextFacade<br>[com.testwebxml.MyServletRequestListener][requestInitialized]RequestFacade<br>[com.testwebxml.MyFilter][doFilter]FirstFilter ServletRequest:127.0.0.1<br>[com.testwebxml.MyFilter][doFilter]SecondFilter ServletRequest:127.0.0.1<br>[com.testwebxml.MyServlet][service]<br>[com.testwebxml.MyServletRequestListener][requestDestroyed]ApplicationContextFacade<br>[com.testwebxml.MyServletRequestListener][requestDestroyed]RequestFacade</p><p>接收第一个/http请求时</p><p>[com.testwebxml.MyServletRequestListener][requestInitialized]ApplicationContextFacade<br>[com.testwebxml.MyServletRequestListener][requestInitialized]RequestFacade<br>[com.testwebxml.MyHttpServlet][init]init()<br>[com.testwebxml.MyFilter][doFilter]FirstFilter ServletRequest:127.0.0.1<br>[com.testwebxml.MyFilter][doFilter]SecondFilter ServletRequest:127.0.0.1<br>[com.testwebxml.MyHttpServlet][doGet]<br>[com.testwebxml.MyHttpSessionListener][sessionCreated]<br>[com.testwebxml.MyHttpServlet][doGet]HttpServletRequest.getSession()<br>[com.testwebxml.MyServletRequestListener][requestDestroyed]ApplicationContextFacade<br>[com.testwebxml.MyServletRequestListener][requestDestroyed]RequestFacade</p><p>接收第二个/http请求时</p><p>[com.testwebxml.MyServletRequestListener][requestInitialized]ApplicationContextFacade<br>[com.testwebxml.MyServletRequestListener][requestInitialized]RequestFacade<br>[com.testwebxml.MyFilter][doFilter]FirstFilter ServletRequest:127.0.0.1<br>[com.testwebxml.MyFilter][doFilter]SecondFilter ServletRequest:127.0.0.1<br>[com.testwebxml.MyHttpServlet][doGet]<br>[com.testwebxml.MyHttpServlet][doGet]HttpServletRequest.getSession()<br>[com.testwebxml.MyServletRequestListener][requestDestroyed]ApplicationContextFacade<br>[com.testwebxml.MyServletRequestListener][requestDestroyed]RequestFacade</p><p>项目停止时</p><p>信息: Stopping service Catalina<br>[com.testwebxml.MyServlet][destroy]<br>[com.testwebxml.MyFilter][destroy]FirstFilter<br>[com.testwebxml.MyFilter][destroy]SecondFilter<br>[com.testwebxml.MyServletContextListener][contextDestroyed]ApplicationContextFacade<br>八月 06, 2018 10:35:42 上午 org.apache.coyote.http11.Http11AprProtocol destroy<br>信息: Stopping Coyote HTTP/1.1 on http-21211<br>八月 06, 2018 10:35:42 上午 org.apache.coyote.ajp.AjpAprProtocol destroy<br>信息: Stopping Coyote AJP/1.3 on ajp-8009<br>Disconnected from server</p>--></web-app>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/d1de75a8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MySQL——总体架构</title>
      <link>http://www.kherrisan.cn/posts/77a52e0d/</link>
      <guid>http://www.kherrisan.cn/posts/77a52e0d/</guid>
      <pubDate>Mon, 30 Apr 2018 20:09:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://s3.51cto.com/wyfs02/M02/11/8A/wKiom1LUF8DS1inQAAE8bwOlNTY150.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;层次结构&quot;&gt;&lt;a href=&quot;#层次结构&quot; class=&quot;headerlink&quot; title=&quot;层次结构&quot;&gt;&lt;/a&gt;层次结构&lt;/h1&gt;&lt;p&gt;大致分为四层，从上往下看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端和连接管理层：主要用于和用户开展交互，或者提供应用程序开发接口。这层还负责管理用户连接会话、权限控制。使用线程池来处理用户连接请求。&lt;/li&gt;
&lt;li&gt;核心服务功能层：SQL的分析、优化、函数的执行，缓存结果的查询。这一层会负责生成查询操作。&lt;/li&gt;
&lt;li&gt;存储引擎层：如InnoDB和MyISAM。真正负责查询和修改磁盘上的数据。&lt;/li&gt;
&lt;li&gt;数据存储层：包括数据、日志、索引等文件。&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://s3.51cto.com/wyfs02/M02/11/8A/wKiom1LUF8DS1inQAAE8bwOlNTY150.jpg" srcset="/img/loading.gif" alt></p><h1 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h1><p>大致分为四层，从上往下看：</p><ol><li>客户端和连接管理层：主要用于和用户开展交互，或者提供应用程序开发接口。这层还负责管理用户连接会话、权限控制。使用线程池来处理用户连接请求。</li><li>核心服务功能层：SQL的分析、优化、函数的执行，缓存结果的查询。这一层会负责生成查询操作。</li><li>存储引擎层：如InnoDB和MyISAM。真正负责查询和修改磁盘上的数据。</li><li>数据存储层：包括数据、日志、索引等文件。</li></ol><a id="more"></a><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><p><img src="https://oss.kherrisan.cn/Snipaste_2018-04-29_16-28-05.jpg" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs null">used_Mem =+ key_buffer_size+ query_cache_size+ innodb_buffer_pool_size+ innodb_additional_mem_pool_size+ innodb_log_buffer_size+ max_connections *(    + read_buffer_size    + read_rnd_buffer_size    + sort_buffer_size    + join_buffer_size    + binlog_cache_size    + thread_stack    + tmp_table_size    + bulk_insert_buffer_size)</code></pre></div><h2 id="线程共享内存"><a href="#线程共享内存" class="headerlink" title="线程共享内存"></a>线程共享内存</h2><p>在MySQL中，线程独享内存主要用于各客户端连接线程存储各种操作的独享数据，如线程栈信息，分组排序操作，数据读写缓冲，结果集暂存等等，而且大多数可以通过相关参数来控制内存的使用量。</p><ol><li>key_buffer：MyISAM索引缓存。</li><li>query_cache：查询缓存，如果两次查询的结果相同，那么后一次查询的结果可以从缓存里得到。</li><li>innodb_buffer_pool：innodb数据和索引缓存。</li><li>innodb_additional_mem_pool：innodb字典信息缓存。</li><li>innodb_log_buffer：innodb日志缓存，主要用于记录事务操作，缓存里日志足够多了之后才会写到外存的日志文件中去。</li></ol><h2 id="线程独享内存"><a href="#线程独享内存" class="headerlink" title="线程独享内存"></a>线程独享内存</h2><ol><li>read_buffer：顺序读缓冲区，相当于一个窗口，满了就把查询的结果返回给上层。</li><li>read_rnd_buffer：随机读缓冲区，同上。</li><li>sort_buffer：排序缓冲区，数据在这里被排序，如果数据过多放不下，那就要放在外存进行排序，效率会大大降低。</li><li>join_buffer：join操作缓存，这里就不得不提一下join的原理——嵌套循环了，以驱动表的结果集作为基础，一条一条作为下一个表的过滤条件进行查询。如果说先把驱动表的关联字段读入join_buffer，然后让下一张表直接和join_buffer中的字段比较，这样就可以减少下一张表的扫描次数，从而降低时间开销。</li><li>binlog_cache：二进制日志缓冲。</li><li>thread_stack</li><li>tmp_table：如group by、order by等操作会产生临时表，如果表够小的话直接存放在缓存里即可。</li><li>bulk_insert_buffer：批量插入操作缓存，如<code>insert into table_name values(),(),()</code>，会在缓冲区满的时候一次性写入磁盘。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/77a52e0d/#disqus_thread</comments>
    </item>
    
    <item>
      <title>OS——The Abstraction: The Process</title>
      <link>http://www.kherrisan.cn/posts/f2b26827/</link>
      <guid>http://www.kherrisan.cn/posts/f2b26827/</guid>
      <pubDate>Wed, 25 Apr 2018 19:41:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;抽象的概念&quot;&gt;&lt;a href=&quot;#抽象的概念&quot; class=&quot;headerlink&quot; title=&quot;抽象的概念&quot;&gt;&lt;/a&gt;抽象的概念&lt;/h2&gt;&lt;p&gt;进程（Process），指运行着的程序。程序指静静躺在在外存中的数据和代码，是静态概念，但是进程是动态的概念，他反应了程序在运行的时候的功能和性质。 现代典型的操作系统都是同时运行数十个至数百个进程的，使用分时（Time Sharing）的技术来实现看似每个进程都能独占一个CPU的效果，当然，分时是要付出性能上的代价的。 进程的组成部分：&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="抽象的概念"><a href="#抽象的概念" class="headerlink" title="抽象的概念"></a>抽象的概念</h2><p>进程（Process），指运行着的程序。程序指静静躺在在外存中的数据和代码，是静态概念，但是进程是动态的概念，他反应了程序在运行的时候的功能和性质。 现代典型的操作系统都是同时运行数十个至数百个进程的，使用分时（Time Sharing）的技术来实现看似每个进程都能独占一个CPU的效果，当然，分时是要付出性能上的代价的。 进程的组成部分：</p><a id="more"></a><ol><li>内存：代码和数据存储的地方。</li><li>寄存器：存储运算操作或输入输出操作中间结果以及状态信息的地方，。比较重要的有PC（Program Counter），SP（Stack Pointer）等。</li><li>IO设备：如文件描述符（File Descriptor）。</li></ol><h2 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h2><p>大致可以概况为以下几个步骤：</p><ol><li>把代码和数据从外存载入内存（地址空间）中。如今OS读取程序数据，载入内存的操作可以以惰性的方式执行，即要多少读取多少，当然这需要借助置换（swaping）和分页（paging）机制。</li><li>分配栈空间，并初始化。</li><li>分配堆空间，并初始化。</li><li>初始化一些IO设备信息，如3个文件描述符（fd）：stdout，stdin，stderr。</li><li>最后，跳转到main子程序，正式开始运行。</li></ol><p><img src="https://oss.kherrisan.cn/Snipaste_2018-04-25_19-28-45.jpg" srcset="/img/loading.gif" alt></p><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><ul><li>运行（running）：此时进程拥有CPU资源，能够逐行执行指令、进行运算、发起IO请求。</li><li>就绪（ready）：此时进程随时可以开始或继续运行，但是OS选择忽视了他，而是去垂青其他进程了。</li><li>阻塞（blocked）：正在运行的进程发起了IO操作后，IO设备开始发送或接收数据，此时该进程处于等待IO操作完成的状态，也叫阻塞状态。此时CPU一般会分配给其他进程使用。</li></ul><p><img src="https://oss.kherrisan.cn/Snipaste_2018-04-25_19-33-36.jpg" srcset="/img/loading.gif" alt> 正在运行的进程可能会被OS调出而进入就绪状态，就绪的进程可能会被OS调入，进入运行状态。当进程在运行过程中发起IO操作，会变为阻塞状态，好像被冻住了一样。处于阻塞状态的进程无法继续运行（数据没准备好），直到IO操作完成后，变为就绪状态。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>可以想象，OS通过一个列表来记录每个进程的状态信息。记录一个进程相关状态信息的数据结构叫做PCB（Process Control Block）。因为常见的OS一般是用C语言编写的，因此这样的数据结构也常常用C语言来描述。 <img src="https://oss.kherrisan.cn/Snipaste_2018-04-25_19-41-28.jpg" srcset="/img/loading.gif" alt></p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/f2b26827/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Gradle——从各个“关键字”理解gradle</title>
      <link>http://www.kherrisan.cn/posts/c39d8650/</link>
      <guid>http://www.kherrisan.cn/posts/c39d8650/</guid>
      <pubDate>Wed, 18 Apr 2018 22:34:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;buildscript {&lt;br&gt;    ext {&lt;br&gt;        springBootVersion = ‘2.0.1.RELEASE’&lt;br&gt;    }&lt;br&gt;    repositories {&lt;br&gt;        mavenCentral()&lt;br&gt;    }&lt;br&gt;    dependencies {&lt;br&gt;        classpath(“org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}”)&lt;br&gt;    }&lt;br&gt;}&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>buildscript {<br>    ext {<br>        springBootVersion = ‘2.0.1.RELEASE’<br>    }<br>    repositories {<br>        mavenCentral()<br>    }<br>    dependencies {<br>        classpath(“org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}”)<br>    }<br>}</p><a id="more"></a><p>apply plugin: ‘java’<br>apply plugin: ‘eclipse’<br>apply plugin: ‘org.springframework.boot’<br>apply plugin: ‘io.spring.dependency-management’</p><p>group = ‘com.example’<br>version = ‘0.0.1-SNAPSHOT’<br>sourceCompatibility = 1.8</p><p>repositories {<br>    mavenCentral()<br>}</p><p>dependencies {<br>    compile(‘org.springframework.boot:spring-boot-starter-web’)<br>    testCompile(‘org.springframework.boot:spring-boot-starter-test’)<br>}</p><p>  以一个Spring Boot项目的build.gradle为例。</p><h2 id="buildscript"><a href="#buildscript" class="headerlink" title="buildscript"></a>buildscript</h2><p>指明了作用于该脚本文件的一些代码。这些代码和buildscript外的代码有所区别，外面的代码是作用于project的，buildscript内的代码是作用于该脚本文件的。 如</p><div class="hljs"><pre><code class="hljs null">repositories {    mavenCentral()}</code></pre></div><p>这句话如果放在外面，就是声明project所需要依赖文件所在的仓库，放在buildscript里面，就是这个脚本文件所依赖的内容的仓库。 举个例子，比如我们要在运行这个build.gradle的过程中调用matplotlib画一张图（这是什么鬼需求），就需要在buildscript里注明所需要的仓库和所需要的依赖（虽然这个依赖实际上并不存在）。matplotlib仅仅是被导入到了build.gradle中，并没有被导入到项目中去，也就是说项目的依赖还是纯净无污染的。</p><h2 id="apply-plugin"><a href="#apply-plugin" class="headerlink" title="apply plugin"></a>apply plugin</h2><p>插件实际上就是一组task，只是将task做了一次包装，使得分发这些task的代码给他人使用时能够更加方便。 以插件Java为例 典型的Java项目的目录结构如下： <img src="https://oss.kherrisan.cn/Snipaste_2018-05-01_16-32-41.jpg" srcset="/img/loading.gif" alt></p><h2 id="group"><a href="#group" class="headerlink" title="group"></a>group</h2><p>包名</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p>版本号</p><h2 id="sourceCompatibility"><a href="#sourceCompatibility" class="headerlink" title="sourceCompatibility"></a>sourceCompatibility</h2><p>兼容到哪个Java版本的一个标记</p><h2 id="repositories"><a href="#repositories" class="headerlink" title="repositories"></a>repositories</h2><p>仓库，这是一个挺重要的关键字。如果开发者需要引入别人开发的库，就需要从仓库下载，得益于gradle高度自动化的依赖管理，开发者不需要自己在浏览器下载然后倒入jar包，而是只要在gradle脚本中声明一个依赖库即可。gradle自动从仓库搜索这个依赖库、下载并导入到该项目中。 常用的仓库有以下几个： <img src="https://oss.kherrisan.cn/Snipaste_2018-05-01_16-38-14.jpg" srcset="/img/loading.gif" alt> 要使用某个仓库的话：</p><p>repositories {<br>    mavenCentral()<br>}</p><p>如果想要直接导入本地的jar包，就需要声明本地仓库。</p><p>repositories {<br>    flatDir {<br>        dirs ‘lib’<br>    }<br>    flatDir {<br>        dirs ‘lib1’, ‘lib2’<br>    }<br>}</p><h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h2><p>依赖，这也是一个很重要的关键字。开发者引入的第三方库并不一定是在编译时需要导入的，也有可能是运行时，或者测试时，因此gradle提供了一些属性，供开发者确定这个依赖何时引入。</p><ol><li><strong>compile：编译时</strong></li><li><strong>runtime：运行时</strong></li><li><strong>testCompile：测试代码（src\test目录下）编译时</strong></li><li><strong>testRuntime：测试代码运行时</strong></li><li><strong>archives：项目打包时</strong></li></ol><p>需要什么库，直接写在dependencies标签下就行</p><p>dependencies {<br>    compile “com.android.support:appcompat-v7:${SUPPORT_LIBRARY_VERSION}”<br>    compile “com.android.support:cardview-v7:${SUPPORT_LIBRARY_VERSION}”<br>    compile “com.android.support:recyclerview-v7:${SUPPORT_LIBRARY_VERSION}”<br>    compile “com.android.support:design:${SUPPORT_LIBRARY_VERSION}”<br>}</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/c39d8650/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Gradle——从groovy语法角度理解Project</title>
      <link>http://www.kherrisan.cn/posts/35e8bc6d/</link>
      <guid>http://www.kherrisan.cn/posts/35e8bc6d/</guid>
      <pubDate>Wed, 18 Apr 2018 22:31:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;这是一个Spring Boot项目的build.gradle文件。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>这是一个Spring Boot项目的build.gradle文件。</p><a id="more"></a><div class="hljs"><pre><code class="hljs null">buildscript {    ext {        springBootVersion = '2.0.1.RELEASE'    }    repositories {        mavenCentral()    }    dependencies {        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")    }}apply plugin: 'java'apply plugin: 'eclipse'apply plugin: 'org.springframework.boot'apply plugin: 'io.spring.dependency-management'group = 'com.example'version = '0.0.1-SNAPSHOT'sourceCompatibility = 1.8repositories {    mavenCentral()}dependencies {    compile('org.springframework.boot:spring-boot-starter-web')    testCompile('org.springframework.boot:spring-boot-starter-test')}</code></pre></div><p>首先，要明确一点：在这个文件中所见到的如apply、repositories、dependencies这样的看似是gradle关键字的东西，其实并不是关键字，而是函数，具体的说是Project对象自带的成员函数（Java中叫对象的方法）。这个Project对象，就是build.gradle所在的目录。每个gradle项目都有至少一个Project，那么gradle项目的根目录在什么位置呢？在settings.gradle所在的目录。 也就是说，这个build.gradle定义了一个Project对象，这个Project对象本身自带了一些函数，在build.gradle里调用了这些函数，并且是带着一些参数调用这些函数。 如</p><div class="hljs"><pre><code class="hljs null">apply plugin: 'java'</code></pre></div><p>这句话如果用groovy语言补全了，就是</p><div class="hljs"><pre><code class="hljs null">apply([plugin:'java'])</code></pre></div><p>groovy用[]来定义map对象，也就是说这个apply的参数是个map。 再比如</p><div class="hljs"><pre><code class="hljs null">dependencies {    compile('org.springframework.boot:spring-boot-starter-web')    testCompile('org.springframework.boot:spring-boot-starter-test')}</code></pre></div><p>可以还原为</p><div class="hljs"><pre><code class="hljs null">dependencies ({    compile('org.springframework.boot:spring-boot-starter-web')    testCompile('org.springframework.boot:spring-boot-starter-test')})</code></pre></div><p>这个{}不是map，不要和python搞混了。groovy中用{}来定义闭包。闭包换种说法叫匿名代码块，即没有名字的函数。和C++中的代码块类似，区别在于闭包和lambda表达式比较接近，可以定义闭包的参数。</p><div class="hljs"><pre><code class="hljs null">{int a,int b->println 'a + b = ${a+b}'}</code></pre></div><p>这就是一个简单的求a+b并打印出来的闭包。 回到dependencies，这个闭包作为一个参数传入dependencies，即gradle调用dependencies函数的时候，会把这个闭包对象传递到dependencies函数里面去，至于什么时候执行，有dependencies内部决定。 根据我的理解，把这个build.gradle翻译成python脚本文件，应该是这样。 （可能有语法错误，意思到了就行）</p><div class="hljs"><pre><code class="hljs null">project=Project()def buildscript_closure():    def ext_closure():        springBootVersion='2.0.1.RELEASE'    def repositories_closure():        mavenCentral()    def dependencies_closure():        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")    ......    ext_closure()    ......    repositories_closure()    ......    dependencies_closure()project.buildscript(buildscript_closure)project.apply([plugin:'java'])project.apply([plugin:'eclipse'])project.apply([plugin:'org.springframework.boot'])project.apply([plugin:'io.spring.dependency-management'])project.group='com.example'project.version='0.0.1-SNAPSHOT'project.sourceCompatibility = 1.8def repositories_closure():    mavenCentral()project.repositories(repositories_closure)def dependencies_closure():    compile('org.springframework.boot:spring-boot-starter-web')    testCompile('org.springframework.boot:spring-boot-starter-test')project.dependices(dependencies_closure)</code></pre></div><p>所以build.gradle中的groovy看似很像DSL（Domain Specified Language），实际上也就是语法糖多了一点而已。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/35e8bc6d/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——TreeMap</title>
      <link>http://www.kherrisan.cn/posts/3265045/</link>
      <guid>http://www.kherrisan.cn/posts/3265045/</guid>
      <pubDate>Wed, 21 Feb 2018 14:12:22 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-02-21_14-15-34.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; TreeMap继承了AbstractMap抽象类，实现了NavigableMap接口。这个接口是HashMap和LinkedHashMap的定义中都没有见过的，从字面意思上来看，应该是“可导航Map”，到底是怎么个导航法，需要先了解一下这个接口。 &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-21_14-15-34.jpg" srcset="/img/loading.gif" alt> TreeMap继承了AbstractMap抽象类，实现了NavigableMap接口。这个接口是HashMap和LinkedHashMap的定义中都没有见过的，从字面意思上来看，应该是“可导航Map”，到底是怎么个导航法，需要先了解一下这个接口。 </p><a id="more"></a><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-21_14-21-43.jpg" srcset="/img/loading.gif" alt> NavigableMap也不是一个顶级的接口，它实现了SortedMap接口。SortedMap接口描述了Map的排列方式的一种特殊情形：所有的Key-Value对都是按照Key的大小一致升序或者降序排列，这里的大小指的就是Comparable接口。降序或者升序集中体现在遍历该Map的时候。有了这个特性，就可以提供一些其他的功能。如给定一个key，返回所有的大于这个key的Key-value组成的Map（视图），或者所有小于这个key的key-value组成的Map（视图）。 NavigableMap在SortedMap提供有序key-value的基础上拓展了一些功能，能够提供离某个key最近的entry，可以以目标key为上界，也可以之为下界。有点类似于向上取整和向下取整的意思。 再回到TreeMap，根据它的注释，可知TreeMap是基于红黑树实现的Map（注释中还特别强调了是算法导论中的红黑树hhh），基本的增删改查需要log(n)的时间复杂度，这比HashMap慢一些，因为HashMap使用的是散列表，访问元素只需要线性时间。 TreeMap是一个相当复杂的类，不仅仅是在算法的实现上，更在于类结构的设计上。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>一个Comparator，用于记录比较运算符。如果key实现了Comparable方法，就不需要这个Comparator。 一个Entry，用于记录根节点。 一个size，用于记录元素个数。 一个modCount，用于检查conModification。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="getEntry"><a href="#getEntry" class="headerlink" title="getEntry"></a>getEntry</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-21_15-04-14.jpg" srcset="/img/loading.gif" alt> 从代码中可以看到，如果没有comparator，那么key是不允许为null的，否则可以通过comparator来实现对于null键的判断规则，即便是根节点，也可以是null。而在HashMap中，null键是可以插入、查询的。</p><h3 id="getEntryUsingComparator"><a href="#getEntryUsingComparator" class="headerlink" title="getEntryUsingComparator"></a>getEntryUsingComparator</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-21_15-19-06.jpg" srcset="/img/loading.gif" alt> getEntry和getEntryUsingComparator的实现思路是相同的，都是从树根出发，向左或向右行走，直到找到相等的节点。两个方法的区别在于一个是通过comparator做比较，一个是通过key的compareTo方法。在注释中解释说把getEntryUsingComparator方法抽取出来的目的在于提高效率。</p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>put方法用于向TreeMap中插入新元素，或者修改原有的key的值。由于使用的是红黑树，因此插入元素可能涉及一些对于红黑树结构的修改。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-21_15-31-19.jpg" srcset="/img/loading.gif" alt> 插入新节点后调用fixAfterInsertion方法插入新元素并调整树结构。 这里先跳过红黑树相关操作的实现。</p><h3 id="getCeilingEntry"><a href="#getCeilingEntry" class="headerlink" title="getCeilingEntry"></a>getCeilingEntry</h3><p>找到某个key对应的entry，如果找不到，就取比这个key大并且紧邻着这个key的entry，类似于向上取整。根据二叉搜索树的性质，需要向下遍历。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-23_13-44-25.jpg" srcset="/img/loading.gif" alt> 如果给定的key比此节点的key大，就向右子树走，如果没有右子树，沿父节点回溯，直到某个节点是其父节点的左儿子，返回其父节点；如果给定的key比此节点的key小，就向左子树走（显然右子树的节点都会比此节点的key大），如果没有左子树，就取这个节点。</p><h3 id="getHigherEntry"><a href="#getHigherEntry" class="headerlink" title="getHigherEntry"></a>getHigherEntry</h3><p>和getCeilingEntry类似，区别在于不找相等的key对应的entry，而是直接命中比给定key大并且紧邻着这个key的entry。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="PrivateEntryIterator"><a href="#PrivateEntryIterator" class="headerlink" title="PrivateEntryIterator"></a>PrivateEntryIterator</h3><p>这是一个其他迭代器类的父类，实现了Iterator接口及其方法，同样控制了modCount，保证在遍历的时候map的结构不发生改变。</p><h3 id="EntryIterator、ValueIterator、KeyIterator、DescendingKeyIterator"><a href="#EntryIterator、ValueIterator、KeyIterator、DescendingKeyIterator" class="headerlink" title="EntryIterator、ValueIterator、KeyIterator、DescendingKeyIterator"></a>EntryIterator、ValueIterator、KeyIterator、DescendingKeyIterator</h3><p>分别是针对Entry、Value、Key的四个具体的迭代器。</p><h2 id="其他内部类"><a href="#其他内部类" class="headerlink" title="其他内部类"></a>其他内部类</h2><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><p>TreeMap的静态内部类，定义了一个Key-Value对的节点。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-23_14-40-47.jpg" srcset="/img/loading.gif" alt> 此内部类只有寥寥数个方法，都是setter和getter方法，没有什么特别的。唯一有些特殊的是hashCode，这个函数根据key和value计算出hashCode，方法是将key的hashCode异或value的hashCode。</p><h3 id="NavigableSubMap"><a href="#NavigableSubMap" class="headerlink" title="NavigableSubMap"></a>NavigableSubMap</h3><h3 id="Values、EntrySet"><a href="#Values、EntrySet" class="headerlink" title="Values、EntrySet"></a>Values、EntrySet</h3><p>定义了两个视图。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/3265045/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——LinkedHashSet</title>
      <link>http://www.kherrisan.cn/posts/b728d676/</link>
      <guid>http://www.kherrisan.cn/posts/b728d676/</guid>
      <pubDate>Mon, 19 Feb 2018 19:06:22 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-02-19_18-57-54.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; 区别于HashSet，LinkedHashSet使用了一个双向链表来串联所
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-19_18-57-54.jpg" srcset="/img/loading.gif" alt> 区别于HashSet，LinkedHashSet使用了一个双向链表来串联所有节点。LinkedHashSet的实现相当的简单，它继承了HashSet，在HashSet的构造函数中插入了一个直接以LinkedHashMap作为实现的构造函数。其余所有方法均与HashSet一致。但是由于在构造函数中少传了一个参数，因此LinkedHashSet无法由用户决定是按照accessOrder还是按照insertOrder。可以得出这样的结论：LinkedHashSet中遍历元素始终是按照插入元素的顺序遍历的。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/b728d676/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——LinkedHashMap</title>
      <link>http://www.kherrisan.cn/posts/c2915911/</link>
      <guid>http://www.kherrisan.cn/posts/c2915911/</guid>
      <pubDate>Sat, 17 Feb 2018 14:31:56 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-02-17_12-14-56.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; LinkedHashMap和HashMap的区别在于前者在HashMap的基础上还维护了一个贯穿所有节点的双向链表，该链表决定了遍历的顺序，形如一个队列。 当然，这个链表并不会影响HashMap的结构，和HashMap的table或者链表或者红黑树是完全独立的一个结构。该链表的顺序可以是插入元素的顺序也可以是访问元素的顺序，具体选择何种顺序取决于accessOrder属性是true还是false。 在hashmap中预留了几个抽象方法，并在put和get等操作内调用了这些方法，为子类提供了可扩展的点。&lt;strong&gt;我认为这是“模板方法模式”的体现。&lt;/strong&gt; &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-17_12-14-56.jpg" srcset="/img/loading.gif" alt> LinkedHashMap和HashMap的区别在于前者在HashMap的基础上还维护了一个贯穿所有节点的双向链表，该链表决定了遍历的顺序，形如一个队列。 当然，这个链表并不会影响HashMap的结构，和HashMap的table或者链表或者红黑树是完全独立的一个结构。该链表的顺序可以是插入元素的顺序也可以是访问元素的顺序，具体选择何种顺序取决于accessOrder属性是true还是false。 在hashmap中预留了几个抽象方法，并在put和get等操作内调用了这些方法，为子类提供了可扩展的点。<strong>我认为这是“模板方法模式”的体现。</strong> </p><a id="more"></a><p><img src="https://oss.kherrisan.cn/4d2e73e200c8762093663515560758e2.png" srcset="/img/loading.gif" alt> 在HashMap的Node中，就已经提供了next属性，但没有用到。在LinkedHashMap中，每个节点的next属性根据访问或者插入顺序连接下一个节点。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>为了记录双向链表的头和尾，使用了两个节点记录head和tail。 另外，使用了一个boolean标记访问顺序。如果为true，则遍历顺序为访问顺序，否则按照插入顺序遍历。默认为false。 这个值是final的，也就是说一旦构造完毕就不能再修改的，因为一旦决定了该值为true，在后续插入删除访问节点时就会做额外的操作来修改链表，这时再修改该值显然是无法还原访问顺序的。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="afterNodeRemoval"><a href="#afterNodeRemoval" class="headerlink" title="afterNodeRemoval"></a>afterNodeRemoval</h3><p><img src="https://oss.kherrisan.cn/6f431e4c3251e60f0ba1376cb918b5d4.png" srcset="/img/loading.gif" alt> 在HashMap的removeNode方法中被调用。这个方法在一个节点被删除之后，删除该节点存在的前向和后向链接，并将该节点的前驱的后向链接和后继节点的前向链接重新设置。</p><h3 id="afterNodeInsertion"><a href="#afterNodeInsertion" class="headerlink" title="afterNodeInsertion"></a>afterNodeInsertion</h3><p><img src="https://oss.kherrisan.cn/0e70b312ef4a5d30d59b107fbafcaa59.png" srcset="/img/loading.gif" alt> 在HashMap的putVal方法中被调用。在插入新的节点之后，根据需求判断是否需要把最老的节点删掉，如果需要，就调用HashMap的removeNode方法。默认的判断结果为false。</p><h3 id="aftetNodeAccess"><a href="#aftetNodeAccess" class="headerlink" title="aftetNodeAccess"></a>aftetNodeAccess</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-17_13-14-41.jpg" srcset="/img/loading.gif" alt> 在HashMap的putVal方法中被使用到。在访问某个节点后（比如通过put修改该节点的值），把该节点移动到链表的最后。</p><h3 id="transferLinks"><a href="#transferLinks" class="headerlink" title="transferLinks"></a>transferLinks</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-17_13-34-35.jpg" srcset="/img/loading.gif" alt> 拷贝src节点的链接情况到dst节点上。</p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>由于可以针对插入顺序和访问顺序进行遍历，因此在get和put方法中必须要添加额外的代码来修改链表。LinkedHashMap并没有重写put方法，而是在HashMap中就定义了几个回调函数（afterNodeXXX），然后重写了这些回调函数。</p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>LinkedHashMap重写了get方法，在调用HashCode的putVal之后再调用afterNodeAccess回调函数。将访问的节点移动到链表的最后一个。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="LinkedHashIterator"><a href="#LinkedHashIterator" class="headerlink" title="LinkedHashIterator"></a>LinkedHashIterator</h3><p>是一个抽象类，从双向链表的头节点开始遍历，提供了nextNode方法供其他迭代器使用。nextNode方法和remove方法都是fail-fast的。</p><h3 id="LinkedKeyIterator、LinkedValueIterator、LinkedEntryIterator"><a href="#LinkedKeyIterator、LinkedValueIterator、LinkedEntryIterator" class="headerlink" title="LinkedKeyIterator、LinkedValueIterator、LinkedEntryIterator"></a>LinkedKeyIterator、LinkedValueIterator、LinkedEntryIterator</h3><p>继承了LinkedHashIterator并完整实现了Iterator接口。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/c2915911/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JVM——内存区域和内存溢出异常</title>
      <link>http://www.kherrisan.cn/posts/e9b37112/</link>
      <guid>http://www.kherrisan.cn/posts/e9b37112/</guid>
      <pubDate>Fri, 16 Feb 2018 16:00:32 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;内存区域&quot;&gt;&lt;a href=&quot;#内存区域&quot; class=&quot;headerlink&quot; title=&quot;内存区域&quot;&gt;&lt;/a&gt;内存区域&lt;/h2&gt;&lt;p&gt;作为VM，Java Virtual Machine模拟了操作系统的一些功能，其中之一就是对内存进行管理。JVM内存大致分为下面几个区域： &lt;a href=&quot;https://raw.githubusercontent.com/ACFLOOD/MarkdownPictures/master/MemoryArea.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ACFLOOD/MarkdownPictures/master/MemoryArea.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方法区，是线程共享的。用于存储已被JVM加载的类信息、常量、静态变量、编译后的代码等数据。过去开发者常常称这个区域为“永久代”，因为Hotspot虚拟机GC在管理方法区的时候是采用永久代的方式。当然Hotspot以及开始逐渐放弃永久代。本来垃圾回收（GC）在方法区就是较为少见，且较为令人满意的，这区域的内存的主要回收目标是常量池的回收和类的卸载，但这个区域的回收是十分有必要的。当内存无法满足需要时也会抛出OutOfMemoryError。&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h2><p>作为VM，Java Virtual Machine模拟了操作系统的一些功能，其中之一就是对内存进行管理。JVM内存大致分为下面几个区域： <a href="https://raw.githubusercontent.com/ACFLOOD/MarkdownPictures/master/MemoryArea.jpg" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/ACFLOOD/MarkdownPictures/master/MemoryArea.jpg" srcset="/img/loading.gif" alt></a></p><ol><li>方法区，是线程共享的。用于存储已被JVM加载的类信息、常量、静态变量、编译后的代码等数据。过去开发者常常称这个区域为“永久代”，因为Hotspot虚拟机GC在管理方法区的时候是采用永久代的方式。当然Hotspot以及开始逐渐放弃永久代。本来垃圾回收（GC）在方法区就是较为少见，且较为令人满意的，这区域的内存的主要回收目标是常量池的回收和类的卸载，但这个区域的回收是十分有必要的。当内存无法满足需要时也会抛出OutOfMemoryError。</li></ol><a id="more"></a><ol><li>虚拟机栈，是线程私有的，因为每个线程的函数调用情况可能各不相同。每个方法在执行的同时会创建一个栈帧（frame），用于存储局部变量表、操作数、动态链接、方法出口等信息。在JVM规范中，VM栈可能会因为线程请求过多的栈（函数调用过多）导致抛出StackOverflowError，也有可能因为VM动态扩展VM栈的时候无法申请到足够的内存导致抛出OutOfMemoryError。</li><li>本地方法栈，和虚拟机栈类似，是线程私有的，区别在于虚拟机栈保存的是字节码指令的栈，而本地方法栈保存的是本地方法服务。Hotspot中本地方法栈和VM栈是合一的。</li><li>堆（heap），是线程共享的。和数据结构中的堆不同，这个堆就是用来描述内存中的一块区域的名字。一般来说堆是各个区域中最大的一块。JVM规范中指出：<strong>所有的对象实例以及数组都要在堆上分配</strong>。但是随着JIT编译器的发展与逃逸分析技术的成熟，栈上分配、标量替换优化技术将会导致这样的分配也不是绝对的了。堆在物理内存中可以是不连续的也可以是连续的。在堆无法扩展时（new对象过多）会抛出OutOfMemoryError。</li><li>程序计数器。计算机组成原理中一个很重要的概念就是存储程序，其中用来标记指令执行的进度、保持或改变指令执行顺序的就是程序计数器（Program Counter简称PC，或Instruction Pointer简称IP）。到了JVM中，也有程序计数器。由于每个线程都有自己的程序运行情况，因此每个线程都要由一个自己的PC，指向字节码指令的地址。JVM中的PC占用的内存空间很小，几乎可以忽略不计，也不会抛出OutOfMemoryError。</li></ol><p>此外，还有两个概念。</p><ol><li>运行时常量池。是方法区的一部分，用于存放编译期生成的各种字面量和符号引用。</li><li>直接内存。物理内存（当然还是在操作系统管理之下的）而不是JVM中的内存。</li></ol><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p><img src="https://oss.kherrisan.cn/%E7%BB%98%E5%9B%BE1.jpg" srcset="/img/loading.gif" alt></p><h3 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h3><p><img src="https://oss.kherrisan.cn/%E7%BB%98%E5%9B%BE4.jpg" srcset="/img/loading.gif" alt></p><h3 id="对象锁状态"><a href="#对象锁状态" class="headerlink" title="对象锁状态"></a>对象锁状态</h3><p>对象处于不同的状态时，对象头的布局也会产生变化，对象头的格式并不是像TCP报文头这样子一直不变的。 <img src="https://oss.kherrisan.cn/Snipaste_2018-05-05_17-53-42.jpg" srcset="/img/loading.gif" alt> 锁有重有轻，有乐观有悲观，从这么多角度来将锁的概念分类并区分设计，目的就是为了应对不同的并发场景，最大程度提升系统性能。</p><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>目前主流的访问方式有两种：句柄和直接指针。</p><ol><li>句柄：在JVM堆中会有一个句柄池，引用变量存储的就是句柄在句柄池中的地址，句柄在存放实例池中的对象实例数据以及方法区的对象类型数据。当对象在JVM堆中被移动的时候，不需要改变引用变量的值，只需要改变句柄中的值即可。</li><li>直接指针：引用变量直接存储JVM堆中对象实例地址，对象实例数据中保留一个指针指向方法区中的对象类型数据。速度比使用句柄更快一些。</li></ol><p>Hotspot使用的是第二种。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/e9b37112/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MIT 6.828 Lab1：C, Assembly, Tools, and Bootstrapping</title>
      <link>http://www.kherrisan.cn/posts/807d354d/</link>
      <guid>http://www.kherrisan.cn/posts/807d354d/</guid>
      <pubDate>Fri, 16 Feb 2018 15:41:27 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Boot-a-PC&quot;&gt;&lt;a href=&quot;#Boot-a-PC&quot; class=&quot;headerlink&quot; title=&quot;Boot a PC&quot;&gt;&lt;/a&gt;Boot a PC&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-01-30_18-18-06.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; 熟悉汇编语言，由于去年学过IO，问题应该不大。这里就不复习了。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Boot-a-PC"><a href="#Boot-a-PC" class="headerlink" title="Boot a PC"></a>Boot a PC</h1><p><img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_18-18-06.jpg" srcset="/img/loading.gif" alt> 熟悉汇编语言，由于去年学过IO，问题应该不大。这里就不复习了。</p><a id="more"></a><h2 id="PC的物理地址空间"><a href="#PC的物理地址空间" class="headerlink" title="PC的物理地址空间"></a>PC的物理地址空间</h2><p><img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_09-54-55.jpg" srcset="/img/loading.gif" alt> 一台PC的物理内存大致是如上图所示分布的。第一台PC（16bit的8088）的可以直接访问的内存只有1MB，可用的就只有图上的Low Memory中的那一部分。然后是显卡的缓冲区，然后是一些设备，最后是BIOS。虽然后来的计算机内存早已超过了1MB，但是为了前向兼容内存较小的机器，1MB的内存的区域还是维持了原来的布局。</p><h2 id="ROM-BIOS"><a href="#ROM-BIOS" class="headerlink" title="ROM BIOS"></a>ROM BIOS</h2><p>开两个shell，一个运行<code>make qemu-gdb</code>，另一个运行<code>gdb</code>，这样就可以在gdb里面调试OS的指令的执行操作了。 <img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_10-13-04.jpg" srcset="/img/loading.gif" alt> 其中：</p><ol><li><code>[f000:fff0]</code>是这条指令的逻辑地址，f000是段地址，fff0是段内偏移量，由于第一条指令是代码，在CS段内，所以可以说成CS=f000，IP=fff0。</li><li>下一条即将执行的指令是<code>ljmp ....,....</code>，这个单步执行的回显和C++调试是差不多的，都显示了下一条即将执行的语句。这是一个远跳转指令，能够跳转到当前段的0-64KB范围内。</li><li>即便是PC开机，第一条执行的指令也并不是在内存的开始位置，而是在<code>0xffff0</code>，因为之前说过BOIS在0xf000-0x100000之间。当然这个第一条指令地址也是在BIOS区的特别靠后的地方了，<strong>如果顺序执行，也就剩16条语句了。</strong>显然是不够的，所以要跳转。</li></ol><p>现在还处于<em>实模式</em>状态下，所谓实模式就是说<strong>物理地址=16*段地址+段内偏移</strong>。这样，一个16位的地址左移四位，变成了20bit，范围1MB。 当BIOS运行的时候，他会初始化中断描述符表，并初始化所有设备，包括VGA显示器，PCI总线，然后是硬盘，CD，最后找一个可以用的boot loader，一旦找到，就会把控制权转移给他。 <img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_18-18-17.jpg" srcset="/img/loading.gif" alt> 熟悉使用gdb进行调试的操作，跟着bios走一走，也没什么可说的。</p><h1 id="Boot-Loader"><a href="#Boot-Loader" class="headerlink" title="Boot Loader"></a>Boot Loader</h1><p>Bootloader的主要功能：</p><ol><li>从实模式切换到32bit保护模式。</li><li>通过IO指令直接从硬盘读Kernel到内存中。</li></ol><p>然后来阅读代码，boot/boot.S和boot/main.c。 先看boot.S，我觉得最重要的是下面这段： <img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_13-30-57.jpg" srcset="/img/loading.gif" alt> 首先从offset读8个sector，正好是一个page（4K），读到一个elf header中去。这个offset的值是0，也就是从硬盘的最开始的位置读1个页。 有个问题是：如果这个bootloader是存放在硬盘的最开始的位置，那为何还要从offset为0的地方再读1个page呢，这个offset为0的地方存放的是什么呢？ 根据代码的语义，这一个page中的数据按照elf格式排布，先读一个page，读到了header就可以获取到整个program的大小，然后就可以通过一个for循环把program的每个segment都读进来了。</p><blockquote><p>一般的 ELF 文件包括三个索引表：</p><ol><li>ELF header：在文件的开始，保存了路线图，描述了该文件的组织情况。</li><li>Program header table：告诉系统如何创建进程映像。用来构造进程映像的目标文件必须具有程序头部表，可重定位文件不需要这个表。</li><li>Section header table ：包含了描述文件节区的信息，每个节区在表中都有一项，每一项给出诸如节区名称、节区大小这类信息。用于链接的目标文件必须包含节区头部表，其他目标文件可以有，也可以没有这个表。</li></ol></blockquote><p>根据课程网站的解释和代码前的注释，这一段bootloader代码是从硬盘读取kernel程序的，也就是elf是指的kernel。 通过linux的readelf工具可以读取一个elf程序的头部，当然也可以读elf中的program的header。</p><div class="hljs"><pre><code class="hljs null">readelf -h obj/kernel/kernal</code></pre></div><p><img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_18-18-23.jpg" srcset="/img/loading.gif" alt> 针对Exercise3的四个问题：</p><ol><li>具体是何时从实模式切换到保护模式的？</li><li>bootloader的最后一条指令是什么，kernel的第一条指令是什么？</li><li>kernel的第一条指令在哪里？</li><li>boot loader是怎么知道kernel有多大，有多少个sector要读取的？</li></ol><p>给出自己的回答：</p><ol><li>如果说要精确到一条指令的话，应该是一个ljmp。</li></ol><p><img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_14-41-02.jpg" srcset="/img/loading.gif" alt></p><ol><li>bootloader最后一条指令是<code>((void (*)(void)) (ELFHDR->e_entry))();</code>，kernel的第一条指令是<code>movw $0x1234,0x472</code>。</li><li>kernel的第一条指令在kern/entry.S中。</li><li>kernel是elf结构的，读一个头部就对整个kernel的结构一清二楚了。</li></ol><p><img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_15-03-27.jpg" srcset="/img/loading.gif" alt></p><blockquote><p><em>但是又有一个问题了，只不过是跳转了一个地址，处理器怎么就知道该进入保护模式了呢，难道仅仅是因为这个地址是1MB之外的地址吗？因为第一次进入了1MB之外的区间，所以就进了保护模式？</em></p></blockquote><h2 id="Loading-the-kernel"><a href="#Loading-the-kernel" class="headerlink" title="Loading the kernel"></a>Loading the kernel</h2><p>首先课程网站建议熟悉一下c语言中的指针操作，强烈监狱补全一下K&R，然后脑补一下pointer.c中程序的执行过程。 <img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_18-18-31.jpg" srcset="/img/loading.gif" alt> 我觉得pointer.c中的关于指针和数组的操作都挺简单的，就我个人而言唯一不太熟悉的就是变量在内存中的布局，大端小端，补码反码，指针的强制类型转换等等，所以我自己写了个c程序练练手。</p><div class="hljs"><pre><code class="hljs null">#include<stdio.h>typedef struct {    int i;    char ch;}Em;int main(){    int a[6]={1,2,4,8,16,1<<15};    int *i;    char *ch;    Em *emPtr;    i=&a[5];    ch=(char *)i;    printf("256 converted to ch ptr:%d\n",*ch);    i=&a[4];    ch=(char *)i;    printf("16 converted to ch ptr:%d\n",*ch);    printf("Then let ch ptr increment.Now ch ptr:%d\n",*(++ch));    Em em;    em.i=256;    em.ch=64;    emPtr=&em;    ch=(char *)emPtr;    printf("The size of struct(int,char) is %d\n",sizeof(em));    printf("The first byte of struct(int:256,char:64) is %d\n",*ch);    printf("The second byte is %d\n",*(++ch));    printf("The third byte is %d\n",*(++ch));    printf("The forth byte is %d\n",*(++ch));    printf("The last byte is %d\n",*(++ch));    return 0;}</code></pre></div><p>运行结果如下： <img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_18-41-20.jpg" srcset="/img/loading.gif" alt></p><ol><li>首先是大端小端的问题，如果一个变量的长度超过一个字节，在我这台PC机的架构上，低字节存放在低地址。上述程序中让一个字符指针指向一个整数1<<15的第一个字节，是0，说明是低字节。</li><li>对于结构体和对象的内存对齐，可以看到本来5个byte的结构体占了8个byte。虽然我程序的输出中最后一行说的是last byte，但其实这并不是最后一个，而是倒数第4个，后面还有3个byte。</li></ol><p>再回到kernel，从代码的语义中不难看出，kernel是一段elf格式的程序，elf的格式这里就不详细的研究了。</p><div class="hljs"><pre><code class="hljs null">objdump -h obj/kern/kernel</code></pre></div><p><img src="https://oss.kherrisan.cn/Snipaste_2018-01-30_18-59-28.jpg" srcset="/img/loading.gif" alt> 上图罗列的是程序中的各个段的地址，我们主要关心的有三个:.text,.rodata,.data。其中text是要执行的代码段，rodata是只读数据段，data是数据段。 每个段都有LMA和VMA两个项，其中</p><ul><li>LMA:load address，标记这个段要加载到内存里的哪个位置中去。</li><li>VMA:link address，标记这个段中的指令要从哪里执行。</li></ul><p>一般来说VMA和LMA是一样的。 课程网站介绍说，BIOS会默认把bootloader加载到0x7c00的位置，那么这个7c00是个典型值呢还是特殊值呢？经过百度： <a href="http://blog.csdn.net/bkxiaoc/article/details/50380835" target="_blank" rel="noopener" title="为何在x86构架中 BIOS 会将 MBR 装载到 0x7c00地址处?">为何在x86构架中 BIOS 会将 MBR 装载到 0x7c00地址处?</a> 总之就是有这么个地址，既不是芯片厂商决定的，也不是操作系统厂商决定的，就一直沿用至今了。 BIOS总是将boot sector加载到7c00，按照正常思路bootloader也应该从7c00开始运行（也就是说LMA也应是7c00），那么如果把link address改成别的地址会发生什么呢？ <img src="https://oss.kherrisan.cn/Snipaste_2018-02-07_19-45-42.jpg" srcset="/img/loading.gif" alt> 变成死循环了，跳不出来了。Emmmmmmm，然我换一个7f00再换一个值试一下。改为7d00。 还是死循环，说明这个地址有问题，跳转语句跳转不到或者是别的什么原因。 另外，bootloader中加载全局描述符表寄存器的指令（lgdt）的操作数是一个错误的地址，同样导致了运行的错误。那么这是为什么呢，为什么只有ljmp和lgdt这两个指令受到了影响呢。我觉得有两个原因：</p><ol><li>指令是顺序执行的，从7c00开始一条一条往下走，只要不是多一行少一行就不会有错。</li><li>链接的时候，链接器会把符号（如全局变量、函数等等）根据VMA替换成地址。指令后面的操作数是立即数或绝对地址或者寄存器的话，就不会被替换，自然不会受到影响；如果是标号，比如跳转语句，就可能会受到影响。</li></ol><p>可以看到，lgdt和ljmp这两句指令的操作数都是有符号地址的。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-07_20-28-50.jpg" srcset="/img/loading.gif" alt> 为什么在刚刚进入bootloader和刚刚进入kernel的时候，0x1000000处的数据不一样？ 我一开始以为是保护模式下和实模式下，这个地址代表不同的含义。然而真正的原因是这样的： kernel的VMA是0x00100000，所以bootloader会把kernel载入到这个位置，所以前后的数据是不一样的，而刚刚进入kernel的时候100000存放的肯定是kernel的text段的第一条指令了。</p><h1 id="The-Kernel"><a href="#The-Kernel" class="headerlink" title="The Kernel"></a>The Kernel</h1><h2 id="Using-virtual-memory-to-work-around-position-dependence"><a href="#Using-virtual-memory-to-work-around-position-dependence" class="headerlink" title="Using virtual memory to work around position dependence"></a>Using virtual memory to work around position dependence</h2><p>操作系统内核往往会载入到教高的内存中，为的是把更多的较低的部分保留给用户的应用程序。比如JOS中，kernel的VMA（link address，即开始执行的地址）是0xf01000000。但是并不是每台电脑都有这么大的主存空间。 为了屏蔽这样的问题，就需要处理器的内存管理硬件来对这样的地址做一个转换（如把VMA转换到LMA）。 现在，我们将要使用手写的、静态初始化的页目录和页表来实现映射4MB物理内存空间的功能。在这个功能启动之前，内存地址都是按照线性地址来处理的，启动之后，所有地址都会经过虚拟内存管理硬件来处理，转换成物理地址。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-08_15-12-08.jpg" srcset="/img/loading.gif" alt></p><h2 id="Formatted-Printing-to-the-Console"><a href="#Formatted-Printing-to-the-Console" class="headerlink" title="Formatted Printing to the Console"></a>Formatted Printing to the Console</h2><p>关于格式化输出printf的底层实现的内容。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-08_15-46-42.jpg" srcset="/img/loading.gif" alt> Lab要求回答下面几个问题：</p><h3 id="1-printf-c和console-c的关系，console-c提供了哪些函数。"><a href="#1-printf-c和console-c的关系，console-c提供了哪些函数。" class="headerlink" title="1.printf.c和console.c的关系，console.c提供了哪些函数。"></a>1.printf.c和console.c的关系，console.c提供了哪些函数。</h3><p>printf.c提供的函数是能够直接供用户调用的<code>printf("%d%d",a,b)</code>，console.c中的函数负责与设备以及设备的端口（设备中的寄存器）进行IO交互，其中比较重要的函数有：</p><ol><li>cga_putc：把单个字符输出到屏幕上，包含\转移的特殊字符的处理，同时负责维护一个缓冲区。</li><li>serial_putc：把单个字符传到串口设备。</li><li>lpt_putc：把单个字符传到并口设备。</li></ol><h3 id="2-解释下面的代码的作用。"><a href="#2-解释下面的代码的作用。" class="headerlink" title="2.解释下面的代码的作用。"></a>2.解释下面的代码的作用。</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-08_15-59-10.jpg" srcset="/img/loading.gif" alt> crt_buf数组代表了显示器的缓冲区，显示器的屏幕大小是固定的，只能显示多少行多少列，这个最大的字符个数就是CRT_SIZE变量，如果要显示的长度超过最大字符个数，说明要把屏幕向上滚动，即原来的第0行的内容消失，原来的第1行内容显示在第0行，原来的第2行显示到现在的第1行，以此类推，现在的最后一行全部为空。</p><h3 id="3-cons-putc-va-arg-and-vcprintf"><a href="#3-cons-putc-va-arg-and-vcprintf" class="headerlink" title="3.cons_putc, va_arg, and vcprintf"></a>3.cons_putc, va_arg, and vcprintf</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-08_16-31-13.jpg" srcset="/img/loading.gif" alt> fmt指向的应该是前面的字符串，pa指向的应该是后面的参数列表。从编译后的代码可以看到，gcc的传参方式是先压参数列表尾部的参数到栈中，再压前部的参数，即倒序的压栈。</p><div class="hljs"><pre><code class="hljs null">vcprintf("x %d, y %x, z %d\n",va_list(1,2,3));cons_putc('x');cons_putc(' ');var_arg(va_list(1,2,3),int)cons_putc('1');cons_putc(',');cons_putc(' ');cons_putc('y');cons_putc(' ');var_arg(va_list(1,2,3),unsigned int)cons_putc('3');cons_putc(',');cons_putc(' ');cons_putc('z');cons_putc(' ');var_arg(va_list(1,2,3),int)cons_putc('4');</code></pre></div><h3 id="4-运行代码"><a href="#4-运行代码" class="headerlink" title="4.运行代码"></a>4.运行代码</h3><p>要求运行下面这段代码，我本来是自己编写了一个c文件来编译运行这个代码，发现提示cprintf是个undefined reference，据说是这个函数无法直接使用。</p><p>int x = 1, y = 3, z = 4;<br>cprintf(“x %d, y %x, z %d\n”, x, y, z);</p><p>因此就在kern\monitor.c里添加了一条指令来运行这段代码。 <img src="https://oss.kherrisan.cn/Snipaste_2018-06-07_22-19-18.jpg" srcset="/img/loading.gif" alt> 具体的调用过程这里就不写了。 为什么输出的是He110 World呢，原因是57616转换为16进制为e11o，x86是小端顺序的，也就是低地址存放串的尾部，高地址存放串的首部，从低地址开始遍历0x00646c72，先输出的是0x72（注意还是16进制的），然后是0x6c，0x64，0x00，由于是%s的参数，所以每一个字节都会被当作char处理，输出字符串为rld\0，最后的\0是不输出的，仅仅是为了帮助判断跳出循环。 如果架构变为大端存储，57616不需要变，因为输出数字时打印字符的顺序肯定是从数字高位向地位输出的。大端存储，低地址存放串的首部，需要rld，那么就要0x726c6400。</p><h3 id="5-va-arg宏实际上执行的是出栈操作"><a href="#5-va-arg宏实际上执行的是出栈操作" class="headerlink" title="5.va_arg宏实际上执行的是出栈操作"></a>5.va_arg宏实际上执行的是出栈操作</h3><p>如果cprintf的变长参数不够填充格式化字符串，那会打印什么？即ap中存储的参数小于等于格式化字符串中的占位符个数，那么打印的字符应该是不确定的，取决于栈里面存放的下一个内容是什么。</p><h3 id="6-如果GCC按照参数列表顺序压栈"><a href="#6-如果GCC按照参数列表顺序压栈" class="headerlink" title="6.如果GCC按照参数列表顺序压栈"></a>6.如果GCC按照参数列表顺序压栈</h3><p>当然，格式化字符串和边长参数列表始终是分离的，不会因为压栈顺序而产生影响，但是要从变长参数列表中取出变量的时候，就和压栈顺序有关了。我的想法是给cprintf添加一个参数，表示需要输出的变量的个数，这样可以先一次性全部得到（出栈）需要使用的变量，然后逆序输出。</p><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><p><img src="https://oss.kherrisan.cn/Snipaste_2018-06-08_16-24-25.jpg" srcset="/img/loading.gif" alt> 进入了test_backtrace(5)之后，esp是0xf010ffc8，ebp是0xf010ffd8。 从汇编代码可以看到，ebp和ebx是肯定被压入栈了，占2个字长，参数5肯定也被压栈了，占一个字长，</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/807d354d/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——HashMap</title>
      <link>http://www.kherrisan.cn/posts/3bd06c35/</link>
      <guid>http://www.kherrisan.cn/posts/3bd06c35/</guid>
      <pubDate>Wed, 14 Feb 2018 16:08:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;strong&gt;本部分的内容可能会随着java版本的变化而产生较大的变化，因此事先注明：下面的代码和原理都是基于JDK1.8。&lt;/strong&gt; &lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-02-14_13-15-56-1.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; Map是一种不同于List、Set和Queue的数据结构，其中存放的每个单元实际上包含两个元素————Key和Value，这两个元素都是开发人员所关心的。Map描述的是Key和Value的对应关系，就如同List中一个index对应一个element，只是Map的Key的类型并不一定是整数，可以是其他任何类型。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><strong>本部分的内容可能会随着java版本的变化而产生较大的变化，因此事先注明：下面的代码和原理都是基于JDK1.8。</strong> <img src="https://oss.kherrisan.cn/Snipaste_2018-02-14_13-15-56-1.jpg" srcset="/img/loading.gif" alt> Map是一种不同于List、Set和Queue的数据结构，其中存放的每个单元实际上包含两个元素————Key和Value，这两个元素都是开发人员所关心的。Map描述的是Key和Value的对应关系，就如同List中一个index对应一个element，只是Map的Key的类型并不一定是整数，可以是其他任何类型。</p><a id="more"></a><p> <img src="https://oss.kherrisan.cn/Snipaste_2018-02-14_15-53-23.jpg" srcset="/img/loading.gif" alt> HashMap继承了AbstractMap，实现了Map、Cloneable和Serializable接口。 其中Map接口如下：</p><div class="hljs"><pre><code class="hljs xquery">public interface Map<K,V>{    int size();   <span class="hljs-built_in"> boolean</span> isEmpty();   <span class="hljs-built_in"> boolean</span> containsKey<span class="hljs-built_in">(key</span>);   <span class="hljs-built_in"> boolean</span> containsValue(<span class="hljs-keyword">value</span>);    get<span class="hljs-built_in">(key</span>);    put<span class="hljs-built_in">(key</span>,<span class="hljs-keyword">value</span>);   <span class="hljs-built_in"> remove</span><span class="hljs-built_in">(key</span>);    putAll(<span class="hljs-keyword">map</span>);    clea();    keySet();    values();    entrySet();    getOrDefault<span class="hljs-built_in">(key</span>,defaultValue);    forEach(action);    replaceAll(<span class="hljs-keyword">function</span>);    putIfAbsent<span class="hljs-built_in">(key</span>,<span class="hljs-keyword">value</span>);   <span class="hljs-built_in"> remove</span><span class="hljs-built_in">(key</span>,<span class="hljs-keyword">value</span>);   <span class="hljs-built_in"> replace</span><span class="hljs-built_in">(key</span>,oldValue,newValue);   <span class="hljs-built_in"> replace</span><span class="hljs-built_in">(key</span>,<span class="hljs-keyword">value</span>);    computeIfAbsent<span class="hljs-built_in">(key</span>,mappingFunction);    compute<span class="hljs-built_in">(key</span>,remappingFUnction);    merge<span class="hljs-built_in">(key</span>,<span class="hljs-keyword">value</span>,remappingFunction);}</code></pre></div><p>大部分函数的参数和返回值都是Key的类型或Value的类型，少数几个Java 8中的方法为函数式编程提供了支持，能够传lambda表达式为参数。 回到HashMap。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="静态类属性"><a href="#静态类属性" class="headerlink" title="静态类属性"></a>静态类属性</h3><p>静态属性中，除了两个用来约束capacity的属性之外：</p><h4 id="DEFAULT-LOAD-FACTOR"><a href="#DEFAULT-LOAD-FACTOR" class="headerlink" title="DEFAULT_LOAD_FACTOR"></a>DEFAULT_LOAD_FACTOR</h4><p>默认装载因子，0.75。装载因子是一个很影响Hash容器效率的属性，反映的是Hash容器中数据的疏密程度。装载因子过大，Hash容器中绝大多数桶都放有元素，但每个桶中的链表很有可能会很长，这样在散列冲突的时候进行搜索就会花费一定的时间；装载因子过小，会导致空间利用率过低。 从直观上来说，装载因子决定了capacity的动态调节。</p><h4 id="TREEIFY-THRESHOLD"><a href="#TREEIFY-THRESHOLD" class="headerlink" title="TREEIFY_THRESHOLD"></a>TREEIFY_THRESHOLD</h4><p>HashMap使用的结构是可以动态变化的，可以是List或者Tree，做出选择的标准就是bucket（桶）的数量，如果数量大于这个阈值，就由List变为Tree。 取值为8。</p><h4 id="UNTREEIFY-THRESHOLD"><a href="#UNTREEIFY-THRESHOLD" class="headerlink" title="UNTREEIFY_THRESHOLD"></a>UNTREEIFY_THRESHOLD</h4><p>如果HashMap中桶的数量在remove的过程中逐渐变小，并越过了这个阈值，就untreeify这个map。换言之，使用Tree变为List。 取值为6。</p><h4 id="MIN-TREEIFY-CAPACITY"><a href="#MIN-TREEIFY-CAPACITY" class="headerlink" title="MIN_TREEIFY_CAPACITY"></a>MIN_TREEIFY_CAPACITY</h4><p>如果table的capacity过小，是不允许treeify的，只有capacity超过这个值，并且某个桶的链表长度超过了threshold，才会将那个桶treeify。</p><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>Node的列表。</p><h4 id="entrySet"><a href="#entrySet" class="headerlink" title="entrySet"></a>entrySet</h4><p>将一对key-value看做一个entry，在以entry为单位遍历的时候，就需要一个容器来承载所有的entry，entrySet属性用于保存这个容器。它是一个Set<entry<k,v>></entry<k,v></p><h4 id="threshold"><a href="#threshold" class="headerlink" title="threshold"></a>threshold</h4><p>下一个需要resize的值。</p><h4 id="loadFactor"><a href="#loadFactor" class="headerlink" title="loadFactor"></a>loadFactor</h4><p>装载因子。size/capacity。</p><h2 id="其他内部类"><a href="#其他内部类" class="headerlink" title="其他内部类"></a>其他内部类</h2><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>桶节点，多个Node组成了一个链表。每个Node保存自身的hash、key、value和next。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>其实各个方法所起的作用大都很简单，无非就是增删改查，重点在于散列的原理和解决冲突的办法。首先来看getNode方法如何根据hash值找到对应的节点。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-14_19-03-24.jpg" srcset="/img/loading.gif" alt> 该函数有两个参数，一个是hash值，一个是key值，hash值用来找到对应的bucket，key值用来验证或解决冲突。</p><ol><li>首先通过table[(table.length - 1) & hash]找到hash对应的桶。进行按位与的目的就是为了把hash的空间映射到表空间中，相当于hash%table.length。</li><li>检查桶中的节点的hash、key是否和参数一致，确认是否是想要找的那个。</li><li>如果通过散列找到的桶中的节点不是所要的节点的话，说明有冲突了，就需要进一步搜索。</li><li>如果桶中的节点是树节点，调用getTreeNode方法进行搜索。其实是一颗红黑树。</li><li>如果不是树节点，说明是一个链表，按照开链法的底层构造进行遍历搜索，直到找不到，返回null。这里判断是不是树节点使用了instanceof关键字。</li></ol><p>其中第一步从table中取对应的桶，使用了按位与运算，将hash映射到table.length-1的空间内。<strong>由于table的长度始终是2的整数次方</strong>，转为二进制后各位均为1，因此这里的按位与运算从结果上看相当于取余（mod）运算。至于这里使用按位与而不是取余运算，我认为还是处于效率的考虑。 操作Map时，大部分函数都需要key作为参数，在HashMap结构内部通过key计算出一个hash值，hash值的计算过程如下图所示： <img src="https://oss.kherrisan.cn/Snipaste_2018-02-14_19-12-49.jpg" srcset="/img/loading.gif" alt> 通过将key的hashCode方法的返回值无符号右移16位，再与自身异或，得到正式的用于散列的hash值。显然，在这个过程中，hashCode方法起到了较为重要的作用。先右移16位再与自己异或的目的是为了让低16位和高16位能够充分参与到散列键的运算中，16位是个不小的数字。 异或是一个神奇的运算符，他之所以神奇，是因为他和与、或相比，能够使结果最为均匀的分布。就像洗牌洗的最均匀一样。真值表就能说明这个问题：</p><p>and</p><p>or</p><p>xor</p><p>0</p><p>0</p><p>0</p><p>0</p><p>0</p><p>0</p><p>1</p><p>0</p><p>1</p><p>1</p><p>1</p><p>0</p><p>0</p><p>1</p><p>1</p><p>1</p><p>1</p><p>1</p><p>1</p><p>0</p><p>从表中可以看出，and和or得到的0和1的结果个数都不相同，只有xor得到的0和1的个数才是相同的。 使用hashCode的时候，通常要使得分布较为均匀，使用and和or运算都会造成0或者1的偏多或偏少，因此计算hashCode的代码常常用到异或操作。</p><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><p>hashCode方法是Object类定义的方法之一，用来返回某个对象的散列值。在Object类的定义中，hashCode的默认实现返回的是该对象所在内存的地址。通常在涉及到HashSet、HashMap、HashTable之类的容器时，需要开发者重新考虑自定义的类的hashCode计算方式。 hashCode的计算需要遵循一些规则，这有助于容器类操作效率的提升以及正确性的保证。</p><blockquote><ul><li>Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.（一个Java程序运行的过程中，同一个对象返回的hashCode必须一致。）</li><li>If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.（两个相等（equals）的对象的hashCode必须一致。）</li><li>It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.（不想等的对象的hashCode不必不同，但不同更好。）</li></ul></blockquote><p>针对最后一点，可以假设如下情境： 一系列数个对象返回的hashCode都是相等的，那么HashMap或其他Hash容器散列的时间复杂度接近于线性，因为需要逐个遍历一边。 在网上找到一个计算hashCode的较为合适的模式：通过加入两个质数成分，将一个对象的属性映射到不同的域上面，最后相加得到散列值。虽然这个计算方法中没有用到异或操作，但应该也是值得借鉴的一种写法。</p><div class="hljs"><pre><code class="hljs angelscript">@Override<span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> hashCode() {    <span class="hljs-built_in">int</span> hash = <span class="hljs-number">7</span>;    hash = <span class="hljs-number">31</span> * hash + (<span class="hljs-built_in">int</span>) id;    hash = <span class="hljs-number">31</span> * hash + (name == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : name.hashCode());    hash = <span class="hljs-number">31</span> * hash + (email == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : email.hashCode());    <span class="hljs-keyword">return</span> hash;}</code></pre></div><h3 id="putVal"><a href="#putVal" class="headerlink" title="putVal"></a>putVal</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-15_12-05-09.jpg" srcset="/img/loading.gif" alt> <strong>如果有多个线程同时运行到上面代码截图的光标所在行，会出现put的值丢失的问题。</strong></p><ol><li>检查table是否时null或者capacity是否为0，如果是，resize，调整table，准备放东西进去了。</li><li>检查散列的桶table[(n-1)&hash]是否有元素，如果没有，就创建一个节点，把值放进去，就结束了。</li><li>散列冲突时，用变量e保存存放该key的位置。 3.1 如果桶中第一个节点的key和hash都一致，则只需要在后续步骤修改该节点的value。 3.2 如果桶中第一个节点是一个树节点（红黑树），调用putTreeVal函数存放键值。 3.3 否则，从第一个节点开始，沿着链表逐个遍历，找到hash和key都一致的链表中的某个节点，如果找不到，就存放在最后一个节点。如果走到头了发现这个链表过长，就会把这个链表变成一颗红黑树，即只有在链表尾部增加节点的时候才会检测是否需要treeify。</li><li>对找到的或者确定新增的节点，设定其value。如果是更新而不是新增，就返回原来的value。</li></ol><p>putVal的过程用流程图描述如下：（图片来源：<a href="https://www.cnblogs.com/softidea/p/7261111.html" target="_blank" rel="noopener">https://www.cnblogs.com/softidea/p/7261111.html</a>） <a href="https://images2017.cnblogs.com/blog/280044/201707/280044-20170731003658755-1433505876.png" target="_blank" rel="noopener"><img src="https://images2017.cnblogs.com/blog/280044/201707/280044-20170731003658755-1433505876.png" srcset="/img/loading.gif" alt></a> 也就是说，经过多次putVal之后的HashMap应该是链表和红黑树并存的情况，画出来就是下面这种结构：（图片来源：<a href="https://www.cnblogs.com/zhangyinhua/p/7698642.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangyinhua/p/7698642.html</a>） <a href="https://images2017.cnblogs.com/blog/999804/201710/999804-20171020102900959-842879038.png" target="_blank" rel="noopener"><img src="https://images2017.cnblogs.com/blog/999804/201710/999804-20171020102900959-842879038.png" srcset="/img/loading.gif" alt></a></p><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>resize用于动态调整table的大小，是HashMap成员函数中代码行数最长的函数，虽然逻辑并不复杂，但是有很多细节需要仔细考虑。</p><div class="hljs"><pre><code class="hljs haxe">final Node<K,V>[] resize() {        Node<K,V>[] oldTab = table;        int oldCap = (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : <span class="hljs-type">oldTab</span>.length;        int oldThr = threshold;        int <span class="hljs-keyword">new</span><span class="hljs-type">Cap</span>, <span class="hljs-keyword">new</span><span class="hljs-type">Thr</span> = <span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span> (oldCap > <span class="hljs-number">0</span>) {            <span class="hljs-keyword">if</span> (oldCap >= MAXIMUM_CAPACITY) {                threshold = Integer.MAX_VALUE;                <span class="hljs-keyword">return</span> oldTab;            }            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">new</span><span class="hljs-type">Cap</span> = oldCap << <span class="hljs-number">1</span>) < MAXIMUM_CAPACITY &&                     oldCap >= DEFAULT_INITIAL_CAPACITY)                <span class="hljs-keyword">new</span><span class="hljs-type">Thr</span> = oldThr << <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span>        }        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr > <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span>            <span class="hljs-keyword">new</span><span class="hljs-type">Cap</span> = oldThr;        <span class="hljs-keyword">else</span> {               <span class="hljs-comment">// zero initial threshold signifies using defaults</span>            <span class="hljs-keyword">new</span><span class="hljs-type">Cap</span> = DEFAULT_INITIAL_CAPACITY;            <span class="hljs-keyword">new</span><span class="hljs-type">Thr</span> = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);        }        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span><span class="hljs-type">Thr</span> == <span class="hljs-number">0</span>) {            float ft = (float)<span class="hljs-keyword">new</span><span class="hljs-type">Cap</span> * loadFactor;            <span class="hljs-keyword">new</span><span class="hljs-type">Thr</span> = (<span class="hljs-keyword">new</span><span class="hljs-type">Cap</span> < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?                      (int)ft : <span class="hljs-type">Integer</span>.MAX_VALUE);        }        threshold = <span class="hljs-keyword">new</span><span class="hljs-type">Thr</span>;        @SuppressWarnings({<span class="hljs-string">"rawtypes"</span>,<span class="hljs-string">"unchecked"</span>})            Node<K,V>[] <span class="hljs-keyword">new</span><span class="hljs-type">Tab</span> = (Node<K,V>[])<span class="hljs-keyword">new</span> <span class="hljs-type">Node</span>[<span class="hljs-keyword">new</span><span class="hljs-type">Cap</span>];        table = <span class="hljs-keyword">new</span><span class="hljs-type">Tab</span>;        <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) {            <span class="hljs-keyword">for</span> (int j = <span class="hljs-number">0</span>; j < oldCap; ++j) {                Node<K,V> e;                <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) {                    oldTab[j] = <span class="hljs-literal">null</span>;                    <span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)                        <span class="hljs-keyword">new</span><span class="hljs-type">Tab</span>[e.hash & (<span class="hljs-keyword">new</span><span class="hljs-type">Cap</span> - <span class="hljs-number">1</span>)] = e;                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e instanceof TreeNode)                        ((TreeNode<K,V>)e).split(<span class="hljs-built_in">this</span>, <span class="hljs-keyword">new</span><span class="hljs-type">Tab</span>, j, oldCap);                    <span class="hljs-keyword">else</span> { <span class="hljs-comment">// preserve order</span>                        Node<K,V> loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;                        Node<K,V> hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;                        Node<K,V> next;                        <span class="hljs-keyword">do</span> {                            next = e.next;                            <span class="hljs-keyword">if</span> ((e.hash & oldCap) == <span class="hljs-number">0</span>) {                                <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)                                    loHead = e;                                <span class="hljs-keyword">else</span>                                    loTail.next = e;                                loTail = e;                            }                            <span class="hljs-keyword">else</span> {                                <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)                                    hiHead = e;                                <span class="hljs-keyword">else</span>                                    hiTail.next = e;                                hiTail = e;                            }                        } <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);                        <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) {                            loTail.next = <span class="hljs-literal">null</span>;                            <span class="hljs-keyword">new</span><span class="hljs-type">Tab</span>[j] = loHead;                        }                        <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) {                            hiTail.next = <span class="hljs-literal">null</span>;                            <span class="hljs-keyword">new</span><span class="hljs-type">Tab</span>[j + oldCap] = hiHead;                        }                    }                }            }        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Tab</span>;    }</code></pre></div><ol><li>根据当前的capacity、threshold的情况，调整新的capacity和threshold到一个合适的值。</li><li>创建新的table。</li><li>把原来table中的元素搬移到新的table中去，在搬移的过程中，就会出现这样的问题：原来有些元素是冲突的，但table扩容之后就不一定冲突了。 3.1 如果是链表，并且没有后继节点，即没有冲突的，就直接复制到新的table中去。 3.2 如果是树节点，调用split方法。 3.3 否则，就搬移整个链表。开始遍历。 3.3.1 把从该节点出发的链表拆分成两个链表，如果节点的hash超过原table的长度的，放在lo中，如果没有超过，放在hi中。 3.3.2 lo还放在table原来的位置，hi放在原来的位置+原table长度的位置。</li></ol><p>在1.7的时候，map的扩容是采用在链表头部插入元素的方式，是倒序的，在多线程并发的时候可能会导致循环链表的出现，在1.8中，我没有找出可能会出现循环链表的情况。</p><h3 id="treeifyBin"><a href="#treeifyBin" class="headerlink" title="treeifyBin"></a>treeifyBin</h3><p>如果一个桶中链表存放的元素过多，在冲突后进行线性查找显然需要花费较多的时间，因此把结构修改为树型结构可以提高搜索的效率。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-15_12-56-26.jpg" srcset="/img/loading.gif" alt></p><ol><li>检查table的capacity是否达到要求，也就是说如果table长度过短，桶中的链表是没有资格treeify的，在这种情况下，往往resize就能够使链表长度缩短。</li><li>从散列到的节点的首节点开始，逐个将链表中的节点替换为树节点，设置好每个节点的prev和next。</li><li>treeify。</li></ol><h3 id="removeNode"><a href="#removeNode" class="headerlink" title="removeNode"></a>removeNode</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-15_13-07-42.jpg" srcset="/img/loading.gif" alt></p><ol><li>根据hash和key，找到对应的节点node。</li><li>如果是树节点，调用removeTreeNode方法；如果是链表节点，从链表中删掉。</li></ol><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>除了与其他数据结构中同样重要的conmodificatinexception之外，还需要关注一下遍历的顺序。</p><h3 id="HashIterator"><a href="#HashIterator" class="headerlink" title="HashIterator"></a>HashIterator</h3><p>是KeyIterator、ValueIterator、EntryIterator的基类，但并没有实现Iterator的接口。KeyIterator、ValueIterator、EntryIterator的next方法都是基于HashIterator的nextNode实现的。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-15_13-29-03.jpg" srcset="/img/loading.gif" alt> 在构造时进行迭代器的初始化工作，从table的0开始，找到第一个不为null的桶，作为第一个桶。</p><h4 id="nextNode"><a href="#nextNode" class="headerlink" title="nextNode"></a>nextNode</h4><p><img src="https://oss.kherrisan.cn/402986213d9199094e5db333036c6532.png" srcset="/img/loading.gif" alt> 首先检查conModification，如果modCount不一致就立刻fail。如果当前桶的链表中还存在下一个元素，就返回下一个元素；否则返回table中下一个不为null的桶。 显然next的顺序和存放元素的顺序没有太大关系，但是散列到同一个桶中的元素的先后与被遍历到的先后顺序可能是一致的。</p><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><p>调用HashMap的removeNode方法。</p><h2 id="其他内部类-1"><a href="#其他内部类-1" class="headerlink" title="其他内部类"></a>其他内部类</h2><h3 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h3><p>继承了LinkedHashMap.Entry类。为了尽可能的减少搜索的时间，使用的是红黑树。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-15_13-23-42.jpg" srcset="/img/loading.gif" alt></p><h3 id="KeySet、Values、EntrySet"><a href="#KeySet、Values、EntrySet" class="headerlink" title="KeySet、Values、EntrySet"></a>KeySet、Values、EntrySet</h3><p>都是基于对应的Iterator实现的。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/3bd06c35/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——HashSet</title>
      <link>http://www.kherrisan.cn/posts/4e69e352/</link>
      <guid>http://www.kherrisan.cn/posts/4e69e352/</guid>
      <pubDate>Wed, 14 Feb 2018 14:57:23 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-02-16_15-13-28.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; HashSet的实现是基于HashMap的，与Map不同的地方在于HashSet中Key对应的Value只需要一个标记即可。 由于HashSet最核心的部分————Hash已经由HashMap完成，因此只要加一个包装即可。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-16_15-13-28.jpg" srcset="/img/loading.gif" alt> HashSet的实现是基于HashMap的，与Map不同的地方在于HashSet中Key对应的Value只需要一个标记即可。 由于HashSet最核心的部分————Hash已经由HashMap完成，因此只要加一个包装即可。</p><a id="more"></a><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>保存了一个hashMap。此外还有一个静态属性来发挥标记的作用。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><div class="hljs"><pre><code class="hljs null">iterator();size();isEmpty();contains(Object);add(Object);remove(Object);clear();</code></pre></div><p>基本上所有方法都是直接调用HashMap中的方法，比如empty方法直接返回map.isEmpty()的结果，contains直接返回map.containsKey(Object)的结果。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>没有直接定义迭代器的内部类，而是复用HashMap的迭代器。</p><h2 id="其他内部类"><a href="#其他内部类" class="headerlink" title="其他内部类"></a>其他内部类</h2><p>无。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/4e69e352/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——Vector</title>
      <link>http://www.kherrisan.cn/posts/1b534228/</link>
      <guid>http://www.kherrisan.cn/posts/1b534228/</guid>
      <pubDate>Wed, 14 Feb 2018 14:45:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-02-14_13-22-11.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; Vector类的原型和ArrayList是一模一样的，实现了RandomAccess接口说明遍历的时候使用get方法比使用迭代器方法快（LinkedList就不必实现该接口），继承了AbstractList提供的一些较为基础和简单的方法实现（比如常常提到的modCount）。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-14_13-22-11.jpg" srcset="/img/loading.gif" alt> Vector类的原型和ArrayList是一模一样的，实现了RandomAccess接口说明遍历的时候使用get方法比使用迭代器方法快（LinkedList就不必实现该接口），继承了AbstractList提供的一些较为基础和简单的方法实现（比如常常提到的modCount）。</p><a id="more"></a><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>Vector也是基于数组实现的列表，因此拥有一个Object数组来存放元素，其长度就是概念上的Capacity。 此外，还有elementCount和capacityIncrement，前者用来记录数组中有效元素的个数（size），后者表示当size>capacity时，自动增长的长度。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>绝大多数方法都用synchronized修饰。</p><h3 id="ensureCapacity"><a href="#ensureCapacity" class="headerlink" title="ensureCapacity"></a>ensureCapacity</h3><p>在添加元素时确保数组够大，如果不够就需要扩容。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-14_13-31-38.jpg" srcset="/img/loading.gif" alt> 在grow时会使用到capacityIncrement，如果这个值大于0，就按这个值看扩大数组尺寸，否则就扩大一倍。当然还是要和minCapacity比一比，和Vector类的最大尺寸比一比。</p><h3 id="elements"><a href="#elements" class="headerlink" title="elements"></a>elements</h3><p>在之前的所有List中都没有见过类似的方法，该方法返回一个实现了Enumeration接口的匿名内部类的对象，供外部程序遍历。 在内部类中实现的方法也是保证了同步。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-14_13-49-36.jpg" srcset="/img/loading.gif" alt> 之所以在其他的List实现类都没有遇到类似的方法，是因为Enumeration接口的功能以及被迭代器所取代，现在已经很少使用了。 Enumeration只支持两个操作，一是判断是否还有元素，二是返回下一个元素。</p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>除了构造函数外，所有的public方法都用synchronized修饰，或者其间接的调用synchronized方法，如remove(Object)虽然没有synchronized修饰，但是其调用的removeElement(Object)是有synchronized的。 包括capacity(),size(),isEmpty()这些只需要返回一个属性的较为简单的方法，也是有同步控制的。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>和其他List基本一致，除了多了额外的synchronized之外。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Vector和CopyOnWriteArrayList都是线程安全的List，二者的区别在于:</p><ol><li>锁的方法不同：前者为使用synchronized，后者为使用ReentrantLock。但是二者都是可重入锁，也就是说一个synchronized的函数内部再调用一个synchronized函数是不会死锁的。</li><li>同步的范围不同，前者的读操作和写操作都同步了，后者读的操作没有加锁。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/1b534228/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JUC——CopyOnWriteArrayList</title>
      <link>http://www.kherrisan.cn/posts/c1bdaf6f/</link>
      <guid>http://www.kherrisan.cn/posts/c1bdaf6f/</guid>
      <pubDate>Sun, 11 Feb 2018 14:08:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;ArrayList和LinkedList都不是线程安全的。这时候就有必要研究一下CopyOnWriteArrayList了，一个略小众的容器类。 &lt;img src=&quot;https://oss.kherrisan.cn/Snipaste_2018-02-11_12-06-22.jpg&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; 光看这个类的原型好像还挺简单的。&lt;/p&gt;
&lt;p&gt;属性&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>ArrayList和LinkedList都不是线程安全的。这时候就有必要研究一下CopyOnWriteArrayList了，一个略小众的容器类。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-11_12-06-22.jpg" srcset="/img/loading.gif" alt> 光看这个类的原型好像还挺简单的。</p><p>属性</p><a id="more"></a><p>—</p><p>就两个属性：一把ReentrantLock（可重入锁），一个Object数组（violatile修饰）。 在多线程的情景下，由于每个线程都有一个自己的工作内存（类似于高速缓存），在多个线程访问同一个变量的时候，可能会出现缓存不一致的问题，如线程1和线程2都把变量a读入到自己的工作内存中，线程1对a执行自增，线程2对a执行自增，这时候本来应该自增两次的a由于缓存不一致只自增了一次。 violatile关键字保证了不同线程对该变量的可见性，即一个线程修改了这个值，其他线程能够立即可见。 ReentrantLock：同一个线程可以多次获取一把锁，但是也需要释放多次，全部释放之后其他线程才能获得这把锁。因为还没有深入研究他的源码，所以这里就一笔带过了。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>由于构造函数不太可能会受到多线程环境的影响，因此CopyOnWriteArrayList的构造函数和ArrayList的构造函数差不多，没有针对多线程的特殊处理。</p><h3 id="所有只读操作"><a href="#所有只读操作" class="headerlink" title="所有只读操作"></a>所有只读操作</h3><p>由于只读操作不会修改数组中的元素，因此也没有必要针对多线程进行特殊处理。 CopyOnWriteArrayList提供的只读操作包括：</p><ul><li>size()</li><li>isEmpty()</li><li>contains(Object)</li><li>indexOf(Object)</li><li>toArray()</li><li>get(index)</li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>光看CopyOnWriteArrayList的实现，好像也就比ArrayList多了一个获取锁和释放锁的步骤。 下图是CopyOnWriteArrayList的set。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-11_13-15-44.jpg" srcset="/img/loading.gif" alt> 区别： 0. 先获得锁，在finally中释放锁。 1. CopyOnWriteArrayList没有对index做检查，可能会出现数组越界。 2. CopyOnWriteArrayList是先拷贝了一个副本，然后在副本上修改，最后setArray设置对象的属性。这么做的原因可能是因为violetile对于引用类型只能使得引用指向不同的对象时其他线程可见，如果引用的对象的某个属性变了，或者引用的数组的某个元素变了，是不会触发对其他线程中该引用的变化可见的（和final的概念有点类似）。所以为了修改数组元素之后对其他线程变化可见，只能修改引用的数组。 这就是CopyOnWrite的名字的由来吧。 但这样，开发者可能就会担心效率问题了，毕竟每次简单的修改都要对数组拷贝一遍。</p><div class="hljs"><pre><code class="hljs null">package collection;import java.util.ArrayList;import java.util.List;import java.util.concurrent.CopyOnWriteArrayList;/** * Created by intellij IDEA.But customed by hand of Dokyme. * * @author dokym * @date 2018/2/11-12:00 * Description: */public class LearnCopyOnWriteArrayList {    private List<String> copyOnWriteList = new CopyOnWriteArrayList<>();    private List<String> arrayList = new ArrayList<>();    private static final int testCount = 1000000;    public static void main(String[] args) {        new LearnCopyOnWriteArrayList().run();    }    public void run() {        testCopyOnWriteList();        testArrayList();    }    public void testCopyOnWriteList() {        System.out.println("testCopyOnWriteList");        long start, end;        start = System.currentTimeMillis();        for (int i = 0; i < testCount; i++) {            copyOnWriteList.add("" + i);        }        end = System.currentTimeMillis();        System.out.println("Timespan: " + (end - start));    }    public void testArrayList() {        System.out.println("testArrayList");        long start, end;        start = System.currentTimeMillis();        for (int i = 0; i < testCount; i++) {            arrayList.add("" + i);        }        end = System.currentTimeMillis();        System.out.println("Timespan: " + (end - start));    }}</code></pre></div><p>运行结果如下： <img src="https://oss.kherrisan.cn/Snipaste_2018-02-11_13-37-59.jpg" srcset="/img/loading.gif" alt> 类似的写操作还有：</p><ul><li>add(index,object)及其他addXXX，虽然也是使用的数组，但是和ArrayList相比，逻辑相当直接，没有采用1.5倍扩容的策略。</li><li>remove(index)及其他removeXXX</li></ul><p>以remove(index)为例，详细分析一下他的代码： <img src="https://oss.kherrisan.cn/Snipaste_2018-02-11_14-14-10.jpg" srcset="/img/loading.gif" alt> 首先得到一个snapshot（其实就是记录一下引用，称不上快照），接着寻找对应需要被删除的那个object的index，再调用下一个remove函数。 下一个remove函数首先加锁，接着判断快照和当前的引用是不是同一个对象，如果不是，说明有其他线程在indexOf的过程中修改了数组，进入findIndex语句块。 findIndex语句块中首先在current中找有没有和要删除的object相同的，并且这个object的位置已经发生了变化的。如果在current中找到了，就删掉他。如果没有找到，下面有三个if。 如果current的长度比index小了，由于current已经被全部遍历过了，没有object，说明object已经在其他线程中被删掉了，那就直接返回。 如果current的长度比index大，index之前的已经全都找过了，没有object，那再看index处是不是object，如果是，就直接删除。 最后再在current中调用indexOf函数找一遍object，删掉它。 这段代码考虑了object在两个版本的数组中位置有没有发生变化，是否因为其他线程的修改导致object消失等因素。 做类似处理的还有addIfAbsent，其实只要让加锁的范围大一些就不需要写这么复杂的代码了，可能还是处于性能的考虑吧。</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>forEach没有实现CopyOnWrite，也就是说通过forEach修改某个元素的值在其他线程是不可见的。当然forEach只能得到每个元素的引用，但是不能修改引用。 <strong>实际上，通过get方法得到某个元素，然后修改那个元素的属性，这样的行为，对于其他线程也是不可见的。可以说，这个可见性不应该是COWArrayList所应该负责的。</strong></p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>不同于ArrayList和迭代器类，COWIterator是一个静态内部类，也就是不需要外部类的实例存在也可以实例化的内部类。 虽然该迭代器的形式和ArrayList的迭代器有所区别，但它不是线程安全的。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>因为是静态内部类，无法接触外部的实例变量，因此有一个COWArrayList的snapshot（一个Object数组）。 此外还有一个cursor记录下一个元素的index。 构造函数负责初始化snapshot。</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p>只支持hasNext,hasPrevious,next,previous,nextIndex,previousIndex,forEachRemaining。修改数组元素的方法在这个层面一律不支持。 由于不支持修改，也就没必要实现checkConmodification了。 <strong>实际上COWArrayList也并没有记录modCount。</strong></p><h2 id="其他内部类"><a href="#其他内部类" class="headerlink" title="其他内部类"></a>其他内部类</h2><p>COWSubList，作为COWArrayList的视图，也是静态内部类，但是手都持有了以恶搞COWArrayList的实例变量，修改时调用COWArrayList的方法进行修改，如果说COWArrayList是线程安全的话，SubList也应该是安全的。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/c1bdaf6f/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——LinkedList</title>
      <link>http://www.kherrisan.cn/posts/7b8114a5/</link>
      <guid>http://www.kherrisan.cn/posts/7b8114a5/</guid>
      <pubDate>Sat, 10 Feb 2018 12:43:22 GMT</pubDate>
      <description>
      
        &lt;p&gt;LinkedList不同于ArrayList，虽然二者都是List，呈现给用户的都是顺序列表容器，但是底层的实现是不一样的。ArrayList直接以Java的数组作为底层实现，数组中相邻元素在元素中也是相邻的，保持一致的顺序排列。而LinkedList的底层实现使用的是链表，即LinkedList中的元素在内存中不必相邻，不必连续排列，可以分散在各处，元素花费额外的空间存放指针来记录相邻元素的位置。 链表与数组各有各的优劣，数组的随机访问效率最高，但是要插入删除元素时必须要搬移其他元素；链表插入删除元素只需要常数时间复杂度，但是随机访问需要逐个遍历元素。 比较一下LinkedList和ArrayList分别继承了哪些类，实现了哪些接口。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>LinkedList不同于ArrayList，虽然二者都是List，呈现给用户的都是顺序列表容器，但是底层的实现是不一样的。ArrayList直接以Java的数组作为底层实现，数组中相邻元素在元素中也是相邻的，保持一致的顺序排列。而LinkedList的底层实现使用的是链表，即LinkedList中的元素在内存中不必相邻，不必连续排列，可以分散在各处，元素花费额外的空间存放指针来记录相邻元素的位置。 链表与数组各有各的优劣，数组的随机访问效率最高，但是要插入删除元素时必须要搬移其他元素；链表插入删除元素只需要常数时间复杂度，但是随机访问需要逐个遍历元素。 比较一下LinkedList和ArrayList分别继承了哪些类，实现了哪些接口。</p><a id="more"></a><p>public class LinkedList<e><br>    extends AbstractSequentialList<e><br>    implements List<e>, Deque<e>, Cloneable, java.io.Serializable<br>{}</e></e></e></e></p><p>public class ArrayList<e> extends AbstractList<e><br>        implements List<e>, RandomAccess, Cloneable, java.io.Serializable<br>{}</e></e></e></p><p>AbstractSequentialList是AbstractList的子类。AbstractList提供了少数的几个方法的实现，如indexOf、clear等，其余方法均是抽象方法。AbstractSequentialList继承了AbstractList，并已经实现了大部分如今使用容器时较为常用的方法，但是完全是基于迭代器ListIterator实现的。 Java标准库并不是仅仅只能提供实现好了的东西供人使用，他也提供了很多AbstractXXX类，这些抽象类实现了部分的功能，使得开发者只要根据自己的需求，实现少数的几个方法即可。<strong>即花费最少的精力让满足自己需求的数据结构融入到JDK的容器类框架中。</strong> 注释也写道：如果开发者想要实现自己的随机访问容器，可以继承AbastractList，如需要顺序访问容器，最好继承AbstractSequentialList。</p><p>/**<br> * This class provides a skeletal implementation of the {@link List}<br> * interface to minimize the effort required to implement this interface<br> * backed by a “random access” data store (such as an array).  For sequential<br> * access data (such as a linked list), {@link AbstractSequentialList} should<br> * be used in preference to this class.<br> *<br> * </p><p>To implement an unmodifiable list, the programmer needs only to extend<br> * this class and provide implementations for the {@link #get(int)} and<br> * {@link List#size() size()} methods.<br> *<br> * </p><p>To implement a modifiable list, the programmer must additionally<br> * override the {@link #set(int, Object) set(int, E)} method (which otherwise<br> * throws an {@code UnsupportedOperationException}).  If the list is<br> * variable-size the programmer must additionally override the<br> * {@link #add(int, Object) add(int, E)} and {@link #remove(int)} methods.<br> *<br> * </p><p>The programmer should generally provide a void (no argument) and collection<br> * constructor, as per the recommendation in the {@link Collection} interface<br> * specification.<br> *<br> * </p><p>Unlike the other abstract collection implementations, the programmer does<br> * <i>not</i> have to provide an iterator implementation; the iterator and<br> * list iterator are implemented by this class, on top of the “random access”<br> * methods:<br> * {@link #get(int)},<br> * {@link #set(int, Object) set(int, E)},<br> * {@link #add(int, Object) add(int, E)} and<br> * {@link #remove(int)}.<br> *<br> * </p><p>The documentation for each non-abstract method in this class describes its<br> * implementation in detail.  Each of these methods may be overridden if the<br> * collection being implemented admits a more efficient implementation.<br> *<br> * </p><p>This class is a member of the<br> * <a href="{@docRoot}/../technotes/guides/collections/index.html"><br> * Java Collections Framework</a>.<br> *<br> * @author  Josh Bloch<br> * @author  Neal Gafter<br> * @since 1.2<br> */</p><p>List接口规定了List必须提供的几个方法。 Deque是Double End Queue（双端队列）的缩写，常常发音为“deck”，队列的两端都可以添加、删除元素。</p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>提到LinkedList，就不得不先提一下这个静态内部类。他表示LinkedList中的节点，封装了列表中每个元素的值、前驱和后继节点的引用。LinkedList是典型的双向链表。没有成员函数。</p><div class="hljs"><pre><code>private static class Node<E> {    E item;    Node<E> next;    Node<E> prev;    Node(Node<E> prev, E element, Node<E> next) {        this.item = element;        this.next = next;        this.prev = prev;    }}</code></pre></div><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>与ArrayList相比，LinkedList（以下简称链表）的属性更少，因为不需要额外表示空列表了。 只有三个属性：size，first，last。 first代表链表的头节点，需要遵循一个不变式：要么first和last都是null，要么first的前驱为null并且first的值不为null。 last代表链表的尾节点，也要遵循：要么first和last都是null，要么last的后继为null并且last的值不为null。 也就是说空链表的first和last都是null，如果有元素，那么first和last都有可能被存放元素。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="linkFirst"><a href="#linkFirst" class="headerlink" title="linkFirst"></a>linkFirst</h3><p>在链表头部插入一个新的元素。这需要修改老的头节点的前驱、新的头节点的后继、链表的头节点。如果头节点为null，说明是个空链表，那么这个链表的头节点和尾节点应该都是这个新加入的节点。</p><h3 id="linkBefore"><a href="#linkBefore" class="headerlink" title="linkBefore"></a>linkBefore</h3><p>在某个节点之前插入一个元素，顺序需要稍微注意一下。</p><h3 id="unlinkXXX"><a href="#unlinkXXX" class="headerlink" title="unlinkXXX"></a>unlinkXXX</h3><p>从链表中删除一个节点。</p><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>根据索引获得链表中的元素。如果索引比size/2大，就从尾节点走，如果比size/2小，就从头节点开始遍历。</p><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>根据元素的equals方法，返回元素在链表中的索引。</p><h3 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h3><p>把参数（Collection）中的元素全部添加到某个index位置上。</p><div class="hljs"><pre><code>public boolean addAll(int index, Collection<? extends E> c) {    checkPositionIndex(index);    Object\[\] a = c.toArray();    int numNew = a.length;    if (numNew == 0)        return false;    Node<E> pred, succ;    if (index == size) {        succ = null;        pred = last;    } else {        succ = node(index);        pred = succ.prev;    }    for (Object o : a) {        @SuppressWarnings("unchecked") E e = (E) o;        Node<E> newNode = new Node<>(pred, e, null);        if (pred == null)            first = newNode;        else            pred.next = newNode;        pred = newNode;    }    if (succ == null) {        last = pred;    } else {        pred.next = succ;        succ.prev = pred;    }    size += numNew;    modCount++;    return true;}</code></pre></div><p>我觉得这段代码是LinkedList中比较有代表性的代码，要把一个集合中的所有元素插入到链表中的某个index上去，首先获得对于添加进来的所有元素的前驱和后继节点，如果在最后一个地方插入，后继为null，前驱为尾节点；如果在其他地方插入，后继为index处的节点，前驱为index处节点的前驱。然后就是一个一个插入，插入时如果前驱为null，说明是在链表头部插入，那么链表的首节点就是这个新的节点，后则的话前驱的后继节点就是新的节点，然后让新的节点成为下一个新的节点的前驱。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>和ArrayList一样，LinkedList对于concurrentModification也有限制，不能一边用foreach循环或迭代器遍历，一边用链表的remove或unlink方法删除元素。 ArrayList使用一个lastRet记住上一个返回的元素的位置，用于调用迭代器的remove方法时能够返回上一个节点的位置。链表也有一个lastRet记录上一个返回的节点。</p><h3 id="深入探究Array和LinkedList中迭代器的lastRet的作用"><a href="#深入探究Array和LinkedList中迭代器的lastRet的作用" class="headerlink" title="深入探究Array和LinkedList中迭代器的lastRet的作用"></a>深入探究Array和LinkedList中迭代器的lastRet的作用</h3><p>ArrayList的迭代器中这么用lastRet <img src="https://oss.kherrisan.cn/Snipaste_2018-02-10_16-40-55.jpg" srcset="/img/loading.gif" alt> lastRet初始化时是-1，也就是说，如果刚刚初始化了一个迭代器，还没有next，这时就remove，是不行滴。这符合一般的认识：迭代器在初始化的时候一般是指向第一个元素的前面，也就是说要next才能返回第一个元素。 为什么在add和remove之后，lastRet都要变成-1，从而禁止多次连续修改数组元素呢？从一般的认识上来说，连续的remove应该是符合需求的。 从使用的角度看</p><p>while(iterator.hasNext()){ //不管是从前往后还是从后往前。<br>    E cur=iterator.next();<br>    if(cur……){ //做一些检验，如果检验通过，就删除他。<br>         iterator.remove();<br>    }<br>}</p><p>那么如果我在remove之后让lastRet变成lastRet-1是否可行呢？首先，iterator并不是只能单向移动的，ListIterator都可以previous，如果一个元素一定要先取得——检验之后再决定删除的话，就不能保证lastRet-1是否被检验过（可能这个iterator一直是从后往前走的呢。。。）既然方向不确定，就不能根据上一个推出上上一个，把遍历顺序记录下来肯定也不现实，所以就干脆把lastRet改为-1，这样连续remove就会直接报错了吧（应该也是<strong>fail-fast</strong>的一种体现）。 太无聊了，写个benchmark来比一比ArrayList和LinkedList的插入效率吧。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-10_15-36-25.jpg" srcset="/img/loading.gif" alt> 众所周知，人们常说，ArrayList中进行插入删除元素的操作，由于需要元素的搬移，效率往往低于LinkedList。结果倒还真的出乎我意料。 如果仅仅是在列表尾端插入元素，那么二者的运行时间没有什么大的差别，如果是在固定位置（往往是较靠前的index）插入，LinkedList的优势才能显现出来。 从代码上来看，LinkedList在固定位置插入，需要线性时间来找到那个位置所对应的节点（也就是node函数），然后再用常数时间插入新元素，因为在代码中我把index固定为了0，较为靠前，因此找到节点花费的时间近似为常数时间。ArrayList在0处插入新元素，每次都要搬移后面的元素，更不要提数组的扩容后的复制了。 但是在第一张图中，在列表尾端插入元素，ArrayList却比LinkedList更快呢？即便ArrayList不需要搬移元素，但是数组的扩容，扩容之后的集体复制也需要线性时间啊。 忽然灵光一现，想到了分摊复杂度的概念，顿时就豁然开朗了。由于数组扩容并不是每次都扩容，每次都批量复制，把少数几次扩容和批量符指分摊到每次操作上，每次操作所需要的时间也就接近与常数时间了。 所以，还是那句话，数据结构的选择是要根据具体的情境、具体的业务需求决定的，不是简单的一句链表比数组插入得快所能概括的了的。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/7b8114a5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——ArrayList</title>
      <link>http://www.kherrisan.cn/posts/3e77724f/</link>
      <guid>http://www.kherrisan.cn/posts/3e77724f/</guid>
      <pubDate>Fri, 09 Feb 2018 18:18:05 GMT</pubDate>
      <description>
      
        &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs null&quot;&gt;public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; 
        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable
{}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<div class="hljs"><pre><code class="hljs null">public class ArrayList<E> extends AbstractList<E>         implements List<E>, RandomAccess, Cloneable, java.io.Serializable{}</code></pre></div><a id="more"></a><p>ArrayList继承了AbstractList，实现了List、RandomAccess、Cloneable、Serializable接口。 RandomAccess接口定义里没有函数，他只是一个标记。如果一个实现了List接口的类支持快速的随机访问（一般是常数时间的），那就要用实现这个接口。或者说如果</p><div class="hljs"><pre><code class="hljs null">for (int i=0, n=list.size(); i < n; i++)    list.get(i);</code></pre></div><p>比</p><div class="hljs"><pre><code class="hljs null">for (Iterator i=list.iterator(); i.hasNext(); )    i.next();</code></pre></div><p>快，那么就要实现该接口。对于使用该类的开发人员来说，在需要遍历一个List的时候，可以通过instanceOf判断是不是RandomAccess，如果是的话，用<code>get(i)</code>遍历更快，如果不是，用迭代器<code>next()</code>遍历更快。 ArrayList类似于C++中的vector，表示在内存中顺序存放的一组元素组成的数组。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>比较重要的属性有：</p><ol><li>Object[] elementDat：实际存放数组元素的数组。</li><li>DEFAULT_CAPACITY：默认的数组大小。</li><li>size：数组中实际存放的元素个数（不一定等于数组大小）。</li></ol><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>有三个构造函数，如果在构造函数中注明存放的元素个数，就会new一个这么大的数组；如果不注明元素个数，那么就不new数组，而是直接用一个静态空数组来表示存放内容；如果在构造函数中传入另一个collection对象，则会把所有的那个collection对象中的所有元素拷贝一份，作为本对象的存放内容。 常用的几个方法有：</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>随机修改数组元素，只需要常数时间。</p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>随机访问数组元素，只需要常数时间。</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>添加一个元素，可以以null为参数。</p><h4 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h4><p>如果在数组末尾添加元素，只需要常数时间，如果是在数组中部插入新元素，需要让插入位置以后的所有元素都向后挪动，所以就需要线性时间了。 在数组的末尾或者指定位置添加一个元素，在添加之前会先检查容量是否满足需求，即capacity是不是比size大1，如果放不下，就要考虑扩容到指定长度的问题了。</p><h4 id="ensureCapacityInternal"><a href="#ensureCapacityInternal" class="headerlink" title="ensureCapacityInternal"></a>ensureCapacityInternal</h4><p>具体而言，判断的逻辑是这样的：先手动指定一个数组最小长度（比如，在add之前，指定这个数组最小长度为size+1），看这个数组是不是默认大小的空数组，如果是的话，取指定数组长度和10（默认空间大小）的较大值；如果不是默认大小的空数组，就直接取指定的数组长度。这个值作为新的capacity，如果新的capacity比当前的capacity大的话，就要扩大数组了。但并不是直接扩大到新的capacity，而是看当前的capacity的1.5倍和新的capacity谁大，取较大的那个值作为最终扩容的数组长度。 同时扩容的时候会检查扩容后的数组长度是不是比最大长度大（MAX_ARRAY_SIZE），如果是，检查指定的数组长度是不是溢出了，如果是，就抛出异常，如果没有溢出并且指定的数组长度比MAX_ARRAY_SIZE，就取Integer.MAX_VALUE作为新的数组长度，否则就取MAX_ARRAY_SIZE作为新的数组长度。也就是说在数组长度较大的时候，长度要么是Integer.MAX_VALUE，要么是MAX_ARRAY_SIZE。</p><div class="hljs"><pre><code class="hljs null">private void grow(int minCapacity) {    // overflow-conscious code    int oldCapacity = elementData.length;    int newCapacity = oldCapacity + (oldCapacity >> 1);    if (newCapacity - minCapacity < 0)        newCapacity = minCapacity;    if (newCapacity - MAX_ARRAY_SIZE > 0)        newCapacity = hugeCapacity(minCapacity);    // minCapacity is usually close to size, so this is a win:    elementData = Arrays.copyOf(elementData, newCapacity);}</code></pre></div><p>比如：如果我调用默认构造函数，那得到的数组的capacity=0，size=0，如果我再add一次，那么我需要的size应该是1，但是由于当前数组是默认空数组，情况比较特殊，新的capacity是10，10>capacity，要扩容，capacity=0，1.5倍还是0，显然是10比较大，所以最终的数组长度就为1，并且把新的元素加add到最后一个。 如果现在有个ArrayList，size=20，capacity=32，add一个新的元素，需要的最小数组长度应该是20+1=21，21比32小，那就不用扩容了。 如果有个ArrayList，size=20，capacity=20，add一个新的元素，需要的最小数组长度应该是21，21>capacity，要扩容，扩容到30。</p><h4 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h4><p>同样要检查数组长度，有必要的话需要扩容，既可以在数组末尾添加元素，也可以在某个位置添加，显然需要线性时间，因为需要深拷贝。 <strong>添加元素的顺序即为参数Collection的迭代器的顺序。</strong></p><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>删除某个位置的元素，或者删除数组中的某个对象。二者都需要线性时间。可以以null为参数。 remove(Object)会通过equals从数组中找到第一个和参数相等的元素，然后移除他。 值得注意的是，remove中并没有数组缩容的逻辑，也就是说ArrayList只会变大不会变小。这点值得再继续研究一下。 写了一小段代码来测试一下ArrayList扩容的原理，因为elementData是protected的，所以要用反射才能获取到capacity。</p><div class="hljs"><pre><code class="hljs null">package collection;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.List;/** * Created by intellij IDEA.But customed by hand of Dokyme. * * @author dokym * @date 2018/2/9-13:07 * Description: */public class LearnArrayList {    private static Class arrayListClass;    private static Field elementDataField;    public static void main(String[] args) {        try {            arrayListClass = Class.forName("java.util.ArrayList");            elementDataField = arrayListClass.getDeclaredField("elementData");            elementDataField.setAccessible(true);            List<ListElement> elements = new ArrayList<>();            for (int i = 0; i < 100 ; i++){                elements.add(new ListElement("Dokyme"));                printListCapacity(elements);            }            for (int i = 0; i < 80; i++) {                elements.remove(elements.size() - 1);                printListCapacity(elements);            }        } catch (Exception e) {            e.printStackTrace();            System.exit(1);        }    }    private static void printListCapacity(List<ListElement> listElements) throws Exception {        System.out.println("Capacity is " + ((Object[]) elementDataField.get(listElements)).length);    }}</code></pre></div><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-09_15-26-44.jpg" srcset="/img/loading.gif" alt> 在测试的的过程中的确没有发现缩容的现象。</p><h4 id="batchRemove-Collection"><a href="#batchRemove-Collection" class="headerlink" title="batchRemove(Collection)"></a>batchRemove(Collection)</h4><p>能够批量删除本数组中所有出现在参数中的元素。</p><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>查询一次需要线性的时间复杂度，可以以null为参数。</p><h3 id="forEach、removeIf、replaceAll"><a href="#forEach、removeIf、replaceAll" class="headerlink" title="forEach、removeIf、replaceAll"></a>forEach、removeIf、replaceAll</h3><p>为函数式编程提供了支持。</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>调用Arrays.sort方法进行排序。排序算法今天暂时先不研究了。。。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>ArrayList有两个迭代器的内部类，一个是Itr，一个是ListItr，后者比前者的方法多一些。 Itr实现了next()、hasNext()、remove()、forEachRemaining()这些方法。 ListItr在Itr的基础上，多了add()、set()、previous()、xxxIndex()等方法。 <strong>ArrayList的方法中没有出现对并发访问的控制，基本上没有见过哪里抛出了<code>ConcurrentModificationException</code>，但是在迭代器的方法中却经常见到抛出这个异常的代码。 会导致这个异常的最经典的场景就是在一个<code>for</code>循环中一边用迭代器遍历数组（或者用增强for循环）一边给数组添加或删除元素。</strong></p><h3 id="ConcurrentModificationException"><a href="#ConcurrentModificationException" class="headerlink" title="ConcurrentModificationException"></a>ConcurrentModificationException</h3><p>ArrayList在add和remove的时候会自增一个modCount，这个modCount属性记录的是本对象的结构被修改的次数。迭代器也有一个相同功能的expectedModCount，在构造迭代器的时候，expectedModCount和modCount的值是相等的，一旦在循环体中调用了ArrayList的remove(index)或remove(Object)方法，使数组结构发生了变化，两个modCount就不一样了。 next函数的第一行就是检查两个modCount是否一致，不一致就抛出异常了。</p><div class="hljs"><pre><code class="hljs null">@SuppressWarnings("unchecked")public E next() {    checkForComodification();    int i = cursor;    if (i >= size)        throw new NoSuchElementException();    Object[] elementData = ArrayList.this.elementData;    if (i >= elementData.length)        throw new ConcurrentModificationException();    cursor = i + 1;    return (E) elementData[lastRet = i];}public boolean hasNext() {    return cursor != size;}public void remove() {    if (lastRet < 0)        throw new IllegalStateException();    checkForComodification();    try {        ArrayList.this.remove(lastRet);        cursor = lastRet;        lastRet = -1;        expectedModCount = modCount;    } catch (IndexOutOfBoundsException ex) {        throw new ConcurrentModificationException();    }}final void checkForComodification() {    if (modCount != expectedModCount)        throw new ConcurrentModificationException();}</code></pre></div><p>以上是java中ArrayList的迭代器Itr的几个函数的定义，其中hasNext就可能因为一边遍历一边修改数组导致返回值出现错误。 但也并不是就不能一边遍历一边添加删除元素了，Itr提供了remove方法，用于删除迭代器当前指向的元素，这个remove方法实际上是调用了ArrayList的remove方法，并修改expectedModCount到与modCount一致的状态。 当然，Itr的remove方法是要有条件的，就是在remove之前至少要有一次next方法，否则lastRet无法得到正确的值，使得迭代器删掉了这个元素之后不知道该指向哪个元素了。 当然，一边遍历一边添加删除数组还有另一种写法，就是依靠ArrayList的remove函数和传统的for循环，不使用增强的for循环或迭代器。 又写了一段代码测试remove的特性。 10个元素，分别是0-9，四次不同的循环，分别删除3，4，5，6。</p><div class="hljs"><pre><code class="hljs null">package collection;import java.util.ArrayList;import java.util.Iterator;import java.util.List;/** * Created by intellij IDEA.But customed by hand of Dokyme. * * @author dokym * @date 2018/2/9-13:07 * Description: */public class LearnArrayList {    private static void testTraditionalForLoop(List<ListElement> listElements) {        try {            //iterate using traditional for loop            for (int i = 0; i < listElements.size(); i++) {                ListElement cursor = listElements.get(i);                if (cursor.getName().equals("3")) {                    listElements.remove(i);                }            }            System.out.println("testTraditionalForLoop");            System.out.println(listElements);        } catch (Exception e) {            e.printStackTrace();        }    }    private static void testForEachLoop(List<ListElement> listElements) {        try {            //iterator using foreach loop            for (ListElement cursor : listElements) {                if (cursor.getName().equals("4")) {                    listElements.remove(cursor);                }            }            System.out.println("testForEachLoop");            System.out.println(listElements);        } catch (Exception e) {            e.printStackTrace();        }    }    private static void testIteratorRemove(List<ListElement> listElements) {        try {            //iterate using iterator,remove using iterator.remove            Iterator<ListElement> iterator = listElements.iterator();            while (iterator.hasNext()) {                ListElement current = iterator.next();                if (current.getName().equals("5")) {                    iterator.remove();                }            }            System.out.println("testIteratorRemove");            System.out.println(listElements);        } catch (Exception e) {            e.printStackTrace();        }    }    private static void testIteratorRemove2(List<ListElement> listElements) {        try {            //iterate using iterator,remove using ArrayList.remove            Iterator<ListElement> iterator = listElements.iterator();            while (iterator.hasNext()) {                ListElement current = iterator.next();                if (current.getName().equals("6")) {                    listElements.remove(current);                }            }            System.out.println("testIteratorRemove2");            System.out.println(listElements);        } catch (Exception e) {            e.printStackTrace();        }    }    public static void main(String[] args) {        try {            List<ListElement> listElements = new ArrayList<>();            for (int i = 0; i < 10; i++) {                listElements.add(new ListElement("" + i));            }            testTraditionalForLoop(listElements);            testForEachLoop(listElements);            testIteratorRemove(listElements);            testIteratorRemove2(listElements);        } catch (Exception e) {            e.printStackTrace();            System.exit(1);        }    }}</code></pre></div><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-09_20-05-15-1.jpg" srcset="/img/loading.gif" alt> 实验的结果是，使用传统for循环+ArrayList.remove，删除和遍历都没有问题；使用增强for循环和ArrayList.remove，删除成功，但是抛出了ConcurrentModificationException；使用迭代器循环+迭代器remove，遍历成功并且正确删除了5；使用迭代器循环+ArrayList.remove，抛出了ConcurrentModificationException。</p><h3 id="ListItr"><a href="#ListItr" class="headerlink" title="ListItr"></a>ListItr</h3><p>继承了Itr，并提过了几个额外的方法:previous,set,add。这个add是可以配合迭代器对象在遍历过程中添加元素的。但是同样有前提条件：lastRet必须有效，即在add之前必须调用一次next。</p><h3 id="lastRet"><a href="#lastRet" class="headerlink" title="lastRet"></a>lastRet</h3><p>这个变量很有意思，cursor代表写一个元素的index，那么上一个不就是cursor-1吗，为什么还要专门找一个变量来表示上一个变量的index呢？？？ 注意：Itr还是ListItr，都可以通过ArrayList的方法获得。</p><h2 id="其他内部类"><a href="#其他内部类" class="headerlink" title="其他内部类"></a>其他内部类</h2><h3 id="SubList"><a href="#SubList" class="headerlink" title="SubList"></a>SubList</h3><p>代表ArrayList的一部分，奇怪的是，没有继承ArrayList，而是直接继承AbstractList并实现了RandomAccess。概念类似于数据库中的视图，即把ArrayList中的内容截取一段，ArrayList和SubList中的数组元素实际上是相同的。任何一处修改，另一处也会更随着变化。 提供的数个方法和ArrayList相差无几（set、get、size、add、remove、addAll），区别在于要比ArrayList的对应方法多一步：检查comidification。 SubList也提供了自己的迭代器，是一个继承了ListIterator的匿名内部类。</p><h3 id="ArrayListSplitter"><a href="#ArrayListSplitter" class="headerlink" title="ArrayListSplitter"></a>ArrayListSplitter</h3><blockquote><p>Spliterator是一个可分割迭代器(splitable iterator)，可以和iterator顺序遍历迭代器一起看。jdk1.8发布后，对于并行处理的能力大大增强，Spliterator就是为了并行遍历元素而设计的一个迭代器，jdk1.8中的集合框架中的数据结构都默认实现了spliterator。</p></blockquote><p>jdk8的新特性，暂不研究。。。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/3e77724f/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Collection——总览</title>
      <link>http://www.kherrisan.cn/posts/a80f8f54/</link>
      <guid>http://www.kherrisan.cn/posts/a80f8f54/</guid>
      <pubDate>Fri, 09 Feb 2018 13:00:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;说明： 1. 本系列的内容主要为基于相关源码分析Java Collection的实现，包含List、Queue、Set 、Map这四大块。 2. 在学习和整理笔记的过程中，参考了网上其他前辈的资料，由于笔记最终会发布到网上，出于对原创的尊重和对原作者的感谢，需要在引用了前辈的文字、图片、代码处标记出处，但是为了方便（懒），我就不一一标注了，改为集中在本文开始部分罗列参考资料链接。&lt;strong&gt;再次对把自己的研究成果和学习资源上传到互联网上供他人参考和学习的前辈们表示感谢&lt;/strong&gt; 参考链接： &lt;a href=&quot;https://github.com/CarpenterLee/JCFInternals&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;深入理解Java集合框架&quot;&gt;[CarpenterLee/JCFInternals]深入理解Java集合框架&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>说明： 1. 本系列的内容主要为基于相关源码分析Java Collection的实现，包含List、Queue、Set 、Map这四大块。 2. 在学习和整理笔记的过程中，参考了网上其他前辈的资料，由于笔记最终会发布到网上，出于对原创的尊重和对原作者的感谢，需要在引用了前辈的文字、图片、代码处标记出处，但是为了方便（懒），我就不一一标注了，改为集中在本文开始部分罗列参考资料链接。<strong>再次对把自己的研究成果和学习资源上传到互联网上供他人参考和学习的前辈们表示感谢</strong> 参考链接： <a href="https://github.com/CarpenterLee/JCFInternals" target="_blank" rel="noopener" title="深入理解Java集合框架">[CarpenterLee/JCFInternals]深入理解Java集合框架</a></p><a id="more"></a><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>JDK提供的集合类包含两大块，一个是collection，一个是map，二者都提供了java对一些常用数据结构是实现，为开发者的日常使用提供了工具。 <img src="https://oss.kherrisan.cn/Snipaste_2018-02-09_12-43-43.jpg" srcset="/img/loading.gif" alt></p><hr><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-14_13-15-56.jpg" srcset="/img/loading.gif" alt> 俗话说，<strong>不要重复造轮子</strong>。既然JDK提供了相关实现，经过了JDK版本的迭代更新以及几十年的开发人员的使用和修改，经历了充分的检验，可以说是可靠的和可用的。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>虽然Java的泛型饱受诟病，collection还是基于泛型设计了相关的函数。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><img src="https://oss.kherrisan.cn/Snipaste_2018-02-09_12-59-08.jpg" srcset="/img/loading.gif" alt></p><h1 id="目录（暂定内容，后期会增加）"><a href="#目录（暂定内容，后期会增加）" class="headerlink" title="目录（暂定内容，后期会增加）"></a>目录（暂定内容，后期会增加）</h1><ol><li><a href="https://www.dokyme.cn/index.php/2018/02/09/java-collection-arraylist/" target="_blank" rel="noopener" title="ArrayList">ArrayList</a></li><li><a href="https://www.dokyme.cn/index.php/2018/02/10/java-collection-linkedlist/" target="_blank" rel="noopener" title="LinkedList">LinkedList</a></li><li><a href="https://www.dokyme.cn/index.php/2018/02/11/java-collection-…onwritearraylist/" target="_blank" rel="noopener" title="CopyOnWriteArrayList">CopyOnWriteArrayList</a></li><li><a href="https://www.dokyme.cn/index.php/2018/02/14/java-collection-vector/" target="_blank" rel="noopener" title="Vector">Vector</a></li><li><a href="https://www.dokyme.cn/index.php/2018/02/14/java-collection-hashmap" target="_blank" rel="noopener" title="HashMap">HashMap</a></li><li><a href="https://www.dokyme.cn/index.php/2018/02/14/java-collection-hashset/" target="_blank" rel="noopener" title="HashSet">HashSet</a></li><li><a href="https://www.dokyme.cn/index.php/2018/02/17/java-collection-linkedhashmap/" target="_blank" rel="noopener" title="LinkedHashMap">LinkedHashMap</a></li><li><a href="https://www.dokyme.cn/index.php/2018/02/19/java-collection-linkedhashset/" target="_blank" rel="noopener" title="LinkedHashSet">LinkedHashSet</a></li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/a80f8f54/#disqus_thread</comments>
    </item>
    
    <item>
      <title>自制Lex程序总结</title>
      <link>http://www.kherrisan.cn/posts/4fe1d90d/</link>
      <guid>http://www.kherrisan.cn/posts/4fe1d90d/</guid>
      <pubDate>Fri, 22 Dec 2017 00:12:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;编译原理实验一提供了三个层面的选择，第一层是最简单的，简单到我都忘记了是什么要求了；第二层是用程序实现基于DFA的词法分析器；第三层有些复杂，模仿Lex的功能，设计一个能够生成词法分析器源代码的程序，即“编译器的编译器”。我不自量力地选了第三层。 其实，第三次说难也不难，说简单的话倒真的到处都是坑。我停停写写，大概写了两三周，更加深刻地体会都自己写业务代码写的飞快，但是一旦碰到有些技术含量的代码就要开始面向Google编程的事实。 现在，程序写的差不多了，以及传到了Github上，还发了两个release版本，先贴上链接。 &lt;a href=&quot;https://github.com/Dokyme/DokymeLex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DokymeLex&lt;/a&gt; 我作此文的目的是，对于程序的结构，设计和实现的思路，做一个记录和总结，也包括一些反思。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>编译原理实验一提供了三个层面的选择，第一层是最简单的，简单到我都忘记了是什么要求了；第二层是用程序实现基于DFA的词法分析器；第三层有些复杂，模仿Lex的功能，设计一个能够生成词法分析器源代码的程序，即“编译器的编译器”。我不自量力地选了第三层。 其实，第三次说难也不难，说简单的话倒真的到处都是坑。我停停写写，大概写了两三周，更加深刻地体会都自己写业务代码写的飞快，但是一旦碰到有些技术含量的代码就要开始面向Google编程的事实。 现在，程序写的差不多了，以及传到了Github上，还发了两个release版本，先贴上链接。 <a href="https://github.com/Dokyme/DokymeLex" target="_blank" rel="noopener">DokymeLex</a> 我作此文的目的是，对于程序的结构，设计和实现的思路，做一个记录和总结，也包括一些反思。</p><a id="more"></a><h2 id="实现语言"><a href="#实现语言" class="headerlink" title="实现语言"></a>实现语言</h2><p>我选择了Java，我感觉我的同学基本上都是用java的，极少数会用C++或者C完成本次实验，用Python或者其他脚本语言的估计也不多。选Java不选C++的原因是写java程序的效率相对来说更高一些，对于变量和对象的初始化和传递的把握更加的轻松。同时，处于实验的要求，即便尽量不使用第三方库，java本身提供的标准库比C++丰富的多。比如容器类、字符串处理、IO操作类。针对每个具体的问题，往往能够很轻松地找到多种解决方案，然后进行权衡选择。不像C++，类库不丰富，解决方案较为单一，弹性不足（也有可能是我孤陋寡闻了）。 当然，java作为一种纯面向对象的语言，和C++相比，最核心的代码会更多一些，比如类的声明、成员变量的定义等。尤其是在生成程序源代码的时候，需要加一些额外的代码来保证程序可以通过编译，但是这是可以接受的。以前听有人说，人的思维是面向过程的，面向对象的思维是反人类的，是牺牲程序可读性的，我倒是觉得在不采用常见的设计模式的情况下，面向对象的代码反而更加清晰。 虽然，实验嘛，避嫌，最好少用现成的类库。但是我还是偷偷找了一个用于辅助和图有关计算的库，还用了gradle来管理包。当时找到这个库的主要原因是了解到这个库可以将图可视化显示出来，想着如果能够把DFA中状态转移的过程可视化出来，一边显示，一边做词法分析，就厉害了。但是实际上几百个状态，显示到窗口中，根本没法看。。。但是图的结构还是借助了这个库，因为不想改代码了，而且自己实现图，又要写很长时间的代码，调很长时间的bug。 就算这是实验，也不能啥都自己实现吧，像HashSet、HashMap这些，我要是自己实现的话肯定完成不了。 此外还使用了Apache.commons.cli库来辅助实现命令行参数解析的功能。</p><h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><p><img src="https://oss.kherrisan.cn/Snipaste_2017-12-21_22-58-47.png" srcset="/img/loading.gif" alt> 类的功能和名字差不多，应该挺容易理解的吧。</p><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>诸如文件解析、命令行参数解析这样的功能我就不详细介绍了。主要讲几个技术含量比较高的，同时也是词法分析中较为核心的部分。</p><h3 id="由RE构造NFA"><a href="#由RE构造NFA" class="headerlink" title="由RE构造NFA"></a>由RE构造NFA</h3><div class="hljs"><pre><code class="hljs null">//预处理。        Logger.debug("Raw input:" + re.re);        re = prePreProcessor(re);        Logger.debug("Added concat symbol and transform range format to or:" + re.re);        re = infix2suffix(re);        Logger.debug("Transform infix to suffix:" + re.re);        //Tomphonson算法构造NFA。        Stack<NoDefiniteAutomation> stack = new Stack<>();        char[] characters = re.re.toCharArray();        boolean converting = false;        for (char cur : characters) {            switch (cur) {                case '~': {                    if (converting) {                        stack.add(new NoDefiniteAutomation(cur));                        converting = false;                        break;                    }                    NoDefiniteAutomation last = stack.pop();                    NoDefiniteAutomation lastTwo = stack.pop();                    stack.push(lastTwo.concat(last));                    break;                }                case '+': {                    if (converting) {                        stack.add(new NoDefiniteAutomation(cur));                        converting = false;                        break;                    }                    NoDefiniteAutomation last = stack.pop();                    State newStart = new State();                    State newEnd = new State();                    last.graph.addEdge(new Transition(), newStart, last.start, EdgeType.DIRECTED);                    last.graph.addEdge(new Transition(), last.end, newEnd, EdgeType.DIRECTED);                    last.graph.addEdge(new Transition(), newEnd, newStart, EdgeType.DIRECTED);                    last.start = newStart;                    last.end = newEnd;                    stack.push(last);                    break;                }                case '*': {                    if (converting) {                        stack.add(new NoDefiniteAutomation(cur));                        converting = false;                        break;                    }                    NoDefiniteAutomation last = stack.pop();                    State newStart = new State();                    State newEnd = new State();                    last.graph.addEdge(new Transition(), newStart, newEnd, EdgeType.DIRECTED);                    last.graph.addEdge(new Transition(), newStart, last.start, EdgeType.DIRECTED);                    last.graph.addEdge(new Transition(), last.end, newEnd, EdgeType.DIRECTED);                    last.graph.addEdge(new Transition(), last.end, last.start, EdgeType.DIRECTED);                    last.start = newStart;                    last.end = newEnd;                    stack.push(last);                    break;                }                case '|': {                    if (converting) {                        stack.add(new NoDefiniteAutomation(cur));                        converting = false;                        break;                    }                    NoDefiniteAutomation last = stack.pop();                    NoDefiniteAutomation lastTwo = stack.pop();                    stack.push(last.parellize(lastTwo));                    break;                }                case '\\':                    converting = true;                    break;                default:                    if (converting && ConvertingMap.keySet().contains("\\" + cur)) {                        stack.add(new NoDefiniteAutomation(ConvertingMap.get("\\" + cur)));                        converting = false;                        break;                    } else if (converting) {                        stack.add(new NoDefiniteAutomation(cur));                        converting = false;                        break;                    } else {                        stack.add(new NoDefiniteAutomation(cur));                    }                    break;            }        }        if (stack.size() != 1) {            Logger.error("The final element left in stack is not only one");            return null;        }        NoDefiniteAutomation nfa = stack.pop();        if (re.action != null) {            nfa.end.tag = re.action;        }        nfa.re = re;        nfa.end.precedence = re.precedence;        return nfa;</code></pre></div><p>代码很长，主要有三个部分：</p><ol><li>预处理：添加连接符~，把[a-z]的形式转换为(a|b|c|…|z)的形式。</li><li>中缀转后缀。</li><li>根据后缀表达式，按照Tomphson算法，生成NFA。</li></ol><p>这段代码把1和2的过程浓缩为了两个函数，主要描述了3的实现。一个长长的switch语句，根据下一个符号，选择不同的策略，把栈中的小NFA转换成大的NFA，然后再压入栈中。每个case块都要先判断是否是转义过的，即上一个字符是不是反斜杠。 NFA的串联、并联方法的定义，我也是能放在NFA类中就放在NFA中的。</p><h3 id="由多个NFA构造DFA"><a href="#由多个NFA构造DFA" class="headerlink" title="由多个NFA构造DFA"></a>由多个NFA构造DFA</h3><div class="hljs"><pre><code class="hljs null">private static DefiniteAutomation build(NoDefiniteAutomation nfa, Set<State> allEndState) {        DefiniteAutomation dfa = new DefiniteAutomation();        dfa.allTrans = nfa.getAllTransitionTag();        dfa.nfa = nfa;        dfa.table = new ArrayList<>();        dfa.graph = new DirectedSparseMultigraph<>();        Set<State> stateSet = new HashSet<>();        stateSet.add(nfa.start);        stateSet = dfa.getEpsilonClosure(stateSet);        dfa.table.add(dfa.new TableEntry(stateSet));        for (int i = 0; i < dfa.table.size(); i++) {            TableEntry entry = dfa.table.get(i);            for (Character transChar : dfa.allTrans) {                Transition trans = new Transition(transChar);                Set<State> extendedStates = dfa.getStateExtension(entry.nfaStates, trans);                Set<State> epslnExtendedStates = dfa.getEpsilonClosure(extendedStates);                TableEntry potentialEntry = dfa.new TableEntry(epslnExtendedStates);                if (!epslnExtendedStates.isEmpty()) {                    int existedEntryIndex = dfa.table.indexOf(potentialEntry);                    if (existedEntryIndex == -1) {                        dfa.table.add(potentialEntry);                        entry.transitions.put(trans, dfa.table.size() - 1);                        Logger.debug("Found new dfa state " + dfa.table.size());                    } else {                        entry.transitions.put(trans, existedEntryIndex);                    }                }            }        }        State.resetId();        List<State> dfaStates = new ArrayList<>();        for (int i = 0; i < dfa.table.size(); i++) {            dfaStates.add(new State());        }        Set<State> newEndStates = new HashSet<>();        for (int i = 0; i < dfa.table.size(); i++) {            boolean isEndState = false;            TableEntry entry = dfa.table.get(i);            for (State nfaEndState : allEndState) {                if (entry.nfaStates.contains(nfaEndState) && (dfaStates.get(i).precedence == -1 || dfaStates.get(i).precedence > nfaEndState.precedence)) {                    dfaStates.get(i).tag = nfaEndState.tag;                    dfaStates.get(i).precedence = nfaEndState.precedence;                    isEndState = true;                }            }            if (isEndState) {                newEndStates.add(dfaStates.get(i));            }            for (Transition trans : entry.transitions.keySet()) {                dfa.graph.addEdge(new Transition(trans.tag), dfaStates.get(i), dfaStates.get(entry.transitions.get(trans)));            }        }        dfa.start = dfaStates.get(0);        dfa.endStates = newEndStates;        return dfa;    }</code></pre></div><p>由多个NFA转成DFA，采取的是在表格驱动的基础上，消除~边，并构造子集。 我想要来讨论一下这个函数中所用到的容器类。</p><ol><li><p>驱动表格，使用的是 <code>ArrayList<TableEntry></code>，TableEntry是一个内部类。表格中的项肯定要保证有序，而且变长，如果用java原生数组的话很难预测需要开辟多大的空间。<strong>注意</strong>：对某个DFA状态，做子集构造、并求得epilison闭包之后，需要判断这个状态是不是已经求得的DFA状态，这里需要一个查找，我直接使用的indexOf方法，并且重写了TableEntry的equals方法。</p></li><li><p>表格项TableEntry，既要记录其中包含的NFA状态号，又要记录每个项通过每个转换、做子集构造、eplision闭包后的状态。记录NFA状态号，我采用的是<code>HashSet</code>，不需要保序，只要集合，而且判断相等的话应该效率不差。各个符号转义对应的状态，我使用了<code>HashMap<Transition, Integer></code>，Transition相当于一个字符，Integer标记了转移到的列表项的序号，将来就是DFA的状态号。字符和序号是一一对应的，看似用HashMap没什么问题。但是我觉得这个问题又要归结到为什么字符转换要用Transition，而不是char或者Character。因为我采用了现成库中的图的实现，而它要求每条边的类型的hashcode不能相同，即每条边不能相同，显然我用char或者Character肯定是不行的，所以就只能包一个类了。但是一个列表项里不会出现重复的字符转移，所以理论上这里用char也是可以的。但是用char和用transition差别应该只在存储空间不同，效率上的话，用transition也就是多调用一次hashcode方法而已。而整张表transition最多有26+26+10+一些符号，不超过80个，我觉得问题不大。</p></li><li><p>运行过程中发现，在某些构造某些DFA状态的时候，花费时间很长。这个时间长可能有两方面原因，一是子集构造的时间较长，epilison边较多，二是判断子集构造完之后的状态是不是已知的状态，查找花费了较长的时间。后者，由于indexof是依次比较，对每个成员调用一次equals，因此把equals的逻辑简化应该可以节约一点时间。我的代码中，TableEntry的equals等价于HashSet的equals，又等价于其中每一个State的equals，State就是一个整数，并且是全局唯一的整数。试问：能不能找到一个HashSet的摘要变量？求和显然不行，直接相连得字符串的话，需要保证两个相同的集合中，把所有元素取出来，得到的元素的顺序是相同的，这样字符串比较才能够确保不漏判。如果顺序不一样，那就要排个序了。以下是HashSet的get和put的实现：</p></li></ol><p><img src="https://oss.kherrisan.cn/Snipaste_2017-12-21_23-53-34.png" srcset="/img/loading.gif" alt> 我觉得问题的关键在于indexFor的冲突的特性。 不过我在网上找到的，有人说，程序就不应该依赖HashSet的顺序。emmmmm，也就是说要排个序？但这样的话，每次子集构造出来的HashSet就都要排序了，感觉工作量很大的样子。<strong>想到这里，要不干脆全部把HashSet换成有序的LinkedList结构？反正没有很多按索引引用的代码!</strong> set还有一种官方实现叫TreeSet，还自带排序功能，今天太晚了，有空我去了解一下。 (忽然有一种开窍的感觉，还真是第一次真正地把数据结构知识应用到项目实践中分析问题。)</p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>未完待续</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/4fe1d90d/#disqus_thread</comments>
    </item>
    
    <item>
      <title>有关上线的微信小程序说明</title>
      <link>http://www.kherrisan.cn/posts/b89a4960/</link>
      <guid>http://www.kherrisan.cn/posts/b89a4960/</guid>
      <pubDate>Tue, 19 Dec 2017 23:09:40 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;舍友承包了一个娱乐向的小程序，最后把后端Tomcat部署到了这台服务器上的8080端口。如果想要通过网址访问，请使用http协议，因为8080端口没有用apache作反向代理，无法享受https加密传输。 链接： &lt;a href=&quot;http://111.230.136.22
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>舍友承包了一个娱乐向的小程序，最后把后端Tomcat部署到了这台服务器上的8080端口。如果想要通过网址访问，请使用http协议，因为8080端口没有用apache作反向代理，无法享受https加密传输。 链接： <a href="http://111.230.136.225:8080/tuba_war" target="_blank" rel="noopener" title="http://111.230.136.225:8080/tuba_war">http://111.230.136.225:8080/tuba_war</a></p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/b89a4960/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Ubuntu Server配置BBR拥塞控制算法</title>
      <link>http://www.kherrisan.cn/posts/4aebf7b7/</link>
      <guid>http://www.kherrisan.cn/posts/4aebf7b7/</guid>
      <pubDate>Tue, 19 Dec 2017 23:04:32 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;自从大佬告诉了我一个新的黑科技：BBR，可以显著提升服务器发送数据包的速度，尤其是在翻墙的时候，我给我的Digital Ocean上的服务器配置了BBR之后，果然下载速度得到了极大的提升，本地使用SEU Wlan下载大文件基本可以稳定在8Mbps左右。之前开了Shadows
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>自从大佬告诉了我一个新的黑科技：BBR，可以显著提升服务器发送数据包的速度，尤其是在翻墙的时候，我给我的Digital Ocean上的服务器配置了BBR之后，果然下载速度得到了极大的提升，本地使用SEU Wlan下载大文件基本可以稳定在8Mbps左右。之前开了Shadowsocksr，下载Chromium的源码，任务管理器里的网络IO图真的是很漂亮。 <img src="https://www.dokyme.cn/wp-content/uploads/2017/12/psb.png" srcset="/img/loading.gif" alt> 但是那次配置BBR没有记录，但是我国内的云服务器（就是你现在访问的这个）还没有升级过内核，因此想要给这台机子也升级一下内核，然后开启一下BBR。</p><h1 id="BBR简介"><a href="#BBR简介" class="headerlink" title="BBR简介"></a>BBR简介</h1><p>BBR是TCP层的一种拥塞控制算法，是Google设计并开源的。传统的拥塞控制算法通过丢包的情况判断网络情况，从而及时调整拥塞窗口的大小，这样使得整个网络处于稳定状态的同时，单个终端又能够享受尽可能大的传输速度。 目前大规模使用的应该是Qubic算法，我没有深入了解过这种算法，好像也是指数增长——丢包回落的形式，具体细节不清楚，有时间可以去了解一下。 知乎上各种吐槽TCP现在的拥塞算法太保守，不能够充分提升传输速度。BBR则是另外一套算法，能够通过更加合理科学的判断和调节，更加充分的提升传输速度。 <img src="https://oss.kherrisan.cn/bbr.jpg" srcset="/img/loading.gif" alt> 在Linux 4.9之后的内核中自带BBR，因此如果是老版本内核想要享受BBR，就需要升级内核了。</p><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><p>首先查看内核版本<code>uname -r</code>。 </p><p><img src="https://oss.kherrisan.cn/Snipaste_2017-12-19_22-21-21.png" srcset="/img/loading.gif" alt> </p><p>是4.4，64位的。接下来到 <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">http://kernel.ubuntu.com/~kernel-ppa/mainline/</a> 这个网站找对应架构和版本的内核。我选了一个4.12的。</p><p> <img src="https://oss.kherrisan.cn/Snipaste_2017-12-19_22-26-48.png" srcset="/img/loading.gif" alt> 注意看清楚架构，我一开始把arm64看成了amd64，架构选错了是肯定没办法安装的。把他下载下来，用<code>wget</code>（刚刚那个网站是国外的，网速有点慢，自己想办法吧）。 一般几十MB，下载完成后，<code>sudo dpkg -i xxxxxx.deb</code> 安装完成，执行<code>sudo update-grub</code>，更新引导程序，并重启。 </p><p> <img src="https://oss.kherrisan.cn/Snipaste_2017-12-19_22-56-02.png" srcset="/img/loading.gif" alt> </p><p> 重启完成，剩下的就只是修改几个配置项了。 </p><p> <code>echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf</code> <code>echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf</code> </p><p> 如果提示permission deny，并且sudo也没有用的时候，使用下面两条命令：<br> <code>sudo bash -c 'echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf'</code><br> <code>sudo bash -c 'echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf'</code> </p><p> 保存生效。 </p><p> <code>sudo sysctl -p</code> </p><p> 最后检查一下BBR是否开启。 </p><p> <code>sudo sysctl net.ipv4.tcp_available_congestion_control</code> </p><p> 如果返回如下，说明成功啦。 </p><p> <img src="https://oss.kherrisan.cn/Snipaste_2017-12-19_22-59-56.png" srcset="/img/loading.gif" alt> </p><p> 的确，开启了BBR之后，下载大图的速度得到了显著的提升~</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/4aebf7b7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2017-2018 SRTP项目心得体会</title>
      <link>http://www.kherrisan.cn/posts/ac366cab/</link>
      <guid>http://www.kherrisan.cn/posts/ac366cab/</guid>
      <pubDate>Mon, 20 Nov 2017 14:38:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;我觉得这个SRTP项目给我带来的最大的收获时：不要好高骛远。 本来此项目是一个外包项目，某个老师（以下统称客户）找到我们，提出了要一个如此如此的管理系统的需求。我们起初觉得这个项目很简单，功能不是很复杂，对除了功能需求之外的其他需求都没有太高的要求。除去刚性需求外，项目所必
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>我觉得这个SRTP项目给我带来的最大的收获时：不要好高骛远。 本来此项目是一个外包项目，某个老师（以下统称客户）找到我们，提出了要一个如此如此的管理系统的需求。我们起初觉得这个项目很简单，功能不是很复杂，对除了功能需求之外的其他需求都没有太高的要求。除去刚性需求外，项目所必需的技术栈也都在我们的能力范围之内，没有技术盲区，也没有大量的新技术需要学习。虽然我们当时仅仅是大二学生，还缺少一些项目开发经验，但好在小组内每个人的个人编码能力都还不错，对于这么一个任务，我们是有自信能够在短时间内完成并交付的。 随着项目的展开，我们发现事情并不是想象中的那么简单，一个简简单单的功能、一个普通的对话框弹出动作、列表的刷新、数据的导入导出，每一个点都会产生意想不到的情况，需要长时间的反复的调试。分工开发的模块合成之后，又会出现新的问题，这时候就需要分别负责模块的两个人坐在一起看着代码一行一行单步运行，盯着监视窗口里的变量的值。经过了几次集中时间的排查，基本把遇到的所有缺陷全部修复。直到我写这篇心得体会的昨晚，当翻出系统的可执行文件，尝试了一下基本功能的运行，依然能够发现遗漏的问题，然后此时以及是软件正式交付客户使用半年后了。 即便是功能需求全部满足，遇到的缺陷近乎全部解决，但这项目依然很难被称作是一个圆满完成的项目。大量冗余的代码，各种不合理的类设计，性能还有极大的提升空间，编码风格尚需进一步规范。这些问题，在我们完成系统开发回过头来补全开发文档的时候，一一暴露了出来。软件开发是一门很深的学问，而我涉足尚浅。 在去年SRTP项目申报阶段，我注意到很多学生自主申报的项目都是和机器学习、人工智能、图像识别等等最近极为活跃的计算机领域概念相关的。相比之下我们做的这一个简简单单的单机桌面应用程序就有些小巫见大巫了。但是在这么简单的一个开发项目中我们尚且遇到了这么多困难，花费了这么多时间和精力，同样是本科大二的学生，去研究那些未知的领域，然后试图做出一个有一定功能的系统出来，是不是会更加困难呢。当然，各人能力有高低，知识积累方向有差异。 当然，在本项目的开发过程中也是有很多可取之处的，每周日上午我们都会到一个固定的地点进行项目的开发、版本的迭代、缺陷的调试，这样使得我们的产品能够在保证质量的前提下,顺利地在客户要求的时间前交付。 此外，还有一些技术方面的感想，本项目我们使用的时候C++语言的可视化框架Qt，一来是因为短学期实训刚好就是采用Qt的方案，对这个框架的技术路线比较熟悉，二是我们当时都只系统学习过c++语言，若是要采用别的技术可能需要再花费额外的时间进行技术调研和学习。但是实际上不论在哪个平台，用c++写桌面应用程序都已经有些过时了。计算机行业的技术更新迭代很快，需要我们不停地学习、不停地跟进。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/ac366cab/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TCP/IP协议 TCP Timeout and Retransmission</title>
      <link>http://www.kherrisan.cn/posts/1d215dd1/</link>
      <guid>http://www.kherrisan.cn/posts/1d215dd1/</guid>
      <pubDate>Wed, 18 Oct 2017 13:24:42 GMT</pubDate>
      <description>
      
      </description>
      
      
      <comments>http://www.kherrisan.cn/posts/1d215dd1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TCP/IP实验 到指定目标的路由追踪（实现tracert功能）</title>
      <link>http://www.kherrisan.cn/posts/652e246f/</link>
      <guid>http://www.kherrisan.cn/posts/652e246f/</guid>
      <pubDate>Fri, 29 Sep 2017 21:28:23 GMT</pubDate>
      <description>
      
        &lt;p&gt;路由追踪指当访问一个远程的设备时，能够得到沿途的路由器的IP。这个功能已经由tracert（traceroute）程序实现了，我一来闲的没事，而来早就想做一些关于主机发现和路由追踪的小程序，因此就研究了一下。 使用python的scapy库进行数据包的收发，由于scapy已经实现了traceroute功能，更何况windows和linux都有tracert（traceroute）命令，但是我还是想从底层搞清楚原理，所有先用traceroute做追踪，同时使用wireshark抓包，研究一下包的结构和原理，再自己用scapy实现一下traceroute。 &lt;strong&gt;注意：Win10 &amp; Python2.7 环境下，使用pip安装scapy可能会遇到问题（global name xxx is not defined），建议直接clone github上的仓库，然后python setup.py install。&lt;/strong&gt; 使用我们学校jwc网站作为实验对象，所有实验都在seu内网进行（感觉内网变化小一些）。 先抓个包看看jwc网站ip地址是多少。其实应该是有更加简便的方法的，只是我不知道。而且tracert直接填主机名好像不行。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>路由追踪指当访问一个远程的设备时，能够得到沿途的路由器的IP。这个功能已经由tracert（traceroute）程序实现了，我一来闲的没事，而来早就想做一些关于主机发现和路由追踪的小程序，因此就研究了一下。 使用python的scapy库进行数据包的收发，由于scapy已经实现了traceroute功能，更何况windows和linux都有tracert（traceroute）命令，但是我还是想从底层搞清楚原理，所有先用traceroute做追踪，同时使用wireshark抓包，研究一下包的结构和原理，再自己用scapy实现一下traceroute。 <strong>注意：Win10 & Python2.7 环境下，使用pip安装scapy可能会遇到问题（global name xxx is not defined），建议直接clone github上的仓库，然后python setup.py install。</strong> 使用我们学校jwc网站作为实验对象，所有实验都在seu内网进行（感觉内网变化小一些）。 先抓个包看看jwc网站ip地址是多少。其实应该是有更加简便的方法的，只是我不知道。而且tracert直接填主机名好像不行。</p><a id="more"></a><p> <img src="https://oss.kherrisan.cn/Snipaste_2017-09-29_22-12-19.png" srcset="/img/loading.gif" alt> 从wireshark中也可以看出tracert探测的模式：每个TTL发送三个ICMP报文，收到三个回复后再把TTL+1，再继续发送。 基于上述原理，可以开始尝试自己发送ICMP报文并实现tracert功能了。 注：由于国庆回家，网络环境发生了一些变化，我现在只能在家进行实验，因此每一条的结果肯定会和在宿舍进行追踪产生的结果不同。 下面先贴出我写的py程序：</p><div class="hljs"><pre><code class="hljs null">from scapy.all import *def send_ICMP(ttl, dst):    ans, unans = sr(IP(dst=dst, ttl=ttl) / ICMP(), timeout=8)    if ans is not None and len(ans) is not 0:        reply = ans[0]        print "Hop:{} reach:{}".format(reply[0].ttl, reply[1].src)        if reply[1].type is 11:            return True        else:            print "Reach to the destination"            return False    else:        return Truedef tracert(dst):    ttl = 0    while send_ICMP(ttl, dst):        ttl += 1        if ttl > 30:            breakif __name__ == '__main__':    tracert("jwc.seu.edu.cn")    # traceroute("jwc.seu.edu.cn")</code></pre></div><p>这是windows自带的tracert的输出结果。 <img src="https://oss.kherrisan.cn/Snipaste_2017-10-01_20-47-17.png" srcset="/img/loading.gif" alt> 从图中可以看出，scapy的动作也是很有规律的，基本上符合发送两个ICMP报文，收到一个reply的模式，而且对同一个地址的两个ICMP之间相隔不到20ms。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/652e246f/#disqus_thread</comments>
    </item>
    
    <item>
      <title>爱奇艺视频广告流量分析</title>
      <link>http://www.kherrisan.cn/posts/7270ded8/</link>
      <guid>http://www.kherrisan.cn/posts/7270ded8/</guid>
      <pubDate>Wed, 13 Sep 2017 23:32:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;按照老师教的步骤，在wifi环境下抓安卓端的爱奇艺app的数据包，并从中分析出广告的流量。 三生三世十里桃花01 首先进行tcp会话的统计，我比较喜欢把rel start和duration两栏拉长： 先按照数据量排序： &lt;img src=&quot;https://i.loli.net/2017/09/13/59b9519bf02ab.png&quot; srcset=&quot;/img/loading.gif&quot; alt&gt; 好像看不出什么来，老师的经验之谈是高清的视频1s大概100kb。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>按照老师教的步骤，在wifi环境下抓安卓端的爱奇艺app的数据包，并从中分析出广告的流量。 三生三世十里桃花01 首先进行tcp会话的统计，我比较喜欢把rel start和duration两栏拉长： 先按照数据量排序： <img src="https://i.loli.net/2017/09/13/59b9519bf02ab.png" srcset="/img/loading.gif" alt> 好像看不出什么来，老师的经验之谈是高清的视频1s大概100kb。</p><a id="more"></a><blockquote><p>获得的高清感观标准：720p、1080p，数据密度：0.25-0.35及以上，那么码率大致在5Mb/10Mb及以上，代表性作品，各高清小组的BD720p/BD1080p 。 获得的标清感观标准：a480p、480p，数据密度：0.12-0.18及以上，那么码率大致在1200-2500kbps，代表性作品，各小组的BDRip/DVDRip .</p></blockquote><p>结合数据量和开始时间一起看前几个： <img src="https://ooo.0o0.ooo/2017/09/13/59b951ef96f7d.png" srcset="/img/loading.gif" alt> 数据量第一的是在48s开始的，而且48s左右开始的连接特别多。整个过程中48s和84s是两个集中的爆发点，在1s内会有大概三四十个连接开启。 如果结合IO流量图，也可以看出些端倪： <img src="https://i.loli.net/2017/09/13/59b952d80cd45.png" srcset="/img/loading.gif" alt> 可以看出数据较为集中的地方有三处，第一处是0-8s。我怀疑这其中就有广告。所以再按开始时间排序，找数据量较大的。 <img src="https://i.loli.net/2017/09/13/59b9537c84ae7.png" srcset="/img/loading.gif" alt> 发现一个规律，一般视频流量，都是数据量较大（不一定是最大），但持续时间很短的。在把0-8s中的4个1Mb以上的流量一一跟踪之后，找到了： <img src="https://i.loli.net/2017/09/13/59b954d3940ef.png" srcset="/img/loading.gif" alt> 这个请求get了一个f4v的视频片段，下载下来发现是15s，这个请求开始于7s，也就是22s左右结束。假设是在48s开始正式加载视频，那说明前面应该还有一两个15s的广告。继续找22s左右的。 这里出了一个意外，一个5.6s开始的900k的流量也是一个15s的视频。这下子好了，从6s开始，已经有了30s的广告储备了。在27s又发现一个15s的视频。然后就要到48s的正式视频传输了。</p><p>广告开始时间(s)</p><p>数据量(b)</p><p>5.7</p><p>942k</p><p>7.3</p><p>1621k</p><p>27.8</p><p>1625k</p><p>今天先这样，明天再看看别的数据包，找找规律。 震惊！实际播放中竟然看到了4段广告，我找漏了一个！可能是我第一次找广告没什么经验吧。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/7270ded8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git 算是比较系统的学习笔记</title>
      <link>http://www.kherrisan.cn/posts/5151ce74/</link>
      <guid>http://www.kherrisan.cn/posts/5151ce74/</guid>
      <pubDate>Thu, 07 Sep 2017 19:50:05 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Git-基础&quot;&gt;&lt;a href=&quot;#Git-基础&quot; class=&quot;headerlink&quot; title=&quot;Git 基础&quot;&gt;&lt;/a&gt;Git 基础&lt;/h1&gt;&lt;p&gt;git是一个分布式的版本管理工具。所谓的分布式就是每个人的电脑上都可以安装完整的git管理系统，进行本地的版本管理，而不需要中央服务器的集中管理。 git不同于其他版本管理系统，它保存的是一个项目中所有文件的集合的快照，如果文件没有被修改那就用一个指针指向之前那个版本。 &lt;img src=&quot;https://git-scm.com/book/en/v2/images/snapshots.png&quot; srcset=&quot;/img/loading.gif&quot; alt&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h1><p>git是一个分布式的版本管理工具。所谓的分布式就是每个人的电脑上都可以安装完整的git管理系统，进行本地的版本管理，而不需要中央服务器的集中管理。 git不同于其他版本管理系统，它保存的是一个项目中所有文件的集合的快照，如果文件没有被修改那就用一个指针指向之前那个版本。 <img src="https://git-scm.com/book/en/v2/images/snapshots.png" srcset="/img/loading.gif" alt></p><a id="more"></a><h3 id="重点：三种状态"><a href="#重点：三种状态" class="headerlink" title="重点：三种状态"></a>重点：三种状态</h3><p><img src="https://git-scm.com/book/en/v2/images/areas.png" srcset="/img/loading.gif" alt></p><ul><li>工作区：就是直接在资源管理器中显示的区域。</li><li>暂存区：保存了下次将要提交的文件的信息的一个文件。</li><li>Git仓库：保存项目元数据和对象数据库的地方。</li></ul><p>基本的工作流程是这样子的：</p><ol><li>在工作目录中修改文件。</li><li>暂存：将文件快照加入暂存区。</li><li>提交：将快照存入Git仓库中。</li></ol><p>也就是说，一个文件有四种状态：没有修改，已经修改但没有暂存，已经暂存但没有被提交，已经提交。</p><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>此部分省略。。。。。。</p><h1 id="初次配置"><a href="#初次配置" class="headerlink" title="初次配置"></a>初次配置</h1><p>Git的配置文件有两个版本：当前用户版本和系统版本（类似于用户环境变量和系统变量这样吧）。用户配置文件在<code>~/.gitconfig</code>，系统配置文件在Git安装目录下（linux在<code>/etc/gitconfig</code>）</p><h3 id="用户信息配置"><a href="#用户信息配置" class="headerlink" title="用户信息配置"></a>用户信息配置</h3><div class="hljs"><pre><code class="hljs null">$ git config --global user.name "Polydick"$ git config --global user.email zdk_cz@sina.com</code></pre></div><h3 id="默认文本编辑器配置"><a href="#默认文本编辑器配置" class="headerlink" title="默认文本编辑器配置"></a>默认文本编辑器配置</h3><div class="hljs"><pre><code class="hljs null">$ git config --global core.editor  code #这里用visual studio code</code></pre></div><h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><div class="hljs"><pre><code class="hljs null">$ git config --list #查看所有的配置项$ git config <key> #查看<key>配置项</code></pre></div><h1 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h1><p>得到一个仓库有两种方法：1.从远程服务器下载。2.将本地的项目导入git中。 如果要将本地的项目文件夹使用git进行管理：</p><div class="hljs"><pre><code class="hljs null">$ git init</code></pre></div><p><img src="https://oss.kherrisan.cn/%E9%80%89%E5%8C%BA_003-300x68.png" srcset="/img/loading.gif" alt> 如果这不是一个空项目，那就需要把当前文件夹中的文件加入到git中。<code>git add</code>追踪文件，<code>git commit</code>提交文件。 <code>$ git add *.c $ git add LICENSE $ git commit -m 'initial project version'</code> 如果是想要从远程服务器上获取到话，<code>git clone</code>会从远程拷贝文件到本地到当前目录中。</p><h1 id="记录更新"><a href="#记录更新" class="headerlink" title="记录更新"></a>记录更新</h1><p>两种状态：已跟踪和未跟踪。已跟踪意味着该文件到修改将会被git记录，将会被纳入项目快照中，未跟踪的话git是不会搭理这个文件到。 <img src="https://git-scm.com/book/en/v2/images/lifecycle.png" srcset="/img/loading.gif" alt> 一个文件就会在这四个状态中循环往复。</p><div class="hljs"><pre><code class="hljs null">git status #可以查看当前项目下文件的状态。</code></pre></div><p><img src="https://oss.kherrisan.cn/%E9%80%89%E5%8C%BA_011-300x159.png" srcset="/img/loading.gif" alt> README这个文件有一部分变更被暂存了，还有一部分变更没有暂存。如果要暂存新的这一次变更，就要再<code>git add</code>一次。</p><div class="hljs"><pre><code class="hljs null">$ git status -s #可以输出更加可读的信息。    M      README #被修改，未暂存MM    Rakefile #已暂存，又被修改A        lib/git.rb #M       lib/simplegit.rb #被修改，已暂存??      LICENSE.txt #未追踪</code></pre></div><p>在<code>.gitignore</code>中可以添加要忽略的文件。被忽略的文件对于git来说是不存在的。 <code>git diff</code>可以将暂存提交与否精确到行的级别。此命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。 <img src="https://oss.kherrisan.cn/%E9%80%89%E5%8C%BA_012-300x182.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs null">git diff --cache #查看将要暂存到内容，即下次将要提交到内容。</code></pre></div><p><img src="https://oss.kherrisan.cn/%E9%80%89%E5%8C%BA_013-300x122.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs null">git commit -m "终于可以提交了好开心，这是一条提交信息。。。"</code></pre></div><div class="hljs"><pre><code class="hljs null">git rm -f somefile #从工作区和暂存区中删除这个文件。不在暂存区中的文件不会被追踪。git rm --cache somefile #从暂存区中删除这个文件。</code></pre></div><div class="hljs"><pre><code class="hljs null">git mv old_file_name new_file_name #用来改名的。</code></pre></div><h1 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h1><div class="hljs"><pre><code class="hljs null">git log #查看提交历史到</code></pre></div><div class="hljs"><pre><code class="hljs null">zdk@zdk-X550JX:~/testGit/simplegit-progit$ git logcommit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon Date:   Mon Mar 17 21:52:11 2008 -0700    changed the verison numbercommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: Scott Chacon Date:   Sat Mar 15 16:40:33 2008 -0700    removed unnecessary test codecommit a11bef06a3f659402fe7563abf99ad00de2209e6Author: Scott Chacon Date:   Sat Mar 15 10:31:28 2008 -0700    first commitzdk@zdk-X550JX:~/testGit/simplegit-progit$</code></pre></div><p>列出的信息包括每次提交的检验和，提交者的邮箱，日期，说明。</p><h1 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h1><div class="hljs"><pre><code class="hljs null">git reset HEAD <file> #取消某个文件的暂存。该文件变为修改未暂存的状态。git checkout -- <file> #迅速还原某个文件的修改。</code></pre></div><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><div class="hljs"><pre><code class="hljs null">git remote #列出仓库，clone的仓库至少有origin。git remote add <shortname>  <url> #添加一个远程仓库。git fetch <remotename> #从远程拉取一个仓库到本地仓库，但不会合并。git push <remote> <branch> #向远程推送。git remote show <remote-name> #查看远程仓库信息。</code></pre></div><p><img src="https://oss.kherrisan.cn/%E9%80%89%E5%8C%BA_014-300x169.png" srcset="/img/loading.gif" alt> 重命名和去除，操作还是很常规的。</p><div class="hljs"><pre><code class="hljs null">git remote rename <oldname> <newname>git remote rm <remotename></code></pre></div><h1 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h1><p>有两种标签，轻量标签就是一个不会被改变的分支，还有一种是附属标签，就好像一个文件，能够被提交。</p><div class="hljs"><pre><code class="hljs null">git tag -a v1.4 -m 'my version 1.4' #添加一个附属标签，名字是v1.4，附属信息为my verison 1.4。git show v1.4 #输出标签信息。git tag v1.4 #给当前的仓库添加一个轻量标签。git tag -a v1.4 a3f4bc #给过去的一次提交添加一个轻量标签。git push origin --tags #把不在远程仓库上的标签都推送到远程仓库上去（push是默认不带标签的）。</code></pre></div><h1 id="git分支简介"><a href="#git分支简介" class="headerlink" title="git分支简介"></a>git分支简介</h1><p><img src="https://git-scm.com/book/en/v2/images/commit-and-tree.png" srcset="/img/loading.gif" alt> 上图是某次提交之后git保存的对象结构，其中commit对象保存这次提交的基本信息，tree对象保存目录结构，blob对象保存文件快照。经过多次提交之后，就会有一个commit对象组成的单向链表，如下图所示。 <img src="https://git-scm.com/book/en/v2/images/commits-and-parents.png" srcset="/img/loading.gif" alt> 而git所谓的分支就是某个指向commit对象的指针 创建一个testing分支</p><div class="hljs"><pre><code class="hljs null">git branch testing</code></pre></div><p><img src="https://git-scm.com/book/en/v2/images/two-branches.png" srcset="/img/loading.gif" alt> 一个特殊的指针：Head指针，指向当前所在的分支。在分支就是指针的前提下，切换分支起始就变成了把指针指向新的commit对象这样的简单操作。</p><div class="hljs"><pre><code class="hljs null">git checkout testing</code></pre></div><p><img src="https://git-scm.com/book/en/v2/images/head-to-testing.png" srcset="/img/loading.gif" alt> 这时候，当前的分支就变成了testing分支，所有的提交都会被提交到testing分支上，做一些修改，然后commit，head指针就会指向master之后的一个新的commit对象上。 <img src="https://git-scm.com/book/en/v2/images/advance-testing.png" srcset="/img/loading.gif" alt></p><blockquote><p><strong>切换分支所导致的切换commit对象会使得工作区内的文件内容发生变化，也就是说如果在命令行里切换了分支，文件资源管理器以及某个编辑器甚至ide中显示的当前目录结构会发生变化。</strong></p></blockquote><p>这时，如果再切换到master分支，然后做一些修改，但是修改和之前testing分支上的修改内容不同。再暂存，提交一次。此时就会出现分叉。 <img src="https://git-scm.com/book/en/v2/images/advance-master.png" srcset="/img/loading.gif" alt></p><div class="hljs"><pre><code class="hljs null">git log --oneline --decorate --graph --all //查看当前项目的提交记录，以及分支记录，以图形的形式展示。(下图是另一个项目的log，和上图无关)。log输出的图还是挺漂亮的，就是看不太懂。。。</code></pre></div><p><img src="https://ww1.sinaimg.cn/large/0060lm7Tly1fjx9i02v14j31e00u811y.jpg" srcset="/img/loading.gif" alt></p><h1 id="git分支新建与合并"><a href="#git分支新建与合并" class="headerlink" title="git分支新建与合并"></a>git分支新建与合并</h1><p>因为分支就是指向commit对象的指针，所以分支的新建与合并也可以转换成指针的重新指向以及合并成新的提交。 <img src="https://git-scm.com/book/en/v2/images/basic-branching-1.png" srcset="/img/loading.gif" alt> 从上图的场景出发，假设我们要解决#53问题，为了保证解决问题过程中修改的代码不会污染原来的代码，我们新建一个分支iss53。有人说既然每次提交都是有快照的，那我直接在master分支上做增量的修改不行吗，反正到时候也是可以恢复的。 我的理解是分支的意义就是为了能够更加清楚的描述工作流中的代码修改历史，多个分支可以确保多个开发工作流能够同时并行，并且代码互不干扰。就像上述场景中，如果想要同时解决#54问题和#55问题，如果都是在master分支上进行修改，那么代码就会改的很乱，并且在后期的测试和代码审查中也会出现不必要的麻烦。 <img src="https://git-scm.com/book/en/v2/images/basic-branching-2.png" srcset="/img/loading.gif" alt> 在iss53分支上做一些修改，并提交，这样iss53分支就会在版本上超前于master分支，成为了master分支的子分支，不过我更喜欢叫“未来的分支”。 <img src="https://git-scm.com/book/en/v2/images/basic-branching-3.png" srcset="/img/loading.gif" alt> 这时候，如果出现了一个bug，需要紧急修复代码，但是iss53分支还没有开发完成，更别提代码审议和测试，是不可能合并到master分支上的。这时候分支的并行能力就体现出来了。</p><ol><li>提交iss53分支，有多少提交多少，否则工作区和暂存区的内容会冲突。</li><li>切换到master分支。</li><li>创建另一个叫hotfix的分支。</li><li>在hotfix分支上修改代码，解决bug，并提交。</li></ol><p>此时master分支就会有两个“未来分支”，分叉了。 <img src="https://git-scm.com/book/en/v2/images/basic-branching-4.png" srcset="/img/loading.gif" alt> 假设hotfix上的代码通过了审议，经过了测试，可以合并到master里面去了。切换到master分支，然后merge hotfix一下。 <strong>由于hotfix是master的直接上游，因此这样的合并只要让master分支前移几个commit对象就行了，不会出现什么冲突的。在git输出中会出现fast forward字样</strong> <img src="https://git-scm.com/book/en/v2/images/basic-branching-5.png" srcset="/img/loading.gif" alt> hotfix存在的意义以及完成了，可以删掉他了。再切换到iss53分支，做一些修改，做一次commit。想要合并。 <img src="https://git-scm.com/book/en/v2/images/basic-merging-1.png" srcset="/img/loading.gif" alt> 可以看出，这时候iss53分支和master分支的关系比较复杂，像是叔叔和侄子。只有父子关系的分支才能直接forward合并，这种叔侄关系的合并就比较厉害了（先切换到master，然后再merge iss53）： <strong>git会自动合并两个分支的内容，并自动commit这个合并之后的内容。现在master分支指向新的commit，并且这个新的commit成为iss 53分支的“未来分支”</strong> 这里master和iss53的公共祖先是c2，其实是git合并的是c2、c4和c5这三个commit。 <img src="https://git-scm.com/book/en/v2/images/basic-merging-2.png" srcset="/img/loading.gif" alt> 现在iss 53分支的意义也以及完成了，可以说再见了。</p><h1 id="git分支管理"><a href="#git分支管理" class="headerlink" title="git分支管理"></a>git分支管理</h1><div class="hljs"><pre><code class="hljs null">git branch //罗列当前所有的分支git branch -v //罗列当前所有的分支以及最新一次提交信息git branch --merged //查看当前分支以及已经合并到当前分支的分支，--no-merged同理git branch -d [branchName] //删除某个分支，如果没有合并过的话可能需要-D来强制删除</code></pre></div><h1 id="git分支开发工作流和"><a href="#git分支开发工作流和" class="headerlink" title="git分支开发工作流和"></a>git分支开发工作流和</h1>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/5151ce74/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git 面向项目开发的git教程</title>
      <link>http://www.kherrisan.cn/posts/4d8d0ed2/</link>
      <guid>http://www.kherrisan.cn/posts/4d8d0ed2/</guid>
      <pubDate>Mon, 04 Sep 2017 19:28:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;Git是一种版本控制工具，Github是提供git服务器支持的一个社区。&lt;/p&gt;
&lt;h3 id=&quot;首先在windows上安装git&quot;&gt;&lt;a href=&quot;#首先在windows上安装git&quot; class=&quot;headerlink&quot; title=&quot;首先在windows上安装git&quot;&gt;&lt;/a&gt;首先在windows上安装git&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/&lt;/a&gt; 这个是git的官方网站。下载过程可能比较缓慢，需要耐心等待一下。在下载的过程中可以顺便把Github账户注册了。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Git是一种版本控制工具，Github是提供git服务器支持的一个社区。</p><h3 id="首先在windows上安装git"><a href="#首先在windows上安装git" class="headerlink" title="首先在windows上安装git"></a>首先在windows上安装git</h3><p><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a> 这个是git的官方网站。下载过程可能比较缓慢，需要耐心等待一下。在下载的过程中可以顺便把Github账户注册了。</p><a id="more"></a><h3 id="注册Github账户"><a href="#注册Github账户" class="headerlink" title="注册Github账户"></a>注册Github账户</h3><p><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 这个是github网站，怎么注册就不多说了，大家都是注册过千万网站账号的人。</p><h3 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h3><p>在git安装包下载完成并安装完成之后，启动git bash。输入命令</p><div class="hljs"><pre><code class="hljs null">ssh-keygen.exe -t rsa -C "注册github的邮箱"</code></pre></div><p>后面会先后提示要求输入密码保存的文件，密码等。这里都不要输，直接回车就行了。 登陆github，点击用户头像，进入<code>settings</code>，选择<code>ssh and gpg keys</code>。新建一个key，title可以随便写，keys要填写的是当前用户目录下（形如<code>c/Users/zdksc</code>)的<code>.ssh</code>文件夹下的<code>id_rsa.pub</code>文件中的内容（全部复制过来）。提交，需要再输入一遍github密码。</p><h3 id="第一次初始化仓库"><a href="#第一次初始化仓库" class="headerlink" title="第一次初始化仓库"></a>第一次初始化仓库</h3><p>选择一个合适的目录，运行命令：</p><div class="hljs"><pre><code class="hljs null">git clone git@github.com:polydick/OrderDishSystem.git</code></pre></div><p>git会把该项目下载到当前路径下。 请先创建自己的分支，在自己的分支上提交代码。运行命令：</p><div class="hljs"><pre><code class="hljs null">git checkout -b yourOwnBranch</code></pre></div><p>这行代码会建立一个叫yourOwnBranch的分支，并切换到该分支。然后就可以进行自己的开发了。</p><h3 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h3><p>如果对该项目的进行了修改之后需要提交，在<code>OrderDishSystem</code>文件夹下运行命令（#后面的是注释，不要输入）：</p><div class="hljs"><pre><code class="hljs null">git checkout yourOwnBranch # 切换到自己的分支git add . # 将当前目录加入暂存区（包括所有新增的文件）git commit -m "这次提交需要说些什么（比如修复了什么bug）" # 将变更提交到本地仓库，并加上注释。git checkout master # 切换到主分支git pull origin master # 将origin远程仓库中的master分支下载到本地，并与本地的master分支合并，这样你本地的master分支就是最新的了。git checkout yourOwnBranchgit merge master # 把本地yourOwnBranch分支与本地master分支合并，这样本地的youOwnBranch分支就包含最新的master分支进度和自己写的代码的进度了。git push origin yourOwnBranch # 提交到origin远程仓库的yourOwnBranch分支</code></pre></div><h3 id="及时更新自己的或者别人的代码"><a href="#及时更新自己的或者别人的代码" class="headerlink" title="及时更新自己的或者别人的代码"></a>及时更新自己的或者别人的代码</h3><p>如果别人修改了代码，想要及时更新到自己的本地，运行命令：</p><div class="hljs"><pre><code class="hljs null">git checkout mastergit pull origin master # 这样本地的master分支就是最新的了。</code></pre></div><p>如果想要在别人写的最新的代码版本上添加自己的代码，运行命令：</p><div class="hljs"><pre><code class="hljs null">git checkout yourOriginMastergit pull origin master</code></pre></div><p>然后就可以愉快地在自己的分支上码代码了，码完了提交一下。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>不要让自己的分支和除了master分支之外的其他分支合并，那样会变得很乱，非常乱。</li><li>在commit之前请先确保在自己的分支上，不要直接commit到主分支。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/4d8d0ed2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TCP/IP协议 TCP Connection Mnagement</title>
      <link>http://www.kherrisan.cn/posts/b225a4eb/</link>
      <guid>http://www.kherrisan.cn/posts/b225a4eb/</guid>
      <pubDate>Thu, 27 Jul 2017 21:39:01 GMT</pubDate>
      <description>
      
        &lt;p&gt;因为TCP是一个面向连接的协议，所以建立释放连接的过程是很重要的。&lt;/p&gt;
&lt;h2 id=&quot;连接的建立和释放&quot;&gt;&lt;a href=&quot;#连接的建立和释放&quot; class=&quot;headerlink&quot; title=&quot;连接的建立和释放&quot;&gt;&lt;/a&gt;连接的建立和释放&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://gyazo.com/66f8ad95b3aa6fc3f89f62f768d1a6d3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://i.gyazo.com/66f8ad95b3aa6fc3f89f62f768d1a6d3.png&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;https://gyazo.com/66f8ad95b3aa6fc3f89f62f768d1a6d3&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>因为TCP是一个面向连接的协议，所以建立释放连接的过程是很重要的。</p><h2 id="连接的建立和释放"><a href="#连接的建立和释放" class="headerlink" title="连接的建立和释放"></a>连接的建立和释放</h2><p><a href="https://gyazo.com/66f8ad95b3aa6fc3f89f62f768d1a6d3" target="_blank" rel="noopener"><img src="https://i.gyazo.com/66f8ad95b3aa6fc3f89f62f768d1a6d3.png" srcset="/img/loading.gif" alt="https://gyazo.com/66f8ad95b3aa6fc3f89f62f768d1a6d3"></a></p><a id="more"></a><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ol><li>c发送一个syn被置位的报文给s，表示想要建立连接，当然这个报文包含了c的ISN。</li><li>s接收到了syn报文，需要确认收到了syn和c的ISN，所以回复一个syn，同时ack置位，确认号为c的ISN+1，当然这个报文包含了s自己的ISN。</li><li>c接收到了s回复的syn报文，需要确认收到了s发来的syn和s的ISN，于是c回复确认，确认号为s的ISN+1。</li></ol><p>至于为什么要三次握手，一次两次不行呢。我是这样理解的：1次握手相当于承认传输信道的绝对可靠，就是说c发送的syn报文s绝对能收到；2次握手的话最多只能确保一个方向上的传输成功了，即c知道s能收到自己的消息，但s不知道c能不能收到自己的消息，因为s发送的syn报文还没有得到c的确认回复呢。逼乎上也有人说这是不可靠信道上要想建立双向通信必须要三次，不是说TCP/IP比较特殊要3次。</p><h3 id="四次分手"><a href="#四次分手" class="headerlink" title="四次分手"></a>四次分手</h3><ol><li>c的应用程序要求close，c发送一个fin报文表示自己已经没有数据要发送了，等待s的确认。</li><li>s收到了c的fin报文，就好像c说自己想睡觉了，s也不能强求他吧。s只好确认c的fin报文。</li><li>此时c已经没有数据要发送了，但是s说不定还有，所以s可以继续想c发送数据，而且此时的c还可以接收数据并且确认s的报文，即发送ack报文。此时TCP连接处于半开状态。</li><li>s也没有数据要发送了，于是s也发送了fin报文，这个fin报文的顺序号可能比2中的确认报文的顺序号大一些，确认号应该和2中的确认号是一致的。</li><li>c确认s的fin报文，回复ack，TCP连接的另一半也关闭了。至此TCP连接彻底关闭。</li></ol><p>注意：第2个报文和第3个报文有时可以合并为同一个报文。</p><blockquote><h4 id="但是为什么书上的四次分手中，第4个ack报文的顺序号还比第3个报文的确认号小1，我还没搞清楚。"><a href="#但是为什么书上的四次分手中，第4个ack报文的顺序号还比第3个报文的确认号小1，我还没搞清楚。" class="headerlink" title="但是为什么书上的四次分手中，第4个ack报文的顺序号还比第3个报文的确认号小1，我还没搞清楚。"></a>但是为什么书上的四次分手中，第4个ack报文的顺序号还比第3个报文的确认号小1，我还没搞清楚。</h4></blockquote><h3 id="半关闭"><a href="#半关闭" class="headerlink" title="半关闭"></a>半关闭</h3><p>TCP的四次分手其实可以看做两个半关闭，一个fin报文关闭一个方向，关闭一半的连接。socket是支持半关闭的（shutdown()），close（）是全关闭。</p><h3 id="初始顺序号"><a href="#初始顺序号" class="headerlink" title="初始顺序号"></a>初始顺序号</h3><p>初始顺序号的选择也是挺重要的，因为这关系到很多方面的问题，比如在上次连接中发出的一个迷失在网络中的报文，在这次连接中突然出现了，然后他的顺序号正好合适，于是他就上位了，这样的情况。再比如有人能够伪造合适的顺序号来实现欺骗。实际上ISN的生成好想是取时间和随机数相结合，既能随时间增长，又能有一定的随机性，不容易让人猜对。</p><h3 id="建立连接时超时了"><a href="#建立连接时超时了" class="headerlink" title="建立连接时超时了"></a>建立连接时超时了</h3><p>建立连接时，发出了syn报文之后c不会无限制地等待s的ack，通常会隔一个特定的时间发送一个syn，当次数超出限制之后，则说明timeout了。当然了这两个参数都是可以改的。</p><h2 id="TCP-Options"><a href="#TCP-Options" class="headerlink" title="TCP Options"></a>TCP Options</h2><p><a href="https://gyazo.com/bbbdbd85b890268f61cb1e02e272fbcd" target="_blank" rel="noopener"><img src="https://i.gyazo.com/bbbdbd85b890268f61cb1e02e272fbcd.png" srcset="/img/loading.gif" alt="https://gyazo.com/bbbdbd85b890268f61cb1e02e272fbcd"></a> TCP的options字段包含了一系列的可选项，除了EOL和NOP这两个选项是只占1个字节之外，其余的选项至少占2个字节：1个字节的kind和1个字节的Length，每种选项的长度都是不定的。</p><h3 id="MSS最大报文长度"><a href="#MSS最大报文长度" class="headerlink" title="MSS最大报文长度"></a>MSS最大报文长度</h3><p>在syn报文中使用的选项。规定了自己能够接收的最长的报文长度，不包括TCP头部和IP头部，仅仅是data的长度。 典型的长度1460，加上TCP和IP的报文头正好1500个字节。</p><h3 id="SACK选择确认"><a href="#SACK选择确认" class="headerlink" title="SACK选择确认"></a>SACK选择确认</h3><p>在syn报文中需要明确SACK permitted，然后在后续的报文中就可以使用选择确认。当没有按照顺序收到报文时（比如收到了1，2，然后立刻收到了5），会标注选择确认。一个SACK块包含两个4字节的数（1个上界顺序号1个下界顺序号）。SACK能够显著地提高效率，和累积确认相比显得更加有效。</p><h3 id="窗口大小放大"><a href="#窗口大小放大" class="headerlink" title="窗口大小放大"></a>窗口大小放大</h3><p>只能在syn报文中使用的选项。窗口大小缩放因子，能够把16bit的窗口大小放大到16bit-30bit的大小。假设放大因子是s的话，那么实际的窗口大小就是header的窗口大小左移s位。 使用放大因子选项的要求还是挺严格的：c发送的syn报文中包含window scale factor，s的syn+ack报文也必须要明确这一个选项，但是大小可以不同。这样就有两个scale。 不太好理解的是window advertisement的时候，假设有一个因子s用来发送窗口大小，有一个因子r来接收窗口大小，那么一旦收到了window advertisement，那么自己的window就要调整成header的window大小左移r位，每次发送window advertisement时，window header中的size就应该是自己实际的window size右移s位。 window scale shift count是由TCP自动选择的，缩放的程度取决于系统buffer的大小，当然这个是可以调的。</p><h3 id="Timestamp时间戳和PAWS"><a href="#Timestamp时间戳和PAWS" class="headerlink" title="Timestamp时间戳和PAWS"></a>Timestamp时间戳和PAWS</h3><p>常用的options，而且不是只能在syn报文中使用。可以用来粗略地估计RTT，进而动态调整超时重传的时间（这个以后还会细讲）。一个时间戳4字节。发送者把自己这边的时间放在TSval，接收者收到后TSval填写自己的时间戳，TSecr抄一遍发送者的时间戳，这样每次都是抄一半写一半。 时间戳选项一般10个字节（4+4+1+1）。 接收者并不在乎发送者的时间戳的单位是什么，时间戳对于一方的意义仅仅在于能够比较大小，因此时间戳只要单调递增就可以了。 Protection Against Wrapped Sequence Number（PAWS），依靠时间戳的单调递增性，可以用来判断两个相同的顺序号的报文的先后。因为顺序号是循环递增的，因此当窗口极大时还是有可能出现前一个周期内有一个包丢了，后一个周期的相同顺序号的包上位了的现象。如下图所示： <a href="https://gyazo.com/daa113ddcc5688f9478338401a11b137" target="_blank" rel="noopener"><img src="https://i.gyazo.com/daa113ddcc5688f9478338401a11b137.png" srcset="/img/loading.gif" alt="https://gyazo.com/daa113ddcc5688f9478338401a11b137"></a></p><blockquote><h4 id="问题：万一时间戳也循环递增，顺序号和时间戳同时重复了呢。"><a href="#问题：万一时间戳也循环递增，顺序号和时间戳同时重复了呢。" class="headerlink" title="问题：万一时间戳也循环递增，顺序号和时间戳同时重复了呢。"></a>问题：万一时间戳也循环递增，顺序号和时间戳同时重复了呢。</h4></blockquote><h3 id="UTO"><a href="#UTO" class="headerlink" title="UTO"></a>UTO</h3><p>User Time Out，这个选项刚出不久，比较新，没有被广泛的使用。我也没看懂。。。</p><h3 id="TCP-AO"><a href="#TCP-AO" class="headerlink" title="TCP-AO"></a>TCP-AO</h3><p>Authentication Option，用来认证加密的，需要事先协商一些加密函数和key，然后在options中附加上traffic key，由这个key发送者和接受者都能够产生正确的解密key。没有被广泛的使用。 不过这是一种对于TCP sproofing attack强有力的反制措施。</p><h2 id="实例分析1"><a href="#实例分析1" class="headerlink" title="实例分析1"></a>实例分析1</h2><p>随便发了个HTTP请求，把数据包抓了一下，主要就是看一看三次握手的部分。 <img src="https://oss.kherrisan.cn/Snipaste_2017-10-18_12-08-11.png" srcset="/img/loading.gif" alt></p><h2 id="TCP状态转换"><a href="#TCP状态转换" class="headerlink" title="TCP状态转换"></a>TCP状态转换</h2><p>一个TCP连接的每一端的状态都会在下面这张图中转换。有的转换是由于收到或者发送了包含状态位的报文而产生的，有的转换则是定时器超时导致。 <img src="https://oss.kherrisan.cn/Snipaste_2017-10-18_13-59-58.png" srcset="/img/loading.gif" alt> 其实CLOSED并不是一个官方的状态，但是这里把CLOSED作为起点能够更加清晰明了地介绍TCP连接的状态转换关系。 图中有2点没有写出来的需要额外注明：</p><ol><li>CLOSED->SYN_SENT在TCP协议中是合法的，但是Berkeley SOcket中没有实现，而且也很少见到。</li><li>从SYN_RCVD->LISTEN的转换，要求必须要该SYN_RCVD状态是由LISTEN转换而来才行，这时如果收到RST报文而不是ACK，那么又会回到LISTEN。这种转换在同时打开（simultaneous open）得情况下是不行的。</li></ol><p>把三次握手和四次挥手的图与状态相结合，如下。 <img src="https://oss.kherrisan.cn/Snipaste_2017-10-18_14-14-43.png" srcset="/img/loading.gif" alt></p><h3 id="TIME-WAIT状态（2-MSL-等待）"><a href="#TIME-WAIT状态（2-MSL-等待）" class="headerlink" title="TIME_WAIT状态（2 MSL 等待）"></a>TIME_WAIT状态（2 MSL 等待）</h3><p>由于IP报文头部的TTL和跳数限制，一个数据包在网络中的生存时间是有一个最大值的，当然这个最大值是可以配置的。 一个主动关闭的TCP在TIME_WAIT状态下必须等待两个MSL（Maximum Segment Lifetime）的时间。原因是： 1. 他将在这2MSL的时间内等待被动关闭放有么有再次发送FIN，如果收到了FIN，说明他发的ACK没有被对方接收到，那么他将会重新发送最终的ACK。 2. 2MSL中，显然连接还没有完全关闭，因此TCP出于合理性和安全性，将在2MSL状态下的连接（4元组）都定义为不可用的。除非通过最高序列号和时间戳进行分辨。否则就会出现另外一个恰巧端口号相同的连接发送的报文“小三上位”的情况。更加严格的规范是，只要两端有一方是在2MSL状态中，那么端口就不可用。 实际上的表现是：客户端断开一个连接后，立刻要求以相同的端口号建立一个新的连接，这时候会报错：Address already in use。</p><h3 id="FIN-WAIT-2"><a href="#FIN-WAIT-2" class="headerlink" title="FIN_WAIT_2"></a>FIN_WAIT_2</h3><p>当主动关闭方发送了FIN并收到了ACK后，会进入FIN_WAIT_2状态。这时连接是处于半关闭的，并且被动关闭放还是可以发送数据的，只要双方愿意，可以永远保持这种状态。 因此有人设计了这样的规则，如果应用程序表明了完全关闭，那么进入到FIN_WAIT_2状态后会启动一个定时器，时间到了就会CLOSE。</p><h3 id="同时打开和同时关闭的转换"><a href="#同时打开和同时关闭的转换" class="headerlink" title="同时打开和同时关闭的转换"></a>同时打开和同时关闭的转换</h3><p>状态图上有写，这里就不赘述了。</p><h2 id="RST报文"><a href="#RST报文" class="headerlink" title="RST报文"></a>RST报文</h2><h3 id="端口不存在"><a href="#端口不存在" class="headerlink" title="端口不存在"></a>端口不存在</h3><p>Connection Refused.</p><h3 id="终止一条链接"><a href="#终止一条链接" class="headerlink" title="终止一条链接"></a>终止一条链接</h3><p>比如用户忽然ctrl+c，这时所有排队的数据都会被丢弃，一个RST报文会被发送出去。同时另一方看到了RST也会采取终止操作而不是正常的关闭操作。 从某种程度上说RST报文应该是最后一个报文，因为他不会要求另一方回复任何消息，包括ACK。</p><h3 id="半开链接"><a href="#半开链接" class="headerlink" title="半开链接"></a>半开链接</h3><p>如果存在一个半开链接。比如客户机连上服务器后忽然断电，客户机重启后一无所知，但是服务器以为客户机还在连接中。此时服务器向客户机发送数据，此时客户机理应回复RST。</p><h3 id="时间等待错误"><a href="#时间等待错误" class="headerlink" title="时间等待错误"></a>时间等待错误</h3><p><img src="https://oss.kherrisan.cn/Snipaste_2017-10-18_15-31-54.png" srcset="/img/loading.gif" alt> 主动关闭方在2MSL中收到了本应该在之前收到的报文，回复了ACK，但是此时恰好被动关闭方已经CLOSE，已经失去了所有关于此连接的信息，一无所知的被动关闭方收到了这个不明所以的ACK，只能回复一个RST，<strong>而这个RST会导致主动关闭方提前CLOSE</strong>。</p><h2 id="TCP服务器选项"><a href="#TCP服务器选项" class="headerlink" title="TCP服务器选项"></a>TCP服务器选项</h2><p>在绝大多数运行的服务器上，服务器程序会监听某一个端口，当有新的连接到来时，建立一个新的进程或者线程来处理他，通常这个线程（进程）会启动一个socket。 以ssh为例，主进程监听22端口，当一个新的连接到来时，创建一个新的线程和socket，这个socket的状态为established。主进程继续监听。 <img src="https://oss.kherrisan.cn/Snipaste_2017-10-21_19-23-04.png" srcset="/img/loading.gif" alt> 途中的本地ip地址和远程ip地址都是通配符，没有限制。</p><h3 id="将要到来的连接队列"><a href="#将要到来的连接队列" class="headerlink" title="将要到来的连接队列"></a>将要到来的连接队列</h3><p>为了解决当主进程正在创建一个新的socket的同时，又有多个SYN报文同时到达的情况，TCP中设计了一个队列来进行排队管理。 从服务端来看，一个新的连接具有两种状态（见状态图）： 1. SYN_RCVD 收到了SYN，发送了SYN+ACK，等待客户端回复ACK的阶段。 2. ESTABLISHED 收到了ACK，完成了三次握手的最后一次，但是<strong>还没有把连接交付给应用程序的阶段</strong>。 在现代linux内核协议栈中，应用程序能够控制第二个队列的最大数量。 在linux中，有如下的规则： 1. 当新的连接的SYN报文到来时，如果SYN_REVD状态的连接数超过某个规定值，拒绝该连接。 2. 应用程序能够规定一个backlog，来限制第二阶段的连接数量，当然这个backlog也是有（操作系统规定的）最大值的限制的。 3. 如果有剩余空间，那么TCP会ACK新来的SYN。如果TCP还没有将连接交给应用程序，那么此时收到的数据会被TCP缓存。 4. 如果没有剩余空间了，那么TCP会延迟这个连接，来个应用程序一个跟上的机会。除了Linux。 按照正常的TCP机制，当第二阶段的队列已满时，应该让客户端超时，而不是像Linux一样发送RST报文。 如果服务器应用程序想要拒绝一个连接，别无他法，只能在连接建立之后发送FIN，拒绝三次握手不是他所能涉足的操作。</p><h3 id="与TCP连接管理相关的攻击"><a href="#与TCP连接管理相关的攻击" class="headerlink" title="与TCP连接管理相关的攻击"></a>与TCP连接管理相关的攻击</h3><p>SYN flood，sequence number attack等。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/b225a4eb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TCP/IP协议 TCP(Preliminaries)</title>
      <link>http://www.kherrisan.cn/posts/ad7bd9a4/</link>
      <guid>http://www.kherrisan.cn/posts/ad7bd9a4/</guid>
      <pubDate>Wed, 26 Jul 2017 19:16:59 GMT</pubDate>
      <description>
      
        &lt;p&gt;本章应是介绍TCP的引言，后面有5个章节是详细介绍TCP协议各个部分的。&lt;/p&gt;
&lt;h2 id=&quot;一个设计思路，以及几个概念&quot;&gt;&lt;a href=&quot;#一个设计思路，以及几个概念&quot; class=&quot;headerlink&quot; title=&quot;一个设计思路，以及几个概念&quot;&gt;&lt;/a&gt;一个设计思路，以及几个概念&lt;/h2&gt;&lt;p&gt;在容易出现差错，不可靠的传输频道上，怎样确保传输的内容正确呢————检错码，纠错码，重传，TCP选择了检错码和自动重传。自动重传需要确认的信号，就有了Acknowledgement。发送者发送一个报文，接受者确认一次，然后发送者再发送一个报文，这样叫“停等”。停等的确认机制很简单，但是吞吐量很低很低，怎样提高效率呢。于是就有了滑动窗口，可变长的。 也就是说TCP协议机制的一大部分都是为了保证传输的可靠性的，这是TCP的一大特征，另两大特征一个是面向连接的，对应着端口号或者socket，另一个是字节流的，由顺序号体现。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>本章应是介绍TCP的引言，后面有5个章节是详细介绍TCP协议各个部分的。</p><h2 id="一个设计思路，以及几个概念"><a href="#一个设计思路，以及几个概念" class="headerlink" title="一个设计思路，以及几个概念"></a>一个设计思路，以及几个概念</h2><p>在容易出现差错，不可靠的传输频道上，怎样确保传输的内容正确呢————检错码，纠错码，重传，TCP选择了检错码和自动重传。自动重传需要确认的信号，就有了Acknowledgement。发送者发送一个报文，接受者确认一次，然后发送者再发送一个报文，这样叫“停等”。停等的确认机制很简单，但是吞吐量很低很低，怎样提高效率呢。于是就有了滑动窗口，可变长的。 也就是说TCP协议机制的一大部分都是为了保证传输的可靠性的，这是TCP的一大特征，另两大特征一个是面向连接的，对应着端口号或者socket，另一个是字节流的，由顺序号体现。</p><a id="more"></a><h2 id="TCP-header的结构"><a href="#TCP-header的结构" class="headerlink" title="TCP header的结构"></a>TCP header的结构</h2><p><a href="https://gyazo.com/a26dff4dc9a324807b52c727b557a371" target="_blank" rel="noopener"><img src="https://i.gyazo.com/a26dff4dc9a324807b52c727b557a371.png" srcset="/img/loading.gif" alt="https://gyazo.com/a26dff4dc9a324807b52c727b557a371"></a></p><ol><li>源端口和目的端口与IP报文头中的源IP地址和目的IP地址一起构成了一个四元组，标识了一个TCP连接（或者叫Socket）。</li><li>Sequence Number用来标识这个报文中的数据段在这个数据流中的位置。</li><li>Acknowledgement Number用来标识已经确认收到的数据。</li><li>Header Length用来表示头部长度，因为Options是变长的。</li><li>6个标志位。</li><li>Window Size明确了滑动窗口的大小，用于Window Update吧。</li><li>Checksum校验和。</li><li>Urgent Pointer还不清楚。</li><li>Options中的是可选项，比如最大报文长度，时间戳，选择确认（SACK），窗口尺寸的缩放因子等等。</li></ol>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/ad7bd9a4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Typescript 函数</title>
      <link>http://www.kherrisan.cn/posts/f8eab2f8/</link>
      <guid>http://www.kherrisan.cn/posts/f8eab2f8/</guid>
      <pubDate>Sat, 22 Jul 2017 21:52:40 GMT</pubDate>
      <description>
      
        
        
          &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs null&quot;&gt;function add(x: number, y: number): number {
  return x + y;
}

let myAdd: 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<a id="more"></a><div class="hljs"><pre><code class="hljs null">function add(x: number, y: number): number {  return x + y;}let myAdd: (x: number, y: number) => number = function(  x: number,  y: number): number {  return x + y;};function buildName(firstName: string, lastName?: string) {  // function buildName(firstName:string,lastName="Smith"){  if (lastName) return firstName + " " + lastName;  else return firstName;}let result1 = buildName("Zou", "Dikai");let result2 = buildName("ZouZOU");function buildName_2(firstName: string, ...restOfName: string[]) {  return firstName + " " + restOfName.join(" ");}let buildNameFun: (fname: string, ...rest: string[]) => string = buildName_2;interface Card {  suit: string;  card: number;}interface Deck {  suits: string[];  card: number[];  createCardPicker(this: Deck): () => Card;}let deck: Deck = {  suits: ["heart", "spades", "clubs", "diamonds"],  cards: Array(52),  createCardPicker: function(this: Deck) {    return () => {      let pickedCard = Math.floor(Math.random() * 52);      let pickedSuit = Math.floor(pickedCard / 13);      return { suit: this.suits[pickedSuit], card: pickedCard % 13 };    };  }};let suits = ["hearts", "spades", "clubs", "diamonds"];function pickCard(x: { suit: string; card: number }[]): number;function pickCard(x: number): { suit: string; card: number };function pickCard(x): any {  if (typeof x == "object") {    let pickedCard = Math.floor(Math.random() * x.length);    return pickedCard;  } else if (typeof x == "number") {    let pickedSuit = Math.floor(x / 13);    return { suit: suits[pickedSuit], card: x % 13 };  }}let myDeck = [  { suit: "diamonds", card: 2 },  { suit: "spades", card: 10 },  { suit: "hearts", card: 4 }];let pickedCard1 = myDeck[pickCard(myDeck)];let pickedCard2 = pickCard(15);</code></pre></div><p>总结一下，总共四部分： 1. 函数的类型，原型。 2. 可选参数，默认参数，变长参数。 3. this的坑。 4. 函数重载。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/f8eab2f8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MIT_6.828 Homework: boot xv6</title>
      <link>http://www.kherrisan.cn/posts/7ce108b4/</link>
      <guid>http://www.kherrisan.cn/posts/7ce108b4/</guid>
      <pubDate>Wed, 19 Jul 2017 16:13:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://gyazo.com/43c38a68a3753834a69995cd0a6ee24b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://i.gyazo.com/43c38a68a3753834a69995cd0a6ee24b.png&quot; srcset=&quot;/img/loading.gif&quot; alt=&quot;https://gyazo.com/43c38a68a3753834a69995cd0a6ee24b&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><a href="https://gyazo.com/43c38a68a3753834a69995cd0a6ee24b" target="_blank" rel="noopener"><img src="https://i.gyazo.com/43c38a68a3753834a69995cd0a6ee24b.png" srcset="/img/loading.gif" alt="https://gyazo.com/43c38a68a3753834a69995cd0a6ee24b"></a></p><a id="more"></a><h2 id="HW-Boot-xv6"><a href="#HW-Boot-xv6" class="headerlink" title="HW:Boot xv6"></a>HW:Boot xv6</h2><p><a href="https://gyazo.com/d3f45ea928d37d52128677cebab14745" target="_blank" rel="noopener"><img src="https://i.gyazo.com/d3f45ea928d37d52128677cebab14745.png" srcset="/img/loading.gif" alt="https://gyazo.com/d3f45ea928d37d52128677cebab14745"></a> nm 命令能够列出一个obj文件的符号表，也就是说这行命令在kernel中找_start这个符号，并且获得了它所在的地址。接着启动qemu-gdb和gdb进入调试模式。这里需要两个终端开着，一个运行<code>make qemu-gdb</code>，另一个运行<code>gdb</code>(记得都要在<code>xv6-public</code>目录下启动啊！)。 在地址0010000c处设置断点，然后运行到这个断点。</p><div class="hljs"><pre><code class="hljs null">br * 0x0010000cc</code></pre></div><blockquote><p>这里gdb报了个错误，好像是什么保护文件什么的导致不能调试了，按照他给出的提示修改.gdbinit文件就行了。其实在mit的HW提示中也有提到这个。</p></blockquote><p><a href="https://gyazo.com/1e3fd1122da481d365b5b4811b1bc1d3" target="_blank" rel="noopener"><img src="https://i.gyazo.com/1e3fd1122da481d365b5b4811b1bc1d3.png" srcset="/img/loading.gif" alt="https://gyazo.com/1e3fd1122da481d365b5b4811b1bc1d3"></a> 然后看一看各个寄存器和堆栈中都有一些什么（主要就是为了熟悉一下gdb调试命令吧）。如果不熟悉某个命令可以直接<code>help [命令]</code>查看帮助，而且还挺详细的。 比如x这个指令的格式。 <a href="https://gyazo.com/15661ac2d82821d2e56dfcd6fa30dacb" target="_blank" rel="noopener"><img src="https://i.gyazo.com/15661ac2d82821d2e56dfcd6fa30dacb.png" srcset="/img/loading.gif" alt="https://gyazo.com/15661ac2d82821d2e56dfcd6fa30dacb"></a> 查看一下各个寄存器的内容。 <a href="https://gyazo.com/9a876a061b842208e5b06c7cd8db643c" target="_blank" rel="noopener"><img src="https://i.gyazo.com/9a876a061b842208e5b06c7cd8db643c.png" srcset="/img/loading.gif" alt="https://gyazo.com/9a876a061b842208e5b06c7cd8db643c"></a> 查看一下堆栈的内容（从esp开始，列出24个字，以16进制显示）。IO课结束了有一段时间了，有点忘记进制和字长的关系了。顺便复习一下。</p><blockquote><p>一个word（字）应该是大多数指令能处理的最大长度，或者ALU能够运算的位宽度，字多长也就是常常说的32/64位机。那么问题来了，这个qemu是多少位的呢。。。。。。我猜是32位的，因为eax，ebx这些寄存器都是32位的。在make qemu-gdb的时候显示qemu-system-i386应该也能说明这一点吧。也就是说一个字应该是32位的，4个字节的。 16进制中，两个数字就能代表一个byte的值，即一个byte能存放0x00-0xff。那么一个字就应该是0xffffffff这样的规模。</p></blockquote><p>也就是说这里从0x7bdc的位置开始打印出了24个word。 <a href="https://gyazo.com/6cb14362125238a4826b040fa01e1317" target="_blank" rel="noopener"><img src="https://i.gyazo.com/6cb14362125238a4826b040fa01e1317.png" srcset="/img/loading.gif" alt="https://gyazo.com/6cb14362125238a4826b040fa01e1317"></a> exercise要求每个位置写一点注释，说明哪里是真正的堆栈，并且弄清楚现在堆栈里面存放的都是啥。要想弄清楚堆栈里面的数据的意义，就需要知道这些数据是什么时候被压入堆栈的，所以要从头开始单步运行。根据exercise的提示，从<code>bootmain.S</code>的<code>0x7c00</code>开始走一遍吧。一遍单步执行一遍可以对照着bootmain.S看，避免走过来头。 乱七八糟的指令先不去管，一直走直到有往esp放东西的时候（esp寄存器存放堆栈段栈顶的位置，如果往堆栈中push了，那么esp中的值会变小，32位机中esp一次移动4byte）。 <a href="https://gyazo.com/4b40ed2de60574be770dd96eddb19d71" target="_blank" rel="noopener"><img src="https://i.gyazo.com/4b40ed2de60574be770dd96eddb19d71.png" srcset="/img/loading.gif" alt="https://gyazo.com/4b40ed2de60574be770dd96eddb19d71"></a> <a href="https://gyazo.com/a4f121bfcc5d762a73a41b303dd45877" target="_blank" rel="noopener"><img src="https://i.gyazo.com/a4f121bfcc5d762a73a41b303dd45877.png" srcset="/img/loading.gif" alt="https://gyazo.com/a4f121bfcc5d762a73a41b303dd45877"></a> 这个7c00在bootmain.S中的符号是start，也就是一开始的时候的地址嘛。把这个地址赋给了esp。其实逻辑上是讲得通的，因为原来0x7c00-0x7c43存放的是bootmain.S中的指令，现在指令执行完毕了，那这一段内存就可以挪作它用，比如用来做堆栈的内存空间了。 第一个问题解决了：在0x7c43处初始化堆栈。 第二个问题，call bootmain的时候，堆栈只有一个东西（刚刚才初始化，堆栈应该还是空的），应该是call bootmain下一条指令的地址。 <a href="https://gyazo.com/5cf9f7ceb8ea51a7328d827b456f3f13" target="_blank" rel="noopener"><img src="https://i.gyazo.com/5cf9f7ceb8ea51a7328d827b456f3f13.png" srcset="/img/loading.gif" alt="https://gyazo.com/5cf9f7ceb8ea51a7328d827b456f3f13"></a> 执行完call之后立刻看一下堆栈的内容。得到验证了。 <a href="https://gyazo.com/e2769500d04dac365752ccda41a81cea" target="_blank" rel="noopener"><img src="https://i.gyazo.com/e2769500d04dac365752ccda41a81cea.png" srcset="/img/loading.gif" alt="https://gyazo.com/e2769500d04dac365752ccda41a81cea"></a> 第三个问题，对堆栈操作的第一条指令是push ebp，这时候ebp是0看不出什么。 <a href="https://gyazo.com/a7b5fc45d318e8269b32bceb88e16f80" target="_blank" rel="noopener"><img src="https://i.gyazo.com/a7b5fc45d318e8269b32bceb88e16f80.png" srcset="/img/loading.gif" alt="https://gyazo.com/a7b5fc45d318e8269b32bceb88e16f80"></a> 第四个问题，问什么时候eip变成0x1000c了，显然是一个函数调用，bootmain中函数调用只有readseg，stosb，entry三个，前两个地址一看就不对，那明显就是调用entry函数的时候了。这个函数调用会将下一条指令的地址压栈，但是似乎这个下一条指令永远不会被执行，因为entry()函数不会返回！ <a href="https://gyazo.com/4b9d0bded291d5347311ffd9278cdda1" target="_blank" rel="noopener"><img src="https://i.gyazo.com/4b9d0bded291d5347311ffd9278cdda1.png" srcset="/img/loading.gif" alt="https://gyazo.com/4b9d0bded291d5347311ffd9278cdda1"></a> <a href="https://gyazo.com/c18b6aa8330a337b4f6031035a85bf20" target="_blank" rel="noopener"><img src="https://i.gyazo.com/c18b6aa8330a337b4f6031035a85bf20.png" srcset="/img/loading.gif" alt="https://gyazo.com/c18b6aa8330a337b4f6031035a85bf20"></a> 花了2个半小时才做完一个作业，太菜了。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/7ce108b4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TCP/IP协议 Introduction</title>
      <link>http://www.kherrisan.cn/posts/379185ba/</link>
      <guid>http://www.kherrisan.cn/posts/379185ba/</guid>
      <pubDate>Tue, 18 Jul 2017 17:38:05 GMT</pubDate>
      <description>
      
        &lt;p&gt;一边看书，一边做一些笔记。刚刚开始看第一章，书是全英文版的，一上来就感觉很难，一改这类书第一章都是导论所以很简单的印象。&lt;/p&gt;
&lt;h2 id=&quot;架构原则&quot;&gt;&lt;a href=&quot;#架构原则&quot; class=&quot;headerlink&quot; title=&quot;架构原则&quot;&gt;&lt;/a&gt;架构原则&lt;/h2&gt;&lt;p&gt;因特网架构的首要原则主要考虑这几个关键词：高效，复用，连接已有的网络。 二级原则包含下面几个方面：&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>一边看书，一边做一些笔记。刚刚开始看第一章，书是全英文版的，一上来就感觉很难，一改这类书第一章都是导论所以很简单的印象。</p><h2 id="架构原则"><a href="#架构原则" class="headerlink" title="架构原则"></a>架构原则</h2><p>因特网架构的首要原则主要考虑这几个关键词：高效，复用，连接已有的网络。 二级原则包含下面几个方面：</p><a id="more"></a><ol><li>发生了loss也要继续。</li><li>支持多种服务。</li><li>适配多种网络。</li><li>支持分布式资源的管理。</li><li>高效。（高效性）</li><li>新主机的接入要足够方便。（拓展性）</li><li>资源必须可数。（高效性）</li></ol><p>几个基本概念： packet（包） datagram（数据报） connection（连接） 还有两个原则，这两个原则我没怎么看懂，所以想先放一放。</p><h4 id="end-to-end-argument"><a href="#end-to-end-argument" class="headerlink" title="end to end argument"></a>end to end argument</h4><h4 id="fate-sharing"><a href="#fate-sharing" class="headerlink" title="fate sharing"></a>fate sharing</h4><h2 id="设计与实现"><a href="#设计与实现" class="headerlink" title="设计与实现"></a>设计与实现</h2><p><a href="https://gyazo.com/98b166aba720915bc11aa51544bca788" target="_blank" rel="noopener"><img src="https://i.gyazo.com/98b166aba720915bc11aa51544bca788.png" srcset="/img/loading.gif" alt="https://gyazo.com/98b166aba720915bc11aa51544bca788"></a> 这是OSI7层模型，下三层是所有设备都有的，上四层是只有主机才有的。各层的分工各不相同。在OSI层结构的基础上，每一层能够<strong>复用</strong>数据，能够<strong>封装</strong>上层的数据，封装的方式是在上层的数据最前加上一个header，有的层会在最尾端加上trailer，封装了之后就不必关心上层协议下来的数据的内容。每层协议可以封装多个上层协议的PDU（协议数据单元）。 这里的<strong>复用</strong>是指，每一层所要封装的上层PDU可以是来自不同的协议的，比如IP层可以封装TCP和UDP的就好像每一层都有一个槽，槽里面放的是什么东西是可以变的。为了能够正确的解复用，需要在封装的时候在header部分加上一些标识符来表面PDU是什么类型的，否则接收放在拆包的时候就无法正确地处理了。 <a href="https://gyazo.com/bdfc6e943b517149e9e7b9c1264254f5" target="_blank" rel="noopener"><img src="https://i.gyazo.com/bdfc6e943b517149e9e7b9c1264254f5.png" srcset="/img/loading.gif" alt="https://gyazo.com/bdfc6e943b517149e9e7b9c1264254f5"></a> <a href="https://gyazo.com/38587d2012ea9ee270029e19792bf1a4" target="_blank" rel="noopener"><img src="https://i.gyazo.com/38587d2012ea9ee270029e19792bf1a4.png" srcset="/img/loading.gif" alt="https://gyazo.com/38587d2012ea9ee270029e19792bf1a4"></a> 上面这张图描述了一个理想的网络结构，两台主机，中间一台交换机一台路由器，交换机只包含两层，路由器包含了三层，所以路由器可以用来联通不同类型的网络。当今时代也有很多路由器和交换机能充当主机的身份的，比如路由器能够供管理员登陆，那就说明肯定有应用层了。 网络层以上的层使用end to end协议，只有主机才使用这些协议（因为中继设备没有网络层以上的层），网络层使用hop to hop协议，所有主机和中继设备都会用到。 注：交换机或者说网桥不被普遍地认为是中继设备因为他们不被编址，换句话说，从网络层设备的角度看，交换机是透明的。</p><h2 id="TCP-IP协议栈的结构和协议"><a href="#TCP-IP协议栈的结构和协议" class="headerlink" title="TCP/IP协议栈的结构和协议"></a>TCP/IP协议栈的结构和协议</h2><p><a href="https://gyazo.com/3c84782b0a61cc631ad94a515439d7d8" target="_blank" rel="noopener"><img src="https://i.gyazo.com/3c84782b0a61cc631ad94a515439d7d8.png" srcset="/img/loading.gif" alt="https://gyazo.com/3c84782b0a61cc631ad94a515439d7d8"></a> 有的层还包含一些附属的协议，协议很多而且后面的章节还会详细的介绍所以这里就不一一罗列了。 有关复用，解复用，封装的问题再一次得到了体现。如以太网帧包含16位的以太网类型字段（ipv4，ipv6，arp），IP数据报包含8位的协议字段（ICMP，IPV4，TCP，UDP），在传输层则使用端口号来进行解复用。 <a href="https://gyazo.com/4078dc6dfc4f440015d229351c2f9fb7" target="_blank" rel="noopener"><img src="https://i.gyazo.com/4078dc6dfc4f440015d229351c2f9fb7.png" srcset="/img/loading.gif" alt="https://gyazo.com/4078dc6dfc4f440015d229351c2f9fb7"></a></p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/379185ba/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MIT_6.828 简介，环境搭建</title>
      <link>http://www.kherrisan.cn/posts/d949f9e1/</link>
      <guid>http://www.kherrisan.cn/posts/d949f9e1/</guid>
      <pubDate>Mon, 17 Jul 2017 16:13:22 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;MIT大名鼎鼎的操作系统课程，6.828，根据我初步的了解，这门课非常注重动手能力。大二下学期刚刚上了操作系统课，但是总共就做了两个实验，感觉动手的成分非常的少，作业都是以做题为主。所以想亲自动手尝试一下。 整个课程基于linux的xv6系统，使用qemu模拟器进行运行和调试，同时涉及c语言编译链接的工具链的使用。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MIT大名鼎鼎的操作系统课程，6.828，根据我初步的了解，这门课非常注重动手能力。大二下学期刚刚上了操作系统课，但是总共就做了两个实验，感觉动手的成分非常的少，作业都是以做题为主。所以想亲自动手尝试一下。 整个课程基于linux的xv6系统，使用qemu模拟器进行运行和调试，同时涉及c语言编译链接的工具链的使用。</p><a id="more"></a><hr><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>官网： <a href="https://pdos.csail.mit.edu/6.828/2016/" target="_blank" rel="noopener" title="MIT 6.828">MIT 6.828</a> 搜集的前辈的教程： <a href="http://www.cnblogs.com/fatsheep9146/p/5115086.html" target="_blank" rel="noopener" title="MIT 6.828 JOS学习笔记5. Exercise 1.3">MIT 6.828 JOS学习笔记5. Exercise 1.3</a> <a href="http://blog.csdn.net/woxiaohahaa/article/details/49225447" target="_blank" rel="noopener" title="xv6试验环境bochs及qemu搭建">xv6试验环境bochs及qemu搭建</a> <a href="http://blog.csdn.net/cinmyheart/article/details/39754269" target="_blank" rel="noopener" title="MIT 操作系统实验 MIT JOS lab1">MIT 操作系统实验 MIT JOS lab1</a> 这些都是中文的博客，感觉中文的资源比较的少，英文的可以用google搜到，就不贴在上面了。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="ubuntu基础环境"><a href="#ubuntu基础环境" class="headerlink" title="ubuntu基础环境"></a>ubuntu基础环境</h3><p>先用virtualbox 装个ubuntu16.04的虚拟机，这里不再赘述。 装好以后，换ustc的源， apt update，upgrade，更新一下语言包，还有virtualbox的增强工具。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>首先是gnu的c编译链接工具，和git，再搞个vim把。</p><div class="hljs"><pre><code class="hljs null">sudo apt-get install build-essential git vim</code></pre></div><p>按照官网的说明检查一下工具链有没有到位。</p><div class="hljs"><pre><code class="hljs null">objdump -i</code></pre></div><p>首先要说明一下，这个objdump是linux下的一个反汇编工具。 <a href="https://gyazo.com/4fe791f8a05f4b5bfbf4e4f325ebef85" target="_blank" rel="noopener"><img src="https://i.gyazo.com/4fe791f8a05f4b5bfbf4e4f325ebef85.png" srcset="/img/loading.gif" alt="https://gyazo.com/4fe791f8a05f4b5bfbf4e4f325ebef85"></a> 如果有<code>elf32-i386</code>说明就没错啦。</p><div class="hljs"><pre><code class="hljs null">gcc -m32 -print-libgcc-file-name</code></pre></div><p><a href="https://gyazo.com/3ae560f9d2516634ff224783f818d3ec" target="_blank" rel="noopener"><img src="https://i.gyazo.com/3ae560f9d2516634ff224783f818d3ec.png" srcset="/img/loading.gif" alt="https://gyazo.com/3ae560f9d2516634ff224783f818d3ec"></a> 终端应该会输出<code>/usr/lib/gcc/i486-linux-gnu/version/libgcc.a</code>或者<code>/usr/lib/gcc/x86_64-linux-gnu/version/32/libgcc.a</code>这样的东西，按照步骤来的话应该是没什么异常情况的。</p><h3 id="xv6和qemu"><a href="#xv6和qemu" class="headerlink" title="xv6和qemu"></a>xv6和qemu</h3><p>官网上说linux发行版的qemu不行啊，跑xv6会出错，所以用我们mit打包过的qemu吧。但是我还是选择用apt大法安装qemu。要是真的出了什么问题，到时候再说吧。</p><div class="hljs"><pre><code class="hljs null">sudo apt-get install qemu</code></pre></div><p>然后是xv6系统，我就把它放到home目录下了。</p><div class="hljs"><pre><code class="hljs null">git clone git://github.com/mit-pdos/xv6-public.gitcd xv6-publicmakemake qemu</code></pre></div><p><a href="https://gyazo.com/640008d35676d4c845698fd89f0c0c4a" target="_blank" rel="noopener"><img src="https://i.gyazo.com/640008d35676d4c845698fd89f0c0c4a.png" srcset="/img/loading.gif" alt="https://gyazo.com/640008d35676d4c845698fd89f0c0c4a"></a> 弹出这个窗口，万事大吉。不过要注意了，在qemu里面看不到鼠标哦。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/d949f9e1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Typescript 类</title>
      <link>http://www.kherrisan.cn/posts/f5fd3baa/</link>
      <guid>http://www.kherrisan.cn/posts/f5fd3baa/</guid>
      <pubDate>Thu, 13 Jul 2017 11:22:11 GMT</pubDate>
      <description>
      
        
        
          &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs null&quot;&gt;class Greeter{
    greeting:string;
    constructor(message:string){
      
        
      
      </description>
      
      
      <content:encoded><![CDATA[<a id="more"></a><div class="hljs"><pre><code class="hljs null">class Greeter{    greeting:string;    constructor(message:string){        this.greeting=message;    }    greet(){        return "Hello,"+this.greeting;    }}let greeter=new Greeter("World");abstract class Animal{    name:string;    constructor(name:string){this.name=name;}    move(distanceInMeters:number=0){        console.log(`${this.name} moved ${distanceInMeters}m`);    }}class Snake extends Animal{    // constructor(name:string){super(name);}    move(distenceInMeters=5){        console.log("Slithering...");        super.move(distenceInMeters);    }}class Horse extends Animal{    // constructor(name:string){super(name);}    move(distanceInMeters=45){        console.log("Galloping...");        super.move(distanceInMeters);    }}let sam=new Snake("Sammy the Python");let tom:Animal=new Horse("Tommy the Palomino"); //有一点多态的感觉咯sam.move();tom.move();class Person{    protected readonly name:string;    protected constructor(name:string){this.name=name;}}class Employee extends Person{    private _department:string;    constructor(name:string,department:string){        super(name);        this._department=department;    }    public getElevatorPitch(){        return `Hello,My Name is ${this.name} and I work in ${this._department}.`;    }    public get department():string{        return this._department;    }    public set department(newDepartment:string){        if(newDepartment==""){            console.log("Error:Unauthorized update of employee");        }else{            this._department=newDepartment;        }    }}let howard=new Employee("Howard","Sales");howard.department="";howard.department="Tech";class Grid{    static origin={x:0,y:0};    calculateDistanceFromOrigin(point:{x:number,y:number}){        let xDist=(point.x-Grid.origin.x);        let yDist=(point.y-Grid.origin.y);        return Math.sqrt(xDist*xDist+yDist*yDist)/this.scale;    }    constructor(public scale:number){}}</code></pre></div><p>嗯这一节的代码就看起来舒服多了，和java几乎没什么区别。get和set函数也是形如C#中的存取器的写法。 忽然就不想写什么了。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/f5fd3baa/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Typescript 接口</title>
      <link>http://www.kherrisan.cn/posts/d016d80b/</link>
      <guid>http://www.kherrisan.cn/posts/d016d80b/</guid>
      <pubDate>Thu, 13 Jul 2017 10:40:41 GMT</pubDate>
      <description>
      
        
        
          &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs null&quot;&gt;function printLabel(labelledObj: { abel: string }) {
  console.log(labelledObj.abel);
}

let 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<div class="hljs"><pre><code class="hljs null">function printLabel(labelledObj: { abel: string }) {  console.log(labelledObj.abel);}let myObj={size:10,abel:"size 10 object"};printLabel(myObj);interface LabelledValue{    label:string;}function printLabel_2(labelledObj:LabelledValue){    console.log(labelledObj.label);}let myObj_2={size:10,label:"Size 10 Object"};printLabel_2(myObj_2);interface SquareConfig{    color?:string,    width?:number}function createSquare(config:SquareConfig):{color:string,area:number}{    let newSquare={color:"White",area:100};    if(config.color){        newSquare.color=config.color;    }    if(config.width){        newSquare.area=config.width*config.width;    }    return newSquare;}let mySquare=createSquare({color:"black"});interface Point{    readonly x:number;    readonly y:number;}let p1:Point={x:10,y:20}// p1.x=5;let a:number[]=[1,2,3];let ro:ReadonlyArray<number>=a;a=ro as number[];let mySquare_2=createSquare({colorr:"red",width:100} as SquareConfig);interface SearchFunc{    (source:string,subString:string):boolean;}let mySearch:SearchFunc;mySearch=function(source:string,subString:string){    let result=source.search(subString);    return result>-1;}mySearch=function(src,sub){    let result=src.search(sub);    return result>-1;}interface StringArray{    [index:number]:string,}let myArray:StringArray;myArray=["Bob","Fred"];let myStr:string=myArray[0];interface NumberDictionary{    [index:string]:number;    length:number;    // name:string;}interface ClockInterface{    currentTime:Date;    setTime(d:Date);}class Clock implements ClockInterface{    currentTime:Date;    constructor(h:number,m:number){}    setTime(d:Date){        this.currentTime=d;    }}interface ReadonlyStringArray{    readonly [index:number]:string;}let myArray_2:ReadonlyStringArray=["Alice","Bob"];// myArray_2[0]="Mallory"interface Shape{    color:string;}interface Square extends Shape{    sideLength:number;}let square=<Square>{};square.color="blue";square.sideLength=10;interface Counter{    (start:number):string;    interval:number;    reset();}function getCounter():Counter{    let counter=<Counter>function(start:number){}; //function 被转型为实现Counter接口的一个对象。    counter.interval=123;    counter.reset=function(){};    return counter;}let c=getCounter();c(10);c.reset();c.interval=0.5;class Control{    private state:any;}interface SelectabelControl extends Control{    select():void;}class Button extends Control{    select(){}}</code></pre></div><p>ts中，一个接口可以包含如下内容：</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>包括基本类型的和类类型的，可以通过private等关键字修饰访问权限，可以通过readonly修饰可变性。从这个方面来开，ts中的接口和java中的接口还是类似的。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>包括匿名的和非匿名的。包含匿名函数的接口可以当成一个函数使用，也就是说这里的接口不再是只能由class实现的东西了，一个函数也可以实现一个接口。从动态的角度看，函数本身也是一个对象。函数可以转型成一个实现了接口的对象。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>包括数字索引和字符串索引，可以构件数组和字典的形式。</p><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><p>可以由对象进行实例化，也可以由函数实例化。</p><h3 id="可见性，可访问性"><a href="#可见性，可访问性" class="headerlink" title="可见性，可访问性"></a>可见性，可访问性</h3><p>这里对可见性讲的非常的粗糙，应该在后面的章节还会提到。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>接口可以继承接口，也可以继承类。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/d016d80b/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Typescript 类型和变量</title>
      <link>http://www.kherrisan.cn/posts/6eb1636b/</link>
      <guid>http://www.kherrisan.cn/posts/6eb1636b/</guid>
      <pubDate>Tue, 11 Jul 2017 23:01:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;因为我js没有认真学，所以从typescript学起的话要从基础的一点一点来了。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>因为我js没有认真学，所以从typescript学起的话要从基础的一点一点来了。</p><a id="more"></a><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><div class="hljs"><pre><code class="hljs null">let Done: boolean = false;let decimal: number = 6;let hex: number = 0xf00d;let binary: number = 0b1010;let octal: number = 0x744;let color: string = "blue";color = "red";let fullName: string = `Bob Bobbington`;let age: number = 37;let sentence: string = `Hello,my name is $(fullname).I'll be $(age+1) years old next month.`;let list: number[] = [1, 2, 3];let list_2: Array = [1, 2, 3];let x: [string, number];x = ["helloworld", 10];console.log(x[0].substr(1));// console.log(x[1].substr(1));x[3] = "world";console.log(x[3].toString());enum Color {  Red,  Green,  Yello}let c: Color = Color.Green;console.log(Color[1]);let notSure:any=4;notSure="maybe a string instead."notSure=false;function weather():void{  alert("This is an alert.");}let unusable:void=undefined;let u:undefined=undefined;let n:null=null;function error(message:string):never{  throw new Error(message);}let someValue:any="this is a string.";let strLength:number=(someValue).length;let strLength_2:number=(someValue as string).length;</code></pre></div><p>和其他解释型语言类似，基本类型主要有：boolean，number，string。数组的话有：Array和string[]。还有枚举类enum。 从我个人角度看，比较陌生的有：any，void，undefined，null，never。 <strong>any</strong>意思是不规定类型，常常用于使用第三方库的情况。一个any类型的对象既可以引用number，也可以引用string。在python和js中任意一个变量都可以像这样操作，但是在强类型的ts中就不行了，所以有js这种东西。 另外，any类型和Object类型（万物的父类）有所区别，any类型自带的一些方法，object类型并不能使用。 <strong>void</strong>类型的遍历只能被赋予undefined或者null，没什么大用处，但是void函数倒是很常见。 <strong>never</strong>类型的函数永远都不会返回，更不要说返回值类型了，要么函数中途抛出异常，要么函数里有死循环。</p><h3 id="有关-Type-assertions"><a href="#有关-Type-assertions" class="headerlink" title="有关 Type assertions"></a>有关 Type assertions</h3><p>（assertions好像是断言的意思，assert常常用来测试，如果不为真就抛出异常，姑且就翻译成类型转换吧） 类似其他语言的类型转换，只会在编译时产生影响，不会有额外的检查。有两种形式，一种是尖括号，一种是as（C#的影子）。注意类型转换的优先级较低，要用括号括起来。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>一提到变量，需要关注的点大概有这些：生命周期，static，const，作用域，可见性，值类型还是指针类型，浅拷贝深拷贝，还有一些常见的运算符，常见的方法。 ``` var a=10; function f(){ var message=”Hello World”; return message; } function f_2(){ var a=10; return function g(){ var b=a+1; return b; } } var g=f_2(); g(); function f_3(){ var a=1; a=2; var b=g(); a=3; return b; function g(){ return a; } } f_3(); //return 2!!! function f_4(shouldInitialize:boolean){ if(shouldInitialize){ var x=10; } return x; } f_4(true); //return 10 f_4(false); //return undefined!!! function sumMatrix(matrix:number[][]){ var sum=0; for(var i=0;i</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/6eb1636b/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Typescript 简述，安装，开发环境配置</title>
      <link>http://www.kherrisan.cn/posts/f576dfeb/</link>
      <guid>http://www.kherrisan.cn/posts/f576dfeb/</guid>
      <pubDate>Tue, 11 Jul 2017 14:20:15 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;Typescript是一个由微软开发的编程语言，听说有C#的首席架构师助阵Typescript的开发。是Javascript的超集，提供了可选的静态类型和基于类的面向对象编程，感觉就像C#和JavaScript之间的一种语言。 废话少说，先把环境搞起来，环境搭好了就可以码代码了。 以下所有的代码都来自于 &lt;a href=&quot;http://www.typescriptlang.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Typescript&quot;&gt;Typescriptlang&lt;/a&gt; 这个网站，感觉比较良心，大家可以参考一下。&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>Typescript是一个由微软开发的编程语言，听说有C#的首席架构师助阵Typescript的开发。是Javascript的超集，提供了可选的静态类型和基于类的面向对象编程，感觉就像C#和JavaScript之间的一种语言。 废话少说，先把环境搞起来，环境搭好了就可以码代码了。 以下所有的代码都来自于 <a href="http://www.typescriptlang.org" target="_blank" rel="noopener" title="Typescript">Typescriptlang</a> 这个网站，感觉比较良心，大家可以参考一下。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>用vs插件</li><li>用nodejs的npm</li></ol><p>我选择用npm</p><div class="hljs"><pre><code class="hljs null">npm install -g typescript</code></pre></div><p>编辑器的话，这次就不靠jetbrain家族了，尝试一下vscode吧，好像vscode对typescript的支持也是相当充足的。说来也有趣，vscode里typescript的插件几乎有一般都是用来自动import的。。。。。。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>我觉得还是先码一点代码，看看效果，再决定是否要找插件比较好。</p><div class="hljs"><pre><code class="hljs null">function greeter(person) {    return "Hello, " + person;}var user = "Jane User";document.body.innerHTML = greeter(user);</code></pre></div><p>嗯这就是一段HelloWorld，不是从标准输出而是在网页上输出的。另存为<code>greeter.ts</code>。</p><div class="hljs"><pre><code class="hljs null">tsc greeter.ts</code></pre></div><p>这一步将ts代码编译为js代码了，因为helloworld实在太简单，所以ts和js应该是没有区别的，除了他会帮你自动格式化一下。这还不算ts，毕竟还没有引入静态类型呢。</p><h2 id="加上一点点类型信息"><a href="#加上一点点类型信息" class="headerlink" title="加上一点点类型信息"></a>加上一点点类型信息</h2><div class="hljs"><pre><code class="hljs null">function greeter(person: string) {    return "Hello, " + person;}var user = [0, 1, 2];document.body.innerHTML = greeter(user);</code></pre></div><p>还没运行呢，编辑器就报错了，类型不对。Number[]无法适用于string。不写参数也算错。虽然tsc依然会生成js代码，但似乎不保证js代码运行的正确。</p><h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h2><div class="hljs"><pre><code class="hljs null">npm install -g typingstypings install dt~node –global</code></pre></div><p>typings是一个自动补全的工具，除了对语法块（snippet）补全之外，还可以对其他模块，其他包的内容进行分析，并提供自动补全的候选。</p><h2 id="创建一个完整的项目"><a href="#创建一个完整的项目" class="headerlink" title="创建一个完整的项目"></a>创建一个完整的项目</h2><div class="hljs"><pre><code class="hljs null">mkdir ts_democd ts_demo</code></pre></div><p>然后创建一个tsconfig.json文件，一般这个文件都是用来写ts项目的配置文件的。</p><div class="hljs"><pre><code class="hljs null">{    "compilerOptions": {        "target": "es5",        "module": "commonjs",        "sourceMap": true    }}</code></pre></div><p>然后写一个java风格的HelloWorld。</p><div class="hljs"><pre><code class="hljs null">class Startup {    public static main(): number {        console.log('Hello World');        return 0;    }}Startup.main();</code></pre></div><p>再然后，调处vscode的命令<code>Configure Task Runner</code>，选择<code>TypeScript - tsconfig.json</code>，他会在.vscode目录下新建一个task.json文件，文件内容如下：</p><div class="hljs"><pre><code class="hljs null">{    // See https://go.microsoft.com/fwlink/?LinkId=733558    // for the documentation about the tasks.json format    "version": "0.1.0",    "command": "tsc",    "isShellCommand": true,    "args": ["-p", "."],    "showOutput": "silent",    "problemMatcher": "$tsc"}</code></pre></div><p>这个文件描述的应该是把ts文件转换为js文件的操作。只要新建就可以了，不需要修改什么。保存一下以后，Ctrl+Shift+B会转换当前文件夹下的所有ts文件为js文件，然后用node运行相应的js文件即可。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/f576dfeb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>首</title>
      <link>http://www.kherrisan.cn/posts/b8431f23/</link>
      <guid>http://www.kherrisan.cn/posts/b8431f23/</guid>
      <pubDate>Sun, 25 Jun 2017 13:20:53 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;还是放弃了自己搭博客，即便是用django这种武装到牙齿的框架（从数据库取数据呈现到网页不超过五行代码），还是避不开前端傻兮兮的布置和设计。听说WordPress挺好用的，就试了试，在腾讯云开了个专门用于wordpress的服务器，配置非常方便，主题也十分丰富，可定制化程度
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>还是放弃了自己搭博客，即便是用django这种武装到牙齿的框架（从数据库取数据呈现到网页不超过五行代码），还是避不开前端傻兮兮的布置和设计。听说WordPress挺好用的，就试了试，在腾讯云开了个专门用于wordpress的服务器，配置非常方便，主题也十分丰富，可定制化程度也很高，还有杂七杂八的插件，感觉WordPress也算是不小的项目了。 所以以后就常驻在WordPress上面啦，文章日记或者别的什么乱七八糟的东西就在这上面写了。 令人<em><strong>愉悦</strong></em>的是，虽然WordPress是用php写的，但是并不需要我写php，我拒绝php的方针不需要动摇。</p>]]></content:encoded>
      
      <comments>http://www.kherrisan.cn/posts/b8431f23/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
